[
  {
    "name": "ElmFire.Auth",
    "comment": " Elm bindings to Firebase Authentication.\n\nNote that all tasks in this module refer to a entire Firebase, not a specific path within a Firebase.\nTherefore, only the root of the `Location` parameter is relevant.\n\n# Getting Authentication Status\n@docs Authentication, getAuth, subscribeAuth, unsubscribeAuth\n\n# Perform Authentication\n@docs Identification, authenticate, unauthenticate,\n  asAnonymous, withPassword, withOAuthPopup, withOAuthRedirect,\n  withOAuthAccessToken, withOAuthCredentials, withCustomToken\n\n# Options\n@docs Options, rememberDefault, rememberSessionOnly, rememberNone\n\n# User Management\n@docs UserOperation, userOperation,\n  createUser, removeUser, changeEmail, changePassword, resetPassword\n",
    "aliases": [
      {
        "name": "Authentication",
        "comment": " Authentication data. See Firebase doc for details. ",
        "args": [],
        "type": "{ uid : String , provider : String , token : String , expires : Date.Date , auth : Json.Encode.Value , specifics : Json.Encode.Value }"
      },
      {
        "name": "Options",
        "comment": " Optional authentication parameters\n\nAll providers allow option `remember` to specify the presistency of authentication.\n\nSpecific provider may accept additional options. See Firebase docs.\n",
        "args": [],
        "type": "List ( String, String )"
      }
    ],
    "types": [
      {
        "name": "Identification",
        "comment": " Identification options to authenticate at a Firebase ",
        "args": [],
        "cases": []
      },
      {
        "name": "UserOperation",
        "comment": " Specification of a user management operation ",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "asAnonymous",
        "comment": " Identify as a anonymous, temporary guest ",
        "type": "ElmFire.Auth.Identification"
      },
      {
        "name": "authenticate",
        "comment": " Authenticate client at a Firebase ",
        "type": "ElmFire.Location -> ElmFire.Auth.Options -> ElmFire.Auth.Identification -> Task.Task ElmFire.Error ElmFire.Auth.Authentication"
      },
      {
        "name": "changeEmail",
        "comment": " UserOperation: Change the email address of a user identity.\nParameter: oldEmail password newEmail ",
        "type": "String -> String -> String -> ElmFire.Auth.UserOperation"
      },
      {
        "name": "changePassword",
        "comment": " UserOperation: Change the password of a user identity.\nParameter: email oldPassword newPassword ",
        "type": "String -> String -> String -> ElmFire.Auth.UserOperation"
      },
      {
        "name": "createUser",
        "comment": " UserOperation: Create a user identity.\nParameter: email password ",
        "type": "String -> String -> ElmFire.Auth.UserOperation"
      },
      {
        "name": "getAuth",
        "comment": " Retrieve the current authentication state of the client ",
        "type": "ElmFire.Location -> Task.Task ElmFire.Error (Maybe.Maybe ElmFire.Auth.Authentication)"
      },
      {
        "name": "rememberDefault",
        "comment": " Option for default persistence:\nSessions are persisted for as long as it is configured in the Firebase's dashboard.\n",
        "type": "( String, String )"
      },
      {
        "name": "rememberNone",
        "comment": " Option for no persistence:\nNo persistent authentication data is used. End authentication as soon as the page is closed.\n",
        "type": "( String, String )"
      },
      {
        "name": "rememberSessionOnly",
        "comment": " Option for session only persistence:\nPersistence is limited to the lifetime of the current window.\n",
        "type": "( String, String )"
      },
      {
        "name": "removeUser",
        "comment": " UserOperation: Remove a user identity.\nParameter: email password ",
        "type": "String -> String -> ElmFire.Auth.UserOperation"
      },
      {
        "name": "resetPassword",
        "comment": " UserOperation: Initiate a password reset. Firebase will send an appropriate email to the account owner.\nParameter: email ",
        "type": "String -> ElmFire.Auth.UserOperation"
      },
      {
        "name": "subscribeAuth",
        "comment": " Subscribe to changes to the client's authentication state ",
        "type": "(Maybe.Maybe ElmFire.Auth.Authentication -> Task.Task x a) -> ElmFire.Location -> Task.Task ElmFire.Error ()"
      },
      {
        "name": "unauthenticate",
        "comment": " Unauthenticate client at a Firebase ",
        "type": "ElmFire.Location -> Task.Task ElmFire.Error ()"
      },
      {
        "name": "unsubscribeAuth",
        "comment": " Quit subscription to authentication state ",
        "type": "ElmFire.Location -> Task.Task ElmFire.Error ()"
      },
      {
        "name": "userOperation",
        "comment": " Perform a user management operation at a Firebase\n\nOperation `createUser` returns a `Just uid` on success,\nall other operations return `Nothing` on success.\n",
        "type": "ElmFire.Location -> ElmFire.Auth.UserOperation -> Task.Task ElmFire.Error (Maybe.Maybe String)"
      },
      {
        "name": "withCustomToken",
        "comment": " Identify using an authentication token or Firebase secret ",
        "type": "String -> ElmFire.Auth.Identification"
      },
      {
        "name": "withOAuthAccessToken",
        "comment": " Identify using OAuth access token ",
        "type": "String -> String -> ElmFire.Auth.Identification"
      },
      {
        "name": "withOAuthCredentials",
        "comment": " Identify using OAuth credentials ",
        "type": "String -> List ( String, String ) -> ElmFire.Auth.Identification"
      },
      {
        "name": "withOAuthPopup",
        "comment": " Identify using a popup-based OAuth flow ",
        "type": "String -> ElmFire.Auth.Identification"
      },
      {
        "name": "withOAuthRedirect",
        "comment": " Identify using a redirect-based OAuth flow ",
        "type": "String -> ElmFire.Auth.Identification"
      },
      {
        "name": "withPassword",
        "comment": " Identify with email and password ",
        "type": "String -> String -> ElmFire.Auth.Identification"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "ElmFire",
    "comment": " Elm Bindings to Firebase.\n\nElmFire maps the Firebase JavaScript API to Elm functions and tasks.\n\n# Firebase Locations\n@docs Location, fromUrl, sub, parent, root, push\n\n# Firebase References\n@docs Reference, open, key, toUrl, location\n\n# Priorities\n@docs Priority\n\n# Writing\n@docs set, setWithPriority, setPriority,  update, remove\n\n# Snapshots\n@docs Snapshot\n\n# Transactions\n@docs Action, transaction\n\n# Querying\n@docs Query, OrderOptions, RangeOptions, LimitOptions, Subscription, Cancellation,\n  subscribe, unsubscribe, once,\n  valueChanged, childAdded, childChanged, childRemoved, childMoved\n\n# Ordering\n@docs noOrder, orderByChild, orderByValue, orderByKey, orderByPriority\n\n# Filtering\n@docs noRange, startAt, endAt, range, equalTo\n\n# Limiting\n@docs noLimit, limitToFirst, limitToLast\n\n# Snapshot Processing\n@docs toSnapshotList, toValueList, toKeyList, toPairList, exportValue\n\n# Connection State and Offline Capabilities\n@docs goOffline, goOnline, subscribeConnected,\n  onDisconnectSet, onDisconnectSetWithPriority,\n  onDisconnectUpdate, onDisconnectRemove, onDisconnectCancel\n\n# Server Time\n@docs serverTimeStamp, subscribeServerTimeOffset\n\n# Error Reporting\n@docs Error, ErrorType, AuthErrorType\n",
    "aliases": [
      {
        "name": "Error",
        "comment": " Errors reported from Firebase or ElmFire ",
        "args": [],
        "type": "{ tag : ElmFire.ErrorType, description : String }"
      },
      {
        "name": "Snapshot",
        "comment": " Message about a received value.\n\n- `subscription` can be used to correlate the response to the corresponding query.\n- `value` is a Json value (and `null` when the queried location doesn't exist).\n- `existing` is `False` iff there is no value at the location, which can only occur in `valueChanged`-queries\n- `reference` points to the queried location\n- `key` is relevant particular for child queries and specifies the key of the data.\n- `prevKey` specifies the key of previous child (or Nothing for the first child), revealing the ordering. It's always Nothing for valueChanged queries.\n- `priority` returns the given priority of the data.\n",
        "args": [],
        "type": "{ subscription : ElmFire.Subscription , key : String , reference : ElmFire.Reference , existing : Bool , value : Json.Encode.Value , prevKey : Maybe.Maybe String , priority : ElmFire.Priority , intern_ : ElmFire.SnapshotFB }"
      }
    ],
    "types": [
      {
        "name": "Action",
        "comment": " Possible return values for update functions of a transaction ",
        "args": [],
        "cases": [
          [
            "Abort",
            []
          ],
          [
            "Remove",
            []
          ],
          [
            "Set",
            [
              "Json.Encode.Value"
            ]
          ]
        ]
      },
      {
        "name": "AuthErrorType",
        "comment": " Errors reported from Authentication Module ",
        "args": [],
        "cases": [
          [
            "AuthenticationDisabled",
            []
          ],
          [
            "EmailTaken",
            []
          ],
          [
            "InvalidArguments",
            []
          ],
          [
            "InvalidConfiguration",
            []
          ],
          [
            "InvalidCredentials",
            []
          ],
          [
            "InvalidEmail",
            []
          ],
          [
            "InvalidOrigin",
            []
          ],
          [
            "InvalidPassword",
            []
          ],
          [
            "InvalidProvider",
            []
          ],
          [
            "InvalidToken",
            []
          ],
          [
            "InvalidUser",
            []
          ],
          [
            "NetworkError",
            []
          ],
          [
            "ProviderError",
            []
          ],
          [
            "TransportUnavailable",
            []
          ],
          [
            "UnknownError",
            []
          ],
          [
            "UserCancelled",
            []
          ],
          [
            "UserDenied",
            []
          ],
          [
            "OtherAuthenticationError",
            []
          ]
        ]
      },
      {
        "name": "Cancellation",
        "comment": " Message about cancelled query ",
        "args": [],
        "cases": [
          [
            "Unsubscribed",
            [
              "ElmFire.Subscription"
            ]
          ],
          [
            "QueryError",
            [
              "ElmFire.Subscription",
              "ElmFire.Error"
            ]
          ]
        ]
      },
      {
        "name": "ErrorType",
        "comment": " Type of errors reported from Firebase or ElmFire ",
        "args": [],
        "cases": [
          [
            "LocationError",
            []
          ],
          [
            "PermissionError",
            []
          ],
          [
            "UnavailableError",
            []
          ],
          [
            "TooBigError",
            []
          ],
          [
            "OtherFirebaseError",
            []
          ],
          [
            "AuthError",
            [
              "ElmFire.AuthErrorType"
            ]
          ],
          [
            "UnknownSubscription",
            []
          ]
        ]
      },
      {
        "name": "LimitOptions",
        "comment": " Type to specify limiting the size of the query result set. Used within an ordered query ",
        "args": [],
        "cases": []
      },
      {
        "name": "Location",
        "comment": " A Firebase location, which is an opaque type\nthat represents a literal path into a firebase.\n\nA location can be constructed or obtained from\n- an absolute path by `fromUrl`\n- relative to another location by `sub`, `parent`, `root`, `push`\n- a reference by `location`\n\nLocations are generally unvalidated until their use in a task.\nThe constructor functions are pure.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "OrderOptions",
        "comment": " Type to specify ordering, filtering and limiting of queries ",
        "args": [],
        "cases": []
      },
      {
        "name": "Priority",
        "comment": " Each existing location in a Firebase may be attributed with a priority,\nwhich can be a number or a string.\n\nPriorities can be used for filtering and sorting entries in a query.\n",
        "args": [],
        "cases": [
          [
            "NoPriority",
            []
          ],
          [
            "NumberPriority",
            [
              "Float"
            ]
          ],
          [
            "StringPriority",
            [
              "String"
            ]
          ]
        ]
      },
      {
        "name": "Query",
        "comment": " A query specification: event type, possibly ordering with filtering and limiting ",
        "args": [],
        "cases": []
      },
      {
        "name": "RangeOptions",
        "comment": " Type to specify filtering options for the use within an ordered query ",
        "args": [
          "t"
        ],
        "cases": []
      },
      {
        "name": "Reference",
        "comment": " A Firebase reference, which is an opaque type that represents an opened path.\n\nReferences are returned from many Firebase tasks as well as in query results.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Subscription",
        "comment": " Unique opaque identifier for running subscriptions ",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "childAdded",
        "comment": " Build a query with event type \"child added\" ",
        "type": "ElmFire.OrderOptions -> ElmFire.Query"
      },
      {
        "name": "childChanged",
        "comment": " Build a query with event type \"child changed\" ",
        "type": "ElmFire.OrderOptions -> ElmFire.Query"
      },
      {
        "name": "childMoved",
        "comment": " Build a query with event type \"child moved\" ",
        "type": "ElmFire.OrderOptions -> ElmFire.Query"
      },
      {
        "name": "childRemoved",
        "comment": " Build a query with event type \"child removed\" ",
        "type": "ElmFire.OrderOptions -> ElmFire.Query"
      },
      {
        "name": "endAt",
        "comment": " Filter the ordered results to end at a given value.\n\nThe type of the value depends on the order criterium ",
        "type": "t -> ElmFire.RangeOptions t"
      },
      {
        "name": "equalTo",
        "comment": " Filter the ordered results to equal a given value.\n\nThe type of the value depends on the order criterium ",
        "type": "t -> ElmFire.RangeOptions t"
      },
      {
        "name": "exportValue",
        "comment": " Exports the entire contents of a Snapshot as a JavaScript object.\n\nThis is similar to .value except priority information is included (if available),\nmaking it suitable for backing up your data.\n",
        "type": "ElmFire.Snapshot -> Json.Encode.Value"
      },
      {
        "name": "fromUrl",
        "comment": " Construct a new location from a full Firebase URL.\n\n    loc = fromUrl \"https://elmfire.firebaseio-demo.com/foo/bar\"\n",
        "type": "String -> ElmFire.Location"
      },
      {
        "name": "goOffline",
        "comment": " Manually disconnect the client from the server\nand disables automatic reconnection. ",
        "type": "Task.Task x ()"
      },
      {
        "name": "goOnline",
        "comment": " Manually reestablish a connection to the server\nand enables automatic reconnection. ",
        "type": "Task.Task x ()"
      },
      {
        "name": "key",
        "comment": " Get the key of a reference.\n\nThe last token in a Firebase location is considered its key.\nIt's the empty string for the root.\n",
        "type": "ElmFire.Reference -> String"
      },
      {
        "name": "limitToFirst",
        "comment": " Limit the result set of an ordered query to the first certain number of children. ",
        "type": "Int -> ElmFire.LimitOptions"
      },
      {
        "name": "limitToLast",
        "comment": " Limit the result set of an ordered query to the last certain number of children. ",
        "type": "Int -> ElmFire.LimitOptions"
      },
      {
        "name": "location",
        "comment": " Obtain a location from a reference.\n\n    reference = location loc\n",
        "type": "ElmFire.Reference -> ElmFire.Location"
      },
      {
        "name": "noLimit",
        "comment": " Don't limit the number of children in the result set of an ordered query ",
        "type": "ElmFire.LimitOptions"
      },
      {
        "name": "noOrder",
        "comment": " Don't order results ",
        "type": "ElmFire.OrderOptions"
      },
      {
        "name": "noRange",
        "comment": " Don't filter the ordered results ",
        "type": "ElmFire.RangeOptions t"
      },
      {
        "name": "onDisconnectCancel",
        "comment": " Cancels all previously queued operations for this location and all children.\n",
        "type": "ElmFire.Location -> Task.Task ElmFire.Error ()"
      },
      {
        "name": "onDisconnectRemove",
        "comment": " Queue a `remove` operation on the server that get executed as soon as the client disconnects.\n",
        "type": "ElmFire.Location -> Task.Task ElmFire.Error ()"
      },
      {
        "name": "onDisconnectSet",
        "comment": " Queue a `set` operation on the server that get executed as soon as the client disconnects.\n",
        "type": "Json.Encode.Value -> ElmFire.Location -> Task.Task ElmFire.Error ()"
      },
      {
        "name": "onDisconnectSetWithPriority",
        "comment": " Queue a `setWithPriority` operation on the server that get executed as soon as the client disconnects.\n",
        "type": "Json.Encode.Value -> ElmFire.Priority -> ElmFire.Location -> Task.Task ElmFire.Error ()"
      },
      {
        "name": "onDisconnectUpdate",
        "comment": " Queue a `update` operation on the server that get executed as soon as the client disconnects.\n",
        "type": "Json.Encode.Value -> ElmFire.Location -> Task.Task ElmFire.Error ()"
      },
      {
        "name": "once",
        "comment": " Query a Firebase location for exactly one event of the specified type\n\nOn success the tasks results in the desired Snapshot.\nIt results in an error if either the location is invalid\nor you have no permission to read this data.\n\nThe third parameter specifies the event to listen to:\n`valueChanged`, `childAdded`, `childChanged`, `childRemoved` or `childMoved`.\nAdditionally, this parameter can also specify ordering, filtering and limiting of the query (see below).\n\nThe first parameter specifies the event to listen to:\n`valueChanged`, `childAdded`, `childChanged`, `childRemoved` or `childMoved`.\nAdditionally, this parameter may also specify ordering, filtering and limiting of the query (see below).\n\nThe second parameter specifies the location to be queried.\n",
        "type": "ElmFire.Query -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Snapshot"
      },
      {
        "name": "open",
        "comment": " Actually open a location, which results in a reference\n(if the location is valid).\n\nIt's generally not necessary to explicitly open a constructed location.\nIt can be used to check the location and to cache Firebase references.\n\nThe task fails if the location construct is invalid.\n\n    openTask =\n      (open <| sub user <| fromUrl \"https://elmfire.firebaseio-demo.com/users\")\n      `andThen` (\\ref -> Signal.send userRefCache.address (user, ref))\n",
        "type": "ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
      },
      {
        "name": "orderByChild",
        "comment": " Order results by the value of a given child\n(or deep child, as documented [here](https://www.firebase.com/blog/2015-09-24-atomic-writes-and-more.html))\n",
        "type": "String -> ElmFire.RangeOptions Json.Encode.Value -> ElmFire.LimitOptions -> ElmFire.OrderOptions"
      },
      {
        "name": "orderByKey",
        "comment": " Order results by key ",
        "type": "ElmFire.RangeOptions String -> ElmFire.LimitOptions -> ElmFire.OrderOptions"
      },
      {
        "name": "orderByPriority",
        "comment": " Order results by priority (and maybe secondary by key) ",
        "type": "ElmFire.RangeOptions ( ElmFire.Priority, Maybe.Maybe String ) -> ElmFire.LimitOptions -> ElmFire.OrderOptions"
      },
      {
        "name": "orderByValue",
        "comment": " Order results by value ",
        "type": "ElmFire.RangeOptions Json.Encode.Value -> ElmFire.LimitOptions -> ElmFire.OrderOptions"
      },
      {
        "name": "parent",
        "comment": " Construct the parent location from a child location.\n\n    loc2 = parent loc1\n",
        "type": "ElmFire.Location -> ElmFire.Location"
      },
      {
        "name": "push",
        "comment": " Construct a new child location using a to-be-generated key.\n\nA unique key is generated whenever the location is used in one of the tasks,\nnotably `open` or `set`.\nKeys are prefixed with a client-generated timestamp so that a resulting list\nwill be chronologically-sorted.\n\nYou may `open` the location or use `set` to actually generate the key\nand get its name.\n\n    set val (push loc) `andThen` (\\ref -> ... key ref ...)\n",
        "type": "ElmFire.Location -> ElmFire.Location"
      },
      {
        "name": "range",
        "comment": " Filter the ordered results to start at a given value and to end at another value.\n\nThe type of the value depends on the order criterium ",
        "type": "t -> t -> ElmFire.RangeOptions t"
      },
      {
        "name": "remove",
        "comment": " Delete a Firebase location.\n\nThe task completes with a reference to the deleted location when\nsynchronization to the Firebase servers has completed.\nThe task may result in an error if the location is invalid\nor you have no permission to remove this data.\n",
        "type": "ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
      },
      {
        "name": "root",
        "comment": " Construct the root location from descendant location\n\n    loc2 = root loc1\n",
        "type": "ElmFire.Location -> ElmFire.Location"
      },
      {
        "name": "serverTimeStamp",
        "comment": " A placeholder value for auto-populating the current timestamp\n(time since the Unix epoch, in milliseconds) by the Firebase servers ",
        "type": "Json.Encode.Value"
      },
      {
        "name": "set",
        "comment": " Write a Json value to a Firebase location.\n\nThe task completes with a reference to the changed location when\nsynchronization to the Firebase servers has completed.\nThe task may result in an error if the location is invalid\nor you have no permission to write this data.\n",
        "type": "Json.Encode.Value -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
      },
      {
        "name": "setPriority",
        "comment": " Set a priority for the data at a Firebase location.\n",
        "type": "ElmFire.Priority -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
      },
      {
        "name": "setWithPriority",
        "comment": " Write a Json value to a Firebase location and specify a priority for that data.\n",
        "type": "Json.Encode.Value -> ElmFire.Priority -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
      },
      {
        "name": "startAt",
        "comment": " Filter the ordered results to start at a given value.\n\nThe type of the value depends on the order criterium ",
        "type": "t -> ElmFire.RangeOptions t"
      },
      {
        "name": "sub",
        "comment": " Construct a location for the descendant at the specified relative path.\n\n    locUsers = sub \"users\" loc\n",
        "type": "String -> ElmFire.Location -> ElmFire.Location"
      },
      {
        "name": "subscribe",
        "comment": " Query a Firebase location by subscription\n\nOn success the task returns a Subscription,\nwhich can be used to match the corresponding responses\nand to unsubscribe the query.\n\nThe query results are reported via running a supplied task.\n\nThe first parameter is a function used to construct that task from a response.\n\nThe second parameter is a function used to construct a task that is run\nwhen the query gets canceled.\n\nThe third parameter specifies the event to listen to:\n`valueChanged`, `childAdded`, `childChanged`, `childRemoved` or `childMoved`.\nAdditionally, this parameter may also specify ordering, filtering and limiting of the query (see below).\n\nThe fourth parameter specifies the location to be queried.\n",
        "type": "(ElmFire.Snapshot -> Task.Task x a) -> (ElmFire.Cancellation -> Task.Task y b) -> ElmFire.Query -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Subscription"
      },
      {
        "name": "subscribeConnected",
        "comment": " Subscribe to connection state changes ",
        "type": "(Bool -> Task.Task x a) -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Subscription"
      },
      {
        "name": "subscribeServerTimeOffset",
        "comment": " Subscribe to server time offset ",
        "type": "(Time.Time -> Task.Task x a) -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Subscription"
      },
      {
        "name": "toKeyList",
        "comment": " Convert a snapshot's children into a list of its keys ",
        "type": "ElmFire.Snapshot -> List String"
      },
      {
        "name": "toPairList",
        "comment": " Convert a snapshot's children into a list of key-value-pairs ",
        "type": "ElmFire.Snapshot -> List ( String, Json.Encode.Value )"
      },
      {
        "name": "toSnapshotList",
        "comment": " Convert a snapshot's children into a list of snapshots\n\nOrdering of the children is presevered.\nSo, if the snapshot results from a ordered valueChanged-query\nthen toSnapshotList allows for conserving this ordering as a list.\n",
        "type": "ElmFire.Snapshot -> List ElmFire.Snapshot"
      },
      {
        "name": "toUrl",
        "comment": " Get the url of a reference. ",
        "type": "ElmFire.Reference -> String"
      },
      {
        "name": "toValueList",
        "comment": " Convert a snapshot's children into a list of its values ",
        "type": "ElmFire.Snapshot -> List Json.Encode.Value"
      },
      {
        "name": "transaction",
        "comment": " Transaction: Atomically modify the data at a location\n\nFirst parameter is a function which will be passed the current data stored at this location (or Nothing if the location contains no data).\nThe function returns an Action, which is either Set Value, or Abort, or Remove.\nThe second parameter specifies the location at which the transaction should be performed.\nThe third parameter denotes whether intermediate states are reported to local query subscriptions (True) or suppressed (False).\n\nOn success the task returns a tuple:\nIts first element indicates whether the transaction was commited (True) or aborted (False).\nRegardless, the second element is a Snapshot containing the resulting data at that location.\n",
        "type": "(Maybe.Maybe Json.Encode.Value -> ElmFire.Action) -> ElmFire.Location -> Bool -> Task.Task ElmFire.Error ( Bool, ElmFire.Snapshot )"
      },
      {
        "name": "unsubscribe",
        "comment": " Cancel a query subscription ",
        "type": "ElmFire.Subscription -> Task.Task ElmFire.Error ()"
      },
      {
        "name": "update",
        "comment": " Write the children in a Json value to a Firebase location.\n\nThis will overwrite only children present in the first parameter\nand will leave others untouched.\n\nIt is also possible to do atomic multi-location updates as documented [here](https://www.firebase.com/blog/2015-09-24-atomic-writes-and-more.html).\n",
        "type": "Json.Encode.Value -> ElmFire.Location -> Task.Task ElmFire.Error ElmFire.Reference"
      },
      {
        "name": "valueChanged",
        "comment": " Build a query with event type \"value changed\" ",
        "type": "ElmFire.OrderOptions -> ElmFire.Query"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]