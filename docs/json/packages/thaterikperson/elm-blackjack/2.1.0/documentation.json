[
  {
    "name": "Blackjack",
    "comment": " This library provides a few utility functions\nfor a Blackjack application. It can compare hands\nand calculate the best score for a given set of cards.\n\n# Types\n@docs Hand, Card, CardType, CardSuit\n\n# Construction\n@docs newHand, newCard, addCardToHand, addCardsToHand, suitOfCard, typeOfCard\n\n# Utility Functions\n@docs isSplittable, isBust, hasAce, isSoft, isBlackjack, isTwentyOne, isHandBetterThan, isHandTiedWith, bestScore, cardValue\n\n# Serialization\n@docs deserializeSuit, deserializeType, deserializeCard, serializeSuit, serializeType\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Card",
        "comment": " Represents a standard playing card.\n",
        "args": [],
        "cases": [
          [
            "BjCard",
            [
              "{ type_ : Blackjack.CardType, suit : Blackjack.CardSuit }"
            ]
          ]
        ]
      },
      {
        "name": "CardSuit",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "Clubs",
            []
          ],
          [
            "Diamonds",
            []
          ],
          [
            "Hearts",
            []
          ],
          [
            "Spades",
            []
          ]
        ]
      },
      {
        "name": "CardType",
        "comment": " ",
        "args": [],
        "cases": [
          [
            "Ace",
            []
          ],
          [
            "King",
            []
          ],
          [
            "Queen",
            []
          ],
          [
            "Jack",
            []
          ],
          [
            "Ten",
            []
          ],
          [
            "Nine",
            []
          ],
          [
            "Eight",
            []
          ],
          [
            "Seven",
            []
          ],
          [
            "Six",
            []
          ],
          [
            "Five",
            []
          ],
          [
            "Four",
            []
          ],
          [
            "Three",
            []
          ],
          [
            "Two",
            []
          ]
        ]
      },
      {
        "name": "Hand",
        "comment": " Represents a hand in Blackjack. Can be\nan arbitrary number of cards.\n",
        "args": [],
        "cases": [
          [
            "BjHand",
            [
              "List Blackjack.Card"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "addCardToHand",
        "comment": " Add a card to an existing hand. Order of\ncards is irrelavent.\n",
        "type": "Blackjack.Card -> Blackjack.Hand -> Blackjack.Hand"
      },
      {
        "name": "addCardsToHand",
        "comment": " Add cards to an existing hand. Order of\ncards is irrelavent.\n",
        "type": "List Blackjack.Card -> Blackjack.Hand -> Blackjack.Hand"
      },
      {
        "name": "bestScore",
        "comment": " Returns the highest score a hand can have.\nIf all possible scores are greater than 21, 0\nis returned.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Seven Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Five Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n      |> addCardToHand (newCard Nine Hearts)\n\n    bestScore hand1 == 18\n    bestScore hand2 == 0\n",
        "type": "Blackjack.Hand -> Int"
      },
      {
        "name": "cardValue",
        "comment": " Get the number value of the card.\nReturns `0` for aces.\n",
        "type": "Blackjack.Card -> Int"
      },
      {
        "name": "deserializeCard",
        "comment": " Convert to Ints to a Card\n",
        "type": "Int -> Int -> Blackjack.Card"
      },
      {
        "name": "deserializeSuit",
        "comment": " Convert an Int to a CardSuit\n",
        "type": "Int -> Blackjack.CardSuit"
      },
      {
        "name": "deserializeType",
        "comment": " Convert an Int to a CardType\n",
        "type": "Int -> Blackjack.CardType"
      },
      {
        "name": "hasAce",
        "comment": " Test if one of the cards in the hand\nis an Ace. Useful if you want to prompt\nthe user to double-down.\n\n    hand = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n\n    hasAce hand == True\n",
        "type": "Blackjack.Hand -> Bool"
      },
      {
        "name": "isBlackjack",
        "comment": " Test if a hand is a Blackjack.\nA hand is Blackjack if it is composed of\none Ace and one face card or 10.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n\n    isBlackjack hand1 == True\n    isBlackjack hand2 == False\n",
        "type": "Blackjack.Hand -> Bool"
      },
      {
        "name": "isBust",
        "comment": " Test if a hand is busted. A hand\nis busted if all possible values are\ngreater than 21.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Ten Diamonds)\n      |> addCardToHand (newCard Queen Clubs)\n      |> addCardToHand (newCard Two Clubs)\n\n    isBust hand1 == False\n    isBust hand2 == True\n",
        "type": "Blackjack.Hand -> Bool"
      },
      {
        "name": "isHandBetterThan",
        "comment": " Test if one hand has a better score than\nanother hand. Useful to compare a player's\nhand against a dealer's. The hand with the\nhighest score while less than or equal to 21\nis the best hand.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Seven Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Five Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n\n    isHandBetterThan hand1 hand2 == True\n",
        "type": "Blackjack.Hand -> Blackjack.Hand -> Bool"
      },
      {
        "name": "isHandTiedWith",
        "comment": " Test if one hand has the same score as\nanother hand. Useful to compare a player's\nhand against a dealer's.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Seven Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Five Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n      |> addCardToHand (newCard Two Hearts)\n\n    isHandTiedWith hand1 hand2 == True\n",
        "type": "Blackjack.Hand -> Blackjack.Hand -> Bool"
      },
      {
        "name": "isSoft",
        "comment": " Test if the hand is \"soft\". Indicates hand can\nreceive an extra card without the threat of busting.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Six Clubs)\n\n    isSoft hand1 == True\n",
        "type": "Blackjack.Hand -> Bool"
      },
      {
        "name": "isSplittable",
        "comment": " Test if a hand is splittable. A hand\nis only splittable if it has two cards,\nboth of the same value.\n\n    hand = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n\n    isSplittable hand == True\n",
        "type": "Blackjack.Hand -> Bool"
      },
      {
        "name": "isTwentyOne",
        "comment": " Test if a hand's value is 21. This\nwill return True for Blackjack hands as\nwell as non-Blackjack hands.\n\n    hand1 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ten Clubs)\n    hand2 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n    hand3 = newHand\n      |> addCardToHand (newCard Ace Diamonds)\n      |> addCardToHand (newCard Ace Clubs)\n      |> addCardToHand (newCard Nine Clubs)\n\n    isTwentyOne hand1 == True\n    isTwentyOne hand2 == False\n    isTwentyOne hand3 == True\n",
        "type": "Blackjack.Hand -> Bool"
      },
      {
        "name": "newCard",
        "comment": " Construct a card given the type and suit.\n",
        "type": "Blackjack.CardType -> Blackjack.CardSuit -> Blackjack.Card"
      },
      {
        "name": "newHand",
        "comment": " Construct an empty hand. Can be\neither a player's or dealer's hand.\n",
        "type": "Blackjack.Hand"
      },
      {
        "name": "serializeSuit",
        "comment": " Convert CardSuit to an Int\n",
        "type": "Blackjack.CardSuit -> Int"
      },
      {
        "name": "serializeType",
        "comment": " Convert CardType to an Int\n",
        "type": "Blackjack.CardType -> Int"
      },
      {
        "name": "suitOfCard",
        "comment": " Returns the suit of a given card.\n",
        "type": "Blackjack.Card -> Blackjack.CardSuit"
      },
      {
        "name": "typeOfCard",
        "comment": " Returns the type of a given card.\n",
        "type": "Blackjack.Card -> Blackjack.CardType"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]