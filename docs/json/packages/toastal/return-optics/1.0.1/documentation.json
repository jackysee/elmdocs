[
  {
    "name": "Return.Optics",
    "comment": "\n`Return.Optics` is a utility library extending `Return` with\n`Monocle` making a clean, concise API for doing Elm component updates\nin the context of other updates.\n\n\n@docs refractl, refracto\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "refractl",
        "comment": " Refract in a component's update via a `Lens` and a way to merge\nthe message back along a parent return in the update function.\n\n    Return.singleton model\n        |> case msg of\n            ...\n\n            MyComponentMsg msg ->\n                refractl Model.myComponent MyComponentMsg <|\n                    MyComponent.update msg\n\n",
        "type": "Monocle.Lens.Lens a b -> (d -> c) -> (b -> Return.Return d b) -> Return.ReturnF c a"
      },
      {
        "name": "refracto",
        "comment": " Refract in a component's update via an `Optional` and a way to merge\nthe message back along a parent return in the update function. If the\ngetter returns `Nothing` then the `Return` will not be modified.\n\n    Return.singleton model\n        |> case msg of\n            ...\n\n            MyComponentMsg msg ->\n                refracto Model.myComponent MyComponentMsg <|\n                    MyComponent.update msg\n",
        "type": "Monocle.Optional.Optional a b -> (d -> c) -> (b -> Return.Return d b) -> Return.ReturnF c a"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  }
]