[
  {
    "name": "AFrame.Primitives.Camera",
    "comment": " CAmera primitive.\n\n# Primitives\n@docs camera\n\n# Attributes\n@docs far, fov, lookControlsEnabled, near, wasdControlsEnabled\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "camera",
        "comment": " The camera primitive places the user somewhere within the scene.\n\n    camera [] []\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "far",
        "comment": " Camera frustum far clipping plane.\n",
        "type": "Int -> Html.Attribute msg"
      },
      {
        "name": "fov",
        "comment": " Field of view (in degrees).\n",
        "type": "Int -> Html.Attribute msg"
      },
      {
        "name": "lookControlsEnabled",
        "comment": " Enable look controls.\n\n    camera [ lookControlsEnabled False ] []\n",
        "type": "Bool -> Html.Attribute msg"
      },
      {
        "name": "near",
        "comment": " Camera frustum near clipping plane.\n",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "wasdControlsEnabled",
        "comment": " Enable WASD controls for camera.\n\n    camera [ wasdControlsEnabled False ] []\n",
        "type": "Bool -> Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "AFrame.Primitives.Attributes",
    "comment": " A-Frame primitive attributes.\n\n# Mesh attributes\n@docs color, metalness, shader, src, opacity, roughness, translate, transparent\n\n# Geometry attributes\n@docs radius, radiusTop, radiusBottom, position, scale, rotation, height, width, depth, segmentsRadial\n\n# Light attributes\n@docs angle, decay, distance, exponent, groundColor, intensity, type_\n\n# Scene attributes\n@docs vrModeUi\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "angle",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "color",
        "comment": " ",
        "type": "Color.Color -> Html.Attribute msg"
      },
      {
        "name": "decay",
        "comment": " Amount the light dims along the distance of the light.\n",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "depth",
        "comment": " ",
        "type": "Int -> Html.Attribute msg"
      },
      {
        "name": "distance",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "exponent",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "groundColor",
        "comment": " ",
        "type": "Color.Color -> Html.Attribute msg"
      },
      {
        "name": "height",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "intensity",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "metalness",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "opacity",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "position",
        "comment": " ",
        "type": "Float -> Float -> Float -> Html.Attribute msg"
      },
      {
        "name": "radius",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "radiusBottom",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "radiusTop",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "rotation",
        "comment": " ",
        "type": "Int -> Int -> Int -> Html.Attribute msg"
      },
      {
        "name": "roughness",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "scale",
        "comment": " ",
        "type": "Float -> Float -> Float -> Html.Attribute msg"
      },
      {
        "name": "segmentsRadial",
        "comment": " ",
        "type": "Int -> Html.Attribute msg"
      },
      {
        "name": "shader",
        "comment": " ",
        "type": "String -> Html.Attribute msg"
      },
      {
        "name": "src",
        "comment": " ",
        "type": "String -> Html.Attribute msg"
      },
      {
        "name": "translate",
        "comment": " ",
        "type": "Float -> Float -> Float -> Html.Attribute msg"
      },
      {
        "name": "transparent",
        "comment": " ",
        "type": "Bool -> Html.Attribute msg"
      },
      {
        "name": "type_",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      },
      {
        "name": "vrModeUi",
        "comment": " The vr-mode-ui component toggles UI such as an Enter VR button, compatibility modal, and orientation modal for mobile.\nThe vr-mode-ui component applies only to the `<a-scene>` element.\n",
        "type": "Bool -> Html.Attribute msg"
      },
      {
        "name": "width",
        "comment": " ",
        "type": "Float -> Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "AFrame.Primitives.Cursor",
    "comment": " Cursor primitive.\n\n# Definitions\n@docs cursor\n\n# Attributes\n@docs fuse, maxDistance, timeout\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "cursor",
        "comment": " The cursor primitive places a reticle or crosshair to add clicking\n    and interactivity with the scene.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "fuse",
        "comment": " Whether cursor should also be fuse-based.\n",
        "type": "Bool -> Html.Attribute msg"
      },
      {
        "name": "maxDistance",
        "comment": " Maximum distance to check for intersections on entities for clicks.\n",
        "type": "Int -> Html.Attribute msg"
      },
      {
        "name": "timeout",
        "comment": " How long to wait (in milliseconds) to trigger a click event if fuse-based.\n",
        "type": "Int -> Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "AFrame.Primitives",
    "comment": " A-Frame primitives.\n\n# Geometric primitives\n@docs box, cone, cylinder, plane, sphere, ring, torus, image\n\n# Scene primitives\n@docs sky, light\n\n# Asset management\n@docs assets, assetItem, image\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "assetItem",
        "comment": " An individual asset item. Asset items load an asset up front\nand can be referenced as a source later on. Use a src attribute\nto define what to load and specify an id which is used later on\nto use this asset as a source.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "assets",
        "comment": " The assets group is used to store assets that are pre-loaded\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "box",
        "comment": " The box primitive, formerly called <a-cube>,\n    creates shapes such as boxes, cubes, or walls.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "cone",
        "comment": " The cone primitive creates a cone shape.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "cylinder",
        "comment": " The cylinder primitive is an entity that\n    prescribes the geometry with its geometric primitive set to cylinder.\n    It can be used to create tubes and curved surfaces.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "image",
        "comment": " The image primitive shows an image on a flat plane.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "light",
        "comment": " The light primitive adjusts the lighting setup of the scene.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "plane",
        "comment": " The plane primitive creates flat surfaces.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "ring",
        "comment": " The ring primitive creates a ring or disc shape.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "sky",
        "comment": " The sky primitive adds a background to a scene\n    or display a 360-degree photo.\n    It is an entity that prescribes a large sphere with the material\n    mapped to the inside.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "sphere",
        "comment": " The sphere primitive creates a spherical or polyhedron shapes.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "torus",
        "comment": " The torus primitive creates a donut or circular tube shape.\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "AFrame.Animations",
    "comment": " This module provides a set of functions for declaring A-Frame animations.\n\n# Definition\n@docs animation\n\n# Animation attributes\n@docs attribute_, begin, direction, dur, easing, fill, from, repeat, to\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "animation",
        "comment": " Animation declaration.\n\n    box\n        []\n        [ animation\n            [ attribute \"rotation\"\n            , dur 10000\n            , fill \"forwards\"\n            , to \"0 360 0\"\n            , repeat \"indefinite\"\n            ]\n            []\n        ]\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "attribute_",
        "comment": " Attribute to animate.\n\n    animation [ attribute \"rotation\" ] []\n",
        "type": "String -> Html.Attribute msg"
      },
      {
        "name": "begin",
        "comment": " Delay (in milliseconds) or event name to wait on before beginning animation.\n\n    animation [ begin 5000 ] []\n",
        "type": "Int -> Html.Attribute msg"
      },
      {
        "name": "direction",
        "comment": " Direction of the animation (between from and to).\n    One of alternate, alternateReverse, normal, reverse.\n\n    animation [ direction \"reverse\" ] []\n",
        "type": "String -> Html.Attribute msg"
      },
      {
        "name": "dur",
        "comment": " Duration in (milliseconds) of the animation.\n\n    animation [ dur 5000 ] []\n",
        "type": "Int -> Html.Attribute msg"
      },
      {
        "name": "easing",
        "comment": " Easing function of the animation.\n\n    animation [ easing \"rotation\" ] []\n",
        "type": "String -> Html.Attribute msg"
      },
      {
        "name": "fill",
        "comment": " Determines effect of animation when not actively in play.\n    One of backwards, both, forwards, none.\n\n    animation [ fill \"rotation\" ] []\n",
        "type": "String -> Html.Attribute msg"
      },
      {
        "name": "from",
        "comment": " Starting value.\n\n    animation [ from \"0 120 0\" ] []\n",
        "type": "String -> Html.Attribute msg"
      },
      {
        "name": "repeat",
        "comment": " Repeat count or indefinite.\n\n    animation [ repeat 5000 ] []\n",
        "type": "Int -> Html.Attribute msg"
      },
      {
        "name": "to",
        "comment": " Ending value. Must be specified.\n\n    animation [ to \"0 360 0\" ] []\n",
        "type": "String -> Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "AFrame.Extra.Physics",
    "comment": " Components for A-Frame physics integration.\n\n# Primitives\n@docs grid\n\n# Primitive attributes\n@docs dynamicBody, staticBody\n\n# Camera attributes\n@docs kinematicBody\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "dynamicBody",
        "comment": " A freely-moving object. Dynamic bodies have mass,\n    collide with other objects, bounce or slow during collisions,\n    and fall if gravity is enabled.\n\n    box [ dynamicBody ] []\n",
        "type": "Html.Attribute msg"
      },
      {
        "name": "grid",
        "comment": " Floor.\n\n    grid [ staticBody ] []\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "kinematicBody",
        "comment": " Player-controlled body, which can move but is not affected (directly)\n    y the physics engine. Intended for use on the player's model.\n    Gravity and collisions are simulated,\n    without giving full control to the physics engine.\n\n    box [ staticBody ] []\n",
        "type": "Html.Attribute msg"
      },
      {
        "name": "staticBody",
        "comment": " A fixed-position or animated object.\n    Other objects may collide with static bodies,\n    but static bodies themselves are unaffected by gravity and collisions.\n\n    box [ staticBody ] []\n",
        "type": "Html.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "AFrame",
    "comment": " [A-Frame](https://aframe.io/docs/0.2.0/guide/) is a open-source framework for creating 3D and virtual reality experiences on the web.\n\n# Scene\n@docs scene\n\n# Entity\n@docs entity\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "entity",
        "comment": " An entity is represented by the <a-entity> element.\n    As defined in the entity-component-system pattern,\n    entities are placeholder objects to which we plug in components\n    to in order to provide them apperance, behavior, and functionality.\n\n    entity [ rotation 90 0 0 ] []\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      },
      {
        "name": "scene",
        "comment": " A scene is represented by the <a-scene> element.\n    The scene is the global root object,\n    and all entities are contained within the scene.\n\n    main =\n        scene [] [ box [] [] ]\n",
        "type": "List (Html.Attribute msg) -> List (Html.Html msg) -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]