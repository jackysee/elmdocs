[
  {
    "name": "Color.Mixing",
    "comment": "\n\n@docs Factor, lighten, darken, saturate, desaturate, fade, fadeIn, fadeOut,  mix, spin, tint, shade\n\n@docs average, difference, exclusion, hardlight, multiply, negation, overlay, screen, softlight\n\n\n",
    "aliases": [
      {
        "name": "Factor",
        "comment": " A Float that should be between 0.0 and 1.0\n\n",
        "args": [],
        "type": "Float"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "average",
        "comment": " Compute the average of two colors on a per-channel (RGB) basis.\n",
        "type": "Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "darken",
        "comment": " Decrease the lightness of a color.\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      },
      {
        "name": "desaturate",
        "comment": " Decrease the saturation of a color in the HSL color space by an absolute amount.\n\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      },
      {
        "name": "difference",
        "comment": " Subtracts the second color from the first color on a channel-by-channel basis. Negative values are inverted. Subtracting black results in no change; subtracting white results in color inversion.\n",
        "type": "Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "exclusion",
        "comment": " A similar effect to difference with lower contrast.\n",
        "type": "Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "fade",
        "comment": " Set the absolute transparency of a color.\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      },
      {
        "name": "fadeIn",
        "comment": " Decrease the transparency of a color, making it more opaque.\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      },
      {
        "name": "fadeOut",
        "comment": " Increase the transparency of a color, making it less opaque.\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      },
      {
        "name": "hardlight",
        "comment": " The same as overlay but with the color roles reversed.\n\n",
        "type": "Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "lighten",
        "comment": " Increase the lightness of a color.\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      },
      {
        "name": "mix",
        "comment": " Mix two colors together in variable proportion. Opacity is included in the calculations.\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "multiply",
        "comment": " Multiply two colors. Corresponding RGB channels from each of the two colors are multiplied together then divided by 255. The result is a darker color.\n",
        "type": "Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "negation",
        "comment": " Do the opposite effect to difference.\n",
        "type": "Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "overlay",
        "comment": " Combines the effects of both multiply and screen. Conditionally make light channels lighter and dark channels darker.\n\n__Note:__ The results of the conditions are determined by the first color parameter.\n\n",
        "type": "Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "saturate",
        "comment": " Increase the saturation of a color in the HSL color space by an absolute amount.\n\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      },
      {
        "name": "screen",
        "comment": " Do the opposite of `multiply`. The result is a brighter color.\n",
        "type": "Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "shade",
        "comment": " Mix color with black in variable proportion.  Same as calling `mix` with black.\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      },
      {
        "name": "softlight",
        "comment": " Similar to overlay but avoids pure black resulting in pure black, and pure white resulting in pure white.\n\n",
        "type": "Color.Color -> Color.Color -> Color.Color"
      },
      {
        "name": "spin",
        "comment": " Rotate the hue angle of a color in either direction.\n\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      },
      {
        "name": "tint",
        "comment": " Mix color with white in variable proportion. Same as calling `mix` with white.\n",
        "type": "Color.Mixing.Factor -> Color.Color -> Color.Color"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  }
]