[
  {
    "name": "Examples.LunrelmNewWith",
    "comment": " Create an index with customized\nstop word filter using Lunrelm.newWith\n\n@docs codeForLunrelmNewWithExample\n@docs ExampleDocType\n@docs createNewWithIndexExample\n@docs addDocToIndexExample\n@docs searchIndexExample\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [
      {
        "name": "ExampleDocType",
        "comment": " Example document type. ",
        "args": [],
        "type": "{ cid : String, title : String, author : String, body : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "addDocToIndexExample",
        "comment": " Adding a document to the index. ",
        "type": "Result.Result String (Lunrelm.Index Examples.LunrelmNewWith.ExampleDocType)"
      },
      {
        "name": "codeForLunrelmNewWithExample",
        "comment": " Code for this example.\n```\n\nimport Lunrelm\nimport IndexDefaults\nimport StopWordFilter\n\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateMyStopWordFilter =\n    StopWordFilter.createFilterFuncWith\n      [ \"electronic\" ]\n\n\ncreateNewWithIndexExample : Lunrelm.Index ExampleDocType\ncreateNewWithIndexExample =\n  Lunrelm.newWith\n    { indexType = \"Lunrelm - For paw paw automation index v1\"\n    , ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    , transformFactories = IndexDefaults.defaultTransformFactories\n    , filterFactories = [ createMyStopWordFilter ]\n    }\n\n\naddDocToIndexExample : Result String (Lunrelm.Index ExampleDocType)\naddDocToIndexExample =\n    Lunrelm.add\n      createNewWithIndexExample\n      { cid = \"id1\"\n      , title = \"The Pawpaw Harvester Model G45\"\n      , author = \"Pawpaw Fan\"\n      , body = \"It can help you harvest pawpaws. It also does avocado.\"\n      }\n\n\nsearchIndexExample :\n    Result\n      String\n      ( Result\n          String\n          ( Lunrelm.Index ExampleDocType, List (String, Float) )\n      )\nsearchIndexExample =\n    Result.map\n      (\\index ->\n        Lunrelm.search\n          index\n          \"avocado\"\n      )\n      addDocToIndexExample\n\n\n```\n",
        "type": "String"
      },
      {
        "name": "createNewWithIndexExample",
        "comment": " Create a Lunrelm index with extra options.\n\nIn this case a customized stop word filter is provided.\n\nThis example is replacing the stop word filter only.\n\nIt is still supplying the default transform factories.\n\nSupply an index type for your customized index config. This\nbecomes important when loading back saved index.\n\nIt is a good idea to include a version in your index type string\nin case you update things and might still have old versions\naround that you need to work with.\n\nSee Examples.LunrelmNew for informatoin about the `ref` and `fields` fields.\n",
        "type": "Lunrelm.Index Examples.LunrelmNewWith.ExampleDocType"
      },
      {
        "name": "searchIndexExample",
        "comment": " Search the index.\n\nThe result includes an updated Index because a search causes internal\ncaches to be updated to improve overall performance.\n",
        "type": "Result.Result String (Result.Result String ( Lunrelm.Index Examples.LunrelmNewWith.ExampleDocType , List ( String, Float ) ))"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Examples.LunrelmNew",
    "comment": " Create an index and add a document.\n\n@docs codeForLunrelmNewExample\n@docs ExampleDocType\n@docs createNewIndexExample\n@docs updatedMyIndexAfterAdd\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [
      {
        "name": "ExampleDocType",
        "comment": " Example document type. ",
        "args": [],
        "type": "{ cid : String, title : String, author : String, body : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "codeForLunrelmNewExample",
        "comment": " Code for this example.\n\n```\nimport Lunrelm\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateNewIndexExample : Lunrelm.Index ExampleDocType\ncreateNewIndexExample =\n  Lunrelm.new\n    { ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    }\n\n{-| Add a document to an index. -}\nupdatedMyIndexAfterAdd : Result String (Lunrelm.Index ExampleDocType)\nupdatedMyIndexAfterAdd =\n    Lunrelm.add\n      createNewIndexExample\n      { cid = \"id1\"\n      , title = \"First Title\"\n      , author = \"Some Author\"\n      , body = \"Words in this document.\"\n      }\n```\n\n",
        "type": "String"
      },
      {
        "name": "createNewIndexExample",
        "comment": " Create a Lunrelm index with default configuration.\n\nThe provided configuration has the following meaning\n* ref\n * The unique document reference will be extracted from each\n   document using the `.cid` function.\n* fields\n * The following fields will be indexed from each document\n  * `.title`\n  * `.body`\n * When searching the index any word matches found in the\n   `.title` field (boost value 5) raise the document match score\n   more than if found in the `.body` field (boost value 1).\n  * The document match score determines the order of the list\n    of matching documents returned.\n\n\n",
        "type": "Lunrelm.Index Examples.LunrelmNew.ExampleDocType"
      },
      {
        "name": "updatedMyIndexAfterAdd",
        "comment": " Add a document to an index. ",
        "type": "Result.Result String (Lunrelm.Index Examples.LunrelmNew.ExampleDocType)"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Lunrelm",
    "comment": " Lunrelm a full text indexer written in Elm language inspired by lunr.js.\n\nA useful article about lunr.js\nhttps://www.new-bamboo.co.uk/blog/2013/02/26/full-text-search-in-your-browser/\n\n## Create Index\n@docs new\n@docs newWith\n\n## Modify Index\n@docs add\n@docs remove\n@docs update\n\n## Query Index\n@docs search\n\n## Types\n@docs Index\n@docs Config\n@docs LunrelmSimpleConfig\n\n## Save and Load a Lunerlm Index\n\n* You can save an index using [`Lunrelm.Json.Encoder.encoder`](Lunrelm.Json.Encoder#encoder)\n* You can load a saved index using\n  [`Lunrelm.Json.Decoder.decoder`](Lunrelm.Json.Decoder#decoder)\n  to produce a `CodecIndexRecord`.\n* You can save a CodecIndexRecord using [`Lunrelm.Json.Encoder.encoder`](Lunrelm.Json.Encoder#encoder)\n* ** Modifying an index outside of Lunrelm using the Decoder and Encoder directly\nmay cause it to not work correctly loaded into Lurelm. **\n\n@docs storeToValue\n@docs storeToString\n@docs fromString\n@docs fromValue\n@docs fromStringWith\n@docs fromValueWith\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [
      {
        "name": "Config",
        "comment": " Lunrelm configuration. ",
        "args": [
          "doc"
        ],
        "type": "IndexModel.Config doc"
      },
      {
        "name": "Index",
        "comment": " Lunrelm Index\n",
        "args": [
          "doc"
        ],
        "type": "Index.Index doc"
      },
      {
        "name": "LunrelmSimpleConfig",
        "comment": " Lunrelm SimpleConfig. ",
        "args": [
          "doc"
        ],
        "type": "{ ref : doc -> String, fields : List ( doc -> String, Float ) }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "add",
        "comment": " Add a document to Lunrelm index.\n\nStarting with the Lunrelm.new example above this adds a document.\n```\n    updatedIndex =\n      Lunrelm.add\n        indexMyDocs\n        { cid = \"123\"\n        , title = \"Examples of a Banana\"\n        , author = \"Sally Apples\"\n        , body = \"Sally writes words about a banana.\"\n        }\n```\n\nConditions that cause a result Err with message.\n* Error document ref is empty.\n* Error after tokenisation there are no terms to index.\n* Error adding document that allready exists.\n",
        "type": "Lunrelm.Index doc -> doc -> Result.Result String (Lunrelm.Index doc)"
      },
      {
        "name": "fromString",
        "comment": " Create an Index from a String which has a stored Index in it and the\nsupplied basic configurations.\n\nSee [`Lunrelm.fromStringWith`](Lunrelm#fromStringWith) for possible Err results.\n",
        "type": "Lunrelm.LunrelmSimpleConfig doc -> String -> Result.Result String (Lunrelm.Index doc)"
      },
      {
        "name": "fromStringWith",
        "comment": " Create an Index from a String which has a stored Index in it.\n\nIf none of the indexVersion in the list of Config match the index\ntype being loaded it will return an Err.\n\nThe list of configurations wil be searched for a matching indexType\nso you should provide configs for all types you may be trying to load.\nNo more than the config that matches is required though.\n\nIf the none of the supplied Config match the loaded Index then it\nwill try if the index being loaded matches the default version if so\nit will still load the index.\n\nThe following Err results may be returned.\n* \"Error cannot load Lunrelm Index. Tried to load index of type \\\"__IndexTest Type -\\\". It is not in supported index configurations.\"\n * It contains the loaded version index type which comes from input.\n* \"Error cannot load Lunrelm Index. Version supported is 1.0.0. Version tried to load is 1.0.1.\"\n * It includes both expected and loaded versions which may vary.\n\n",
        "type": "List (Lunrelm.Config doc) -> String -> Result.Result String (Lunrelm.Index doc)"
      },
      {
        "name": "fromValue",
        "comment": " Create an Index from a Value which has a stored Index in it.\n\nSee [`Lunrelm.fromStringWith`](Lunrelm#fromStringWith) for possible Err results.\n",
        "type": "Lunrelm.LunrelmSimpleConfig doc -> Json.Decode.Value -> Result.Result String (Lunrelm.Index doc)"
      },
      {
        "name": "fromValueWith",
        "comment": " Create an Index from a String which has a stored Index in it.\n\nIf none of the indexVersion in the list of SimpleConfig match the index\nbeing decoded it will return an Err.\n\nSee [`Lunrelm.fromStringWith`](Lunrelm#fromStringWith) for possible Err results.\n",
        "type": "List (Lunrelm.Config doc) -> Json.Decode.Value -> Result.Result String (Lunrelm.Index doc)"
      },
      {
        "name": "new",
        "comment": " Create new Lunrelm index.\n\nExample\n\n```\nimport Lunrelm\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateNewIndexExample : Lunrelm.Index ExampleDocType\ncreateNewIndexExample =\n  Lunrelm.new\n    { ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    }\n```\n\n### The default Lunrelm transform factories.\n\n```\n    IndexDefaults.defaultTransformFactories\n```\n\n\n### The default Lunrelm filter factories.\n\n```\n    IndexDefaults.defaultFilterFactories\n```\n\n",
        "type": "Lunrelm.LunrelmSimpleConfig doc -> Lunrelm.Index doc"
      },
      {
        "name": "newWith",
        "comment": " Create new Lunrelm index with additional configuration.\n\n```\nimport Lunrelm\nimport IndexDefaults\nimport StopWordFilter\n\n\ntype alias ExampleDocType =\n    { cid : String\n    , title : String\n    , author : String\n    , body : String\n    }\n\n\ncreateMyStopWordFilter =\n    StopWordFilter.createFilterFuncWith\n      [ \"electronic\" ]\n\n\ncreateNewWithIndexExample : Lunrelm.Index ExampleDocType\ncreateNewWithIndexExample =\n  Lunrelm.newWith\n    { indexType = \"Lunrelm - For paw paw automation index v1\"\n    , ref = .cid\n    , fields =\n        [ ( .title, 5.0 )\n        , ( .body, 1.0 )\n        ]\n    , transformFactories = IndexDefaults.defaultTransformFactories\n    , filterFactories = [ createMyStopWordFilter ]\n    }\n```\n\n",
        "type": "Lunrelm.Config doc -> Lunrelm.Index doc"
      },
      {
        "name": "remove",
        "comment": " Remove a document from Lunrelm index.\n\nStarting with the Lunrelm.new example above this removes a document.\n```\n    updatedIndex =\n      Lunrelm.remove\n        createNewIndexExample\n        { cid = \"123\"\n        , title = \"Examples of a Banana\"\n        , author = \"Sally Apples\"\n        , body = \"Sally writes words about a banana.\"\n        }\n```\n\nConditions that cause a result Err with message.\n* Error document has an empty unique id (ref).\n* Error document is not in index.\n",
        "type": "Lunrelm.Index doc -> doc -> Result.Result String (Lunrelm.Index doc)"
      },
      {
        "name": "search",
        "comment": " Search Lunrelm index with query.\n\n\nQueries are a string.\n\nTokens are extracted from the query string and passed through the\nsame processing used when indexing documents.\n\nEach token is expanded, so that the term \"he\" might be expanded to \"hello\"\nand \"help\" if those terms were already included in the document index.\n\nMultiple tokens are allowed and will lead to an AND based query.\n\nThe following example runs a search for documents containing both \"apple\" and \"banana\".\n\n```\n    (updatedMyIndex, results) =\n      Index.search createNewIndexExample \"Apple banana\"\n```\n\nResults are a list of matching document reference identifiers with\nthere similarity to query score, ordered by score ascending.\n\nA possibly updated index is returned from search as well `updatedMyIndex`.\nThis is because the data model is updated with searches to cache information\nto improve overall perfromance, it is expected after sufficient searches the\nindex will no longer update due to searches.\n\nAdding or removing a new document will cause some of the internal caching to be reset.\n\nConditions that cause a result Err with message.\n* Error there are no documents in index to search.\n* Error query is empty.\n* Error after tokenisation there are no terms to search for.\n\n",
        "type": "Lunrelm.Index doc -> String -> Result.Result String ( Lunrelm.Index doc, List ( String, Float ) )"
      },
      {
        "name": "storeToString",
        "comment": " Store a Lunrelm index to a String.\n\nYou can also use [`Lunrelm.Json.Encoder`](Lunrelm.Json.Encoder).\n",
        "type": "Lunrelm.Index doc -> String"
      },
      {
        "name": "storeToValue",
        "comment": " Store a Lunrelm index to a Value.\n\nYou can also use [`Lunrelm.Json.Encoder`](Lunrelm.Json.Encoder).\n",
        "type": "Lunrelm.Index doc -> Json.Encode.Value"
      },
      {
        "name": "update",
        "comment": " Update a doc in Lunrelm index.\n\nStarting with the Lunrelm.new example above this updates a document.\n```\n    updatedIndex =\n      Lunrelm.remove\n        createNewIndexExample\n        { cid = \"123\"\n        , title = \"Examples of a Bananas in every day life.\"\n        , author = \"Sally Apples\"\n        , body = \"Sally writes more words about a banana.\"\n        }\n```\n\nConditions that cause an error result are those for\n[`Lunrelm.remove`](Lunrelm#remove) and then\n[`Lunrelm.add`](Lunrelm#add).\n\n",
        "type": "Lunrelm.Index doc -> doc -> Result.Result String (Lunrelm.Index doc)"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Lunrelm.Json.Encoder",
    "comment": " Encoder for Lunrelm Index.\n\n@docs encoder\n@docs codecIndexRecordEncoder\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "codecIndexRecordEncoder",
        "comment": " Encode CodecIndexRecord. ",
        "type": "IndexModel.CodecIndexRecord -> Json.Encode.Value"
      },
      {
        "name": "encoder",
        "comment": " Encoder for Index a.\n\nOnly encoding fields required to recreate a working index.\n\nThe following fields are not saved as they are restored via\nthe provided Config on fromString.\n* ref\n* fields\n* transformFactories\n* filterFactories\n\nThe following fields are not saved because they are an\nacceleration model, decoder needs to set it on fromString.\n* corpusTokensIndex\n\nThe following fields are not saved because they are caches\nand are cached as operationg requires\n* transforms\n* filters\n* idfCache\n\nDo not need an (a -> Encode.Value) because a is a document\ntype and that is never encoded from an Index.\n",
        "type": "IndexModel.Index doc -> Json.Encode.Value"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "IndexDefaults",
    "comment": " Where to get defaults for Lunrelm Index options.\n\n## Lunrelm Index Storage Engine Version and Type\n@docs indexVersion\n@docs lunrelmIndexType\n\n\n## Built in Transforms and Filters\n@docs defaultTransformFactories\n@docs defaultFilterFactories\n@docs defaultTokenTrimmerFuncCreator\n@docs defaultStemmerFuncCreator\n@docs defaultStopWordFilterFuncCreator\n\n\n## Config type adapters\n@docs getDefaultIndexConfig\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "defaultFilterFactories",
        "comment": " Lunrelm index default filter factories. ",
        "type": "List (IndexModel.FilterFactory doc)"
      },
      {
        "name": "defaultStemmerFuncCreator",
        "comment": " The default token stemmer transform function creator. ",
        "type": "IndexModel.TransformFactory doc"
      },
      {
        "name": "defaultStopWordFilterFuncCreator",
        "comment": " The default stop word filter function creator. ",
        "type": "IndexModel.FilterFactory doc"
      },
      {
        "name": "defaultTokenTrimmerFuncCreator",
        "comment": " The default token trimmer transform function creator.\nNormally applied first in transform functions.\n",
        "type": "IndexModel.TransformFactory doc"
      },
      {
        "name": "defaultTransformFactories",
        "comment": " Lunrelm index default transform factories. ",
        "type": "List (IndexModel.TransformFactory doc)"
      },
      {
        "name": "getDefaultIndexConfig",
        "comment": " Convert IndexModel.SimpleConfig to IndexModel.Config\n\nFilling in default values for fields not in SimpleConfig\n\nThis is the definition of the default index configuration.\n",
        "type": "IndexModel.SimpleConfig doc -> IndexModel.Config doc"
      },
      {
        "name": "indexVersion",
        "comment": " The version of index, for loading a saved index.\n\nThis is not the same as Lunrelm package version.\n\nThis needs to change if the encoded format changes.\n",
        "type": "String"
      },
      {
        "name": "lunrelmIndexType",
        "comment": " The type of index Lunrelm defaults to using.\n\nIt defines the default token transforms and filters.\n",
        "type": "String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "StopWordFilter",
    "comment": " StopWordFilter is an English language stop word list filter, any words\ncontained in the list are not stored in the index.\n\nThis is intended to be used in the Lunrelm token processing pipeline.\n\n### Things to know about stop word lists.\n* Input tokens to create stop word filters should be full words, if you\ndont know the transform steps for index or if you use the list with different\nsets of transforms.\n* If you know the exact transform process of your Index you can prerun the\ntransform process to generate your word list, which in theory might\nmake it a little more efficient.\n* It is more efficient to merge all your stop words into a single\nstop word filter.\n\n## create default stop word filter func\n@docs createDefaultFilterFunc\n\n## A default stop word english filter list\n@docs stopEnglishWordList\n\n## Create a custom stop word filter list\n@docs createFilterFuncWith\n@docs createFilterFunc\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "createDefaultFilterFunc",
        "comment": " Default english stop word filter suitable for Lunrelm.\n",
        "type": "IndexModel.FilterFactory doc"
      },
      {
        "name": "createFilterFunc",
        "comment": " Create stop word filter for provided list of tokens suitable for Lunrelm.\n\n** This creates a stop world filter purely from your own word list, understand\nwhat you are doing and consequences if you use this. **\n\nThe FilterFunc created returns True to allow words into index.\nSo words found in the stopWordList return False\n",
        "type": "List String -> IndexModel.FilterFactory doc"
      },
      {
        "name": "createFilterFuncWith",
        "comment": " Create stop word list filter suitable for Lunrelm, this versions\nextends the default word list with the extra words provided.\n",
        "type": "List String -> IndexModel.FilterFactory doc"
      },
      {
        "name": "stopEnglishWordList",
        "comment": " Default english stop word list to create filter.\n",
        "type": "List String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Lunrelm.Json.Decoder",
    "comment": " Decoder for Lunrelm Index.\n\nIt decodes to a CodecIndexRecord.\n\n@docs decoder\n\nCopyright (c) 2016 Robin Luiten\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "decoder",
        "comment": " CodecIndexRecord decoder. ",
        "type": "Json.Decode.Decoder IndexModel.CodecIndexRecord"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]