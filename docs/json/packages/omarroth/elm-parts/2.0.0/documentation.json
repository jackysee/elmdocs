[
  {
    "name": "Parts",
    "comment": " \n\nGiven a TEA component with model type `model` and message type `msg`, we construct\na variant component which knows how to extract its model from a c model\n`c` and produces generic messages `Msg c`. The consuming component is assumed\nto have message type `obs` (for \"observation\"). \n\n# Lazyness\n\nRecall that `Html.Lazy` avoids re-computing views when the model doesn't change\nacross updates. However, \"doesn't change\" does not mean `model == model_` but rather\nthe stricter `model === model_` (in Javascript terms). That is, the old and new model\nmust not only be structurally the same, they must be literally the same\ndata-structure in memory.  \n\nParts generally do not achieve referential equality of no-op updates, since we\nare wrapping updates conceptually like this: \n\n    let (submodel, submsgs) = SubComponent.update msg model.submodel \n        model_ = { model | submodel = submodel }\n    in \n        ...\nIn the second line, even if `submodel == model.submodel` and so `model ==\nmodel_`, we won't have (in Javascript terms) `model === model_`. \n\nFor this reason, the result of `update` functions used in parts should be\n`Maybe (model, Cmd msg)` rather than the usual `(model, Cmd msg)`; the \n`Nothing` case signifies a no-op. \n\n# Communicating to the parent component\n\nBecause parts wrap messages in an opaque type, the parent component loses the\nability to inspect and maybe react to messages of the part. We recover this \nability by requiring the `update` function to take as parameter a lifting \nfunction which lifts the parts messages to that of its parent. \n\n@docs Update, View\n\n# Model embeddings \n@docs Get, Set, embedView, embedUpdate\n@docs accessors, Accessors\n\n## Indexed model embeddings\n@docs Index, Indexed, indexed\n\n# Message embeddings\n@docs Msg, update, update_, partial\n\n# Part construction\n@docs create, create1, generalize, pack, pack1\n",
    "aliases": [
      {
        "name": "Accessors",
        "comment": " For components where consumers do care about the model of the \ncomponent, use the `accessors` function below to generate suitable, \nwell, accessors.\n",
        "args": [
          "model",
          "c"
        ],
        "type": "{ get : Parts.Get model c , set : Parts.Set model c , map : (model -> model) -> c -> c , reset : c -> c }"
      },
      {
        "name": "Get",
        "comment": " Type of \"getter\": fetch component model `m` from c model `c`. \n",
        "args": [
          "model",
          "c"
        ],
        "type": "c -> model"
      },
      {
        "name": "Index",
        "comment": " Type of indices. An index has to be `comparable`\n\nFor example:\nAn index can be a list of `Int` rather than just an `Int` to\nsupport nested dynamically constructed elements: Use indices `[0]`, `[1]`, ...\nfor statically known top-level components, then use `[0,0]`, `[0,1]`, ...\nfor a dynamically generated list of components.\n",
        "args": [
          "comparable"
        ],
        "type": "comparable"
      },
      {
        "name": "Indexed",
        "comment": " Indexed families of things.\n",
        "args": [
          "comparable",
          "a"
        ],
        "type": "Dict.Dict (Parts.Index comparable) a"
      },
      {
        "name": "Set",
        "comment": " Type of \"setter\": update component model `m` in c `c`. \n",
        "args": [
          "model",
          "c"
        ],
        "type": "model -> c -> c"
      },
      {
        "name": "Update",
        "comment": " Update functions. \n\nTEA update function with explicit message lifting and no-op. You should have:\n\n    Tuple.first (update f msg model) == Nothing       -- No change to model\n    Tuple.first (update f msg model) == Just model_   -- Change to model_\n",
        "args": [
          "model",
          "msg",
          "obs"
        ],
        "type": "(msg -> obs) -> msg -> model -> Maybe.Maybe ( model, Platform.Cmd.Cmd obs )"
      },
      {
        "name": "View",
        "comment": " Standard TEA view function type. \n",
        "args": [
          "model",
          "a"
        ],
        "type": "model -> a"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Similar to how embeddings enable collecting models of different type\nin a single model c, we collect messages in a single \"master\nmessage\" type. Messages exist exclusively to be dispatched by a corresponding\n`update` function; we can avoid distinguishing between different types of \nmessages by dispatching not the `Msg` itself, but a partially applied update\nfunction `update msg`. \n\nIt's instructive to compare `Msg` to the type of `update` partially applied to \nan actual carried message `m`:\n\n    update : m -> c -> (c, Cmd m)\n    (update m) : c -> (c, Cmd m)\n",
        "args": [
          "c",
          "obs"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "accessors",
        "comment": " Generate accessors.\n",
        "type": "Parts.Get (Dict.Dict comparable model) c -> Parts.Set (Dict.Dict comparable model) c -> model -> Parts.Index comparable -> Parts.Accessors model c"
      },
      {
        "name": "create",
        "comment": " From `update` and `view` functions, produce a `view` function which (a) \nfetches its model from a `c` model, and (b) dispatches generic `Msg`\nmessages. \n\nIts instructive to compare the types of the input `view` and `update` for a \ntypical case. Notice that `create` transforms `model` -> `c` and\n`Html m` -> `Html obs`.\n\n  {- Input -}\n  view : (m -> obs) -> model -> List (Attributes obs) -> List (Html obs) -> Html obs\n  update : (m -> obs) -> model -> (Maybe model, Cmd obs)\n\n  {- Output -}\n  view : Index comparable -> c -> List (Attributes obs) -> List (Html obs) -> Html obs\n\nNote that the input `view` function is assumed to take a function lifting its\nmessages. \n",
        "type": "((a -> c) -> b -> d) -> ((a -> c) -> a -> b -> ( Maybe.Maybe b, Platform.Cmd.Cmd obs )) -> Parts.Get (Parts.Indexed comparable b) e -> Parts.Set (Parts.Indexed comparable b) e -> b -> (Parts.Msg e obs -> c) -> Parts.Index comparable -> e -> d"
      },
      {
        "name": "create1",
        "comment": " Like `create`, but for components that are assumed to have only one\ninstance.\n",
        "type": "((b -> c) -> Parts.View d a) -> ((b -> c) -> b -> d -> ( Maybe.Maybe a1, Platform.Cmd.Cmd obs )) -> (c1 -> d) -> (a1 -> c1 -> c1) -> (Parts.Msg c1 obs -> c) -> Parts.View c1 a"
      },
      {
        "name": "embedUpdate",
        "comment": " Lift an `Update` from operating on `model` to a c model `c`. \n",
        "type": "(d -> e) -> (a -> d -> c) -> (f -> g -> e -> ( Maybe.Maybe a, b )) -> f -> g -> d -> ( Maybe.Maybe c, b )"
      },
      {
        "name": "embedView",
        "comment": " Lift a `view` to one which knows how to retrieve its `model` from \na c model `c`. \n",
        "type": "Parts.Get model c -> Parts.View model a -> Parts.View c a"
      },
      {
        "name": "generalize",
        "comment": " Generalise a standard TEA `update` function to one fitting with \nparts (explicit lifter, explicit no-op). \n",
        "type": "(b -> c -> ( a, Platform.Cmd.Cmd a1 )) -> (a1 -> msg) -> b -> c -> ( Maybe.Maybe a, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "indexed",
        "comment": " Fix a getter and setter for an `Indexed comparable model` to a particular `Index comparable`.\n",
        "type": "Parts.Get (Parts.Indexed comparable model) c -> Parts.Set (Parts.Indexed comparable model) c -> model -> ( Parts.Index comparable -> Parts.Get model c , Parts.Index comparable -> Parts.Set model c )"
      },
      {
        "name": "pack",
        "comment": " Pack up a an indexed component message `msg` in an `obs`.\n",
        "type": "((a -> c) -> a -> b -> ( Maybe.Maybe b, Platform.Cmd.Cmd obs )) -> Parts.Get (Parts.Indexed comparable b) c1 -> Parts.Set (Parts.Indexed comparable b) c1 -> b -> (Parts.Msg c1 obs -> c) -> Parts.Index comparable -> a -> c"
      },
      {
        "name": "pack1",
        "comment": " Pack up a singleton component message `msg` in an `obs`.\n",
        "type": "((b -> c) -> b -> d -> ( Maybe.Maybe a, Platform.Cmd.Cmd obs )) -> (c1 -> d) -> (a -> c1 -> c1) -> (Parts.Msg c1 obs -> c) -> b -> c"
      },
      {
        "name": "partial",
        "comment": " Partially apply an `Update` function to a `msg`, producing\na generic Msg.\n",
        "type": "(Parts.Msg b obs -> c) -> ((a -> c) -> a -> b -> ( Maybe.Maybe b, Platform.Cmd.Cmd obs )) -> a -> Parts.Msg b obs"
      },
      {
        "name": "update",
        "comment": " Generic update function for `Msg`. \n",
        "type": "Parts.Msg c obs -> c -> ( c, Platform.Cmd.Cmd obs )"
      },
      {
        "name": "update_",
        "comment": " Generic update function for `Msg`, explicit no-op \n",
        "type": "Parts.Msg c obs -> c -> ( Maybe.Maybe c, Platform.Cmd.Cmd obs )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]