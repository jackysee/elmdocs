[
  {
    "name": "StyledHtml.Attributes",
    "comment": " This module works just like `Html.Attributes`.\nThe only differences are in the `style`, `class` and `classList` functions.\n\n\nPlease note that any reference to the `Attribute` type inside this module, refers to `StyledHtml.Attribute` NOT to `Html.Attribute`.\n\n\n# Stuff that is different\n@docs style, class, classList\n\n# Primitives\n@docs property, attribute, map\n# Super Common Attributes\n@docs id, title, hidden\n# Inputs\n@docs type_, value, defaultValue, checked, placeholder, selected\n## Input Helpers\n@docs accept, acceptCharset, action, autocomplete, autofocus,\n    disabled, enctype, formaction, list, maxlength, minlength, method, multiple,\n    name, novalidate, pattern, readonly, required, size, for, form\n## Input Ranges\n@docs max, min, step\n## Input Text Areas\n@docs cols, rows, wrap\n# Links and Areas\n@docs href, target, download, downloadAs, hreflang, media, ping, rel\n## Maps\n@docs ismap, usemap, shape, coords\n# Embedded Content\n@docs src, height, width, alt\n## Audio and Video\n@docs autoplay, controls, loop, preload, poster, default, kind, srclang\n## iframes\n@docs sandbox, seamless, srcdoc\n# Ordered Lists\n@docs reversed, start\n# Tables\n@docs align, colspan, rowspan, headers, scope\n# Header Stuff\n@docs async, charset, content, defer, httpEquiv, language, scoped\n# Less Common Global Attributes\nAttributes that can be attached to any HTML tag but are less commonly used.\n@docs accesskey, contenteditable, contextmenu, dir, draggable, dropzone,\n      itemprop, lang, spellcheck, tabindex\n# Key Generation\n@docs challenge, keytype\n# Miscellaneous\n@docs cite, datetime, pubdate, manifest\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "accept",
        "comment": " List of types the server accepts, typically a file type.\nFor `form` and `input`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "acceptCharset",
        "comment": " List of supported charsets in a `form`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "accesskey",
        "comment": " Defines a keyboard shortcut to activate or add focus to the element.\n",
        "type": "Char -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "action",
        "comment": " The URI of a program that processes the information submitted via a `form`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "align",
        "comment": " Specifies the horizontal alignment of a `caption`, `col`, `colgroup`,\n`hr`, `iframe`, `img`, `table`, `tbody`,  `td`,  `tfoot`, `th`, `thead`, or\n`tr`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "alt",
        "comment": " Alternative text in case an image can't be displayed. Works with `img`,\n`area`, and `input`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "async",
        "comment": " Indicates that the `script` should be executed asynchronously.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "attribute",
        "comment": " Create *attributes*, like saying `domNode.setAttribute('class', 'greeting')`\nin JavaScript.\n    class : String -> Attribute msg\n    class name =\n      attribute \"class\" name\nRead more about the difference between properties and attributes [here][].\n[here]: https://github.com/elm-lang/html/blob/master/properties-vs-attributes.md\n",
        "type": "String -> String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "autocomplete",
        "comment": " Indicates whether a `form` or an `input` can have their values automatically\ncompleted by the browser.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "autofocus",
        "comment": " The element should be automatically focused after the page loaded.\nFor `button`, `input`, `keygen`, `select`, and `textarea`.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "autoplay",
        "comment": " The `audio` or `video` should play as soon as possible.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "challenge",
        "comment": " A challenge string that is submitted along with the public key in a `keygen`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "charset",
        "comment": " Declares the character encoding of the page or script. Common values include:\n  * UTF-8 - Character encoding for Unicode\n  * ISO-8859-1 - Character encoding for the Latin alphabet\nFor `meta` and `script`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "checked",
        "comment": " Indicates whether an `input` of type checkbox is checked.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "cite",
        "comment": " Contains a URI which points to the source of the quote or change in a\n`blockquote`, `del`, `ins`, or `q`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "class",
        "comment": " This function accepts only classes created with `StyledHtml.Css.makeClass`.\n\nIf you want to use a string as class name, use `stringProperty \"className\" yourString` instead.\n",
        "type": "StyledHtml.Private.Class -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "classList",
        "comment": " This function accepts only classes created with `StyledHtml.Css.makeClass`.\n",
        "type": "List ( StyledHtml.Private.Class, Bool ) -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "cols",
        "comment": " Defines the number of columns in a `textarea`.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "colspan",
        "comment": " The colspan attribute defines the number of columns a cell should span.\nFor `td` and `th`.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "content",
        "comment": " A value associated with http-equiv or name depending on the context. For\n`meta`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "contenteditable",
        "comment": " Indicates whether the element's content is editable.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "contextmenu",
        "comment": " Defines the ID of a `menu` element which will serve as the element's\ncontext menu.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "controls",
        "comment": " Indicates whether the browser should show playback controls for the `audio`\nor `video`.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "coords",
        "comment": " A set of values specifying the coordinates of the hot-spot region in an\n`area`. Needs to be paired with a `shape` attribute to be meaningful.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "datetime",
        "comment": " Indicates the date and time associated with the element.\nFor `del`, `ins`, `time`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "default",
        "comment": " Indicates that the `track` should be enabled unless the user's preferences\nindicate something different.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "defaultValue",
        "comment": " Defines an initial value which will be displayed in an `input` when that\n`input` is added to the DOM. Unlike `value`, altering `defaultValue` after the\n`input` element has been added to the DOM has no effect.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "defer",
        "comment": " Indicates that a `script` should be executed after the page has been\nparsed.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "dir",
        "comment": " Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl\n(Right-To-Left).\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "disabled",
        "comment": " Indicates whether the user can interact with a `button`, `fieldset`,\n`input`, `keygen`, `optgroup`, `option`, `select` or `textarea`.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "download",
        "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "downloadAs",
        "comment": " Indicates that clicking an `a` and `area` will download the resource\ndirectly, and that the downloaded resource with have the given filename.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "draggable",
        "comment": " Defines whether the element can be dragged.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "dropzone",
        "comment": " Indicates that the element accept the dropping of content on it.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "enctype",
        "comment": " How `form` data should be encoded when submitted with the POST method.\nOptions include: application/x-www-form-urlencoded, multipart/form-data, and\ntext/plain.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "for",
        "comment": " The element ID described by this `label` or the element IDs that are used\nfor an `output`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "form",
        "comment": " Indicates the element ID of the `form` that owns this particular `button`,\n`fieldset`, `input`, `keygen`, `label`, `meter`, `object`, `output`,\n`progress`, `select`, or `textarea`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "formaction",
        "comment": " Indicates the action of an `input` or `button`. This overrides the action\ndefined in the surrounding `form`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "headers",
        "comment": " A space separated list of element IDs indicating which `th` elements are\nheaders for this cell. For `td` and `th`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "height",
        "comment": " Declare the height of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "hidden",
        "comment": " Indicates the relevance of an element.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "href",
        "comment": " The URL of a linked resource, such as `a`, `area`, `base`, or `link`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "hreflang",
        "comment": " Two-letter language code of the linked resource of an `a`, `area`, or `link`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "httpEquiv",
        "comment": " This attribute is an indicator that is paired with the `content` attribute,\nindicating what that content means. `httpEquiv` can take on three different\nvalues: content-type, default-style, or refresh. For `meta`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "id",
        "comment": " Often used with CSS to style a specific element. The value of this\nattribute must be unique.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "ismap",
        "comment": " When an `img` is a descendent of an `a` tag, the `ismap` attribute\nindicates that the click location should be added to the parent `a`'s href as\na query string.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "itemprop",
        "comment": " ",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "keytype",
        "comment": " Specifies the type of key generated by a `keygen`. Possible values are:\nrsa, dsa, and ec.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "kind",
        "comment": " Specifies the kind of text `track`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "lang",
        "comment": " Defines the language used in the element.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "language",
        "comment": " Defines the script language used in a `script`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "list",
        "comment": " Associates an `input` with a `datalist` tag. The datalist gives some\npre-defined options to suggest to the user as they interact with an input.\nThe value of the list attribute must match the id of a `datalist` node.\nFor `input`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "loop",
        "comment": " Indicates whether the `audio` or `video` should start playing from the\nstart when it's finished.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "manifest",
        "comment": " Specifies the URL of the cache manifest for an `html` tag.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "map",
        "comment": "\n",
        "type": "(a -> b) -> StyledHtml.Private.Attribute a -> StyledHtml.Private.Attribute b"
      },
      {
        "name": "max",
        "comment": " Indicates the maximum value allowed. When using an input of type number or\ndate, the max value must be a number or date. For `input`, `meter`, and `progress`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "maxlength",
        "comment": " Defines the maximum number of characters allowed in an `input` or\n`textarea`.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "media",
        "comment": " Specifies a hint of the target media of a `a`, `area`, `link`, `source`,\nor `style`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "method",
        "comment": " Defines which HTTP method to use when submitting a `form`. Can be GET\n(default) or POST.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "min",
        "comment": " Indicates the minimum value allowed. When using an input of type number or\ndate, the min value must be a number or date. For `input` and `meter`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "minlength",
        "comment": " Defines the minimum number of characters allowed in an `input` or\n`textarea`.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "multiple",
        "comment": " Indicates whether multiple values can be entered in an `input` of type\nemail or file. Can also indicate that you can `select` many options.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "name",
        "comment": " Name of the element. For example used by the server to identify the fields\nin form submits. For `button`, `form`, `fieldset`, `iframe`, `input`, `keygen`,\n`object`, `output`, `select`, `textarea`, `map`, `meta`, and `param`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "novalidate",
        "comment": " This attribute indicates that a `form` shouldn't be validated when\nsubmitted.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "pattern",
        "comment": " Defines a regular expression which an `input`'s value will be validated\nagainst.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "ping",
        "comment": " Specify a URL to send a short POST request to when the user clicks on an\n`a` or `area`. Useful for monitoring and tracking.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "placeholder",
        "comment": " Provides a hint to the user of what can be entered into an `input` or\n`textarea`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "poster",
        "comment": " A URL indicating a poster frame to show until the user plays or seeks the\n`video`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "preload",
        "comment": " Control how much of an `audio` or `video` resource should be preloaded.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "property",
        "comment": " Create *properties*, like saying `domNode.className = 'greeting'` in\nJavaScript.\n    import Json.Encode as Encode\n    class : String -> Attribute msg\n    class name =\n      property \"className\" (Encode.string name)\nRead more about the difference between properties and attributes [here][].\n[here]: https://github.com/elm-lang/html/blob/master/properties-vs-attributes.md\n",
        "type": "String -> Json.Encode.Value -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "pubdate",
        "comment": " Indicates whether this date and time is the date of the nearest `article`\nancestor element. For `time`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "readonly",
        "comment": " Indicates whether an `input` or `textarea` can be edited.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "rel",
        "comment": " Specifies the relationship of the target object to the link object.\nFor `a`, `area`, `link`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "required",
        "comment": " Indicates whether this element is required to fill out or not.\nFor `input`, `select`, and `textarea`.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "reversed",
        "comment": " Indicates whether an ordered list `ol` should be displayed in a descending\norder instead of a ascending.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "rows",
        "comment": " Defines the number of rows in a `textarea`.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "rowspan",
        "comment": " Defines the number of rows a table cell should span over.\nFor `td` and `th`.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "sandbox",
        "comment": " A space separated list of security restrictions you'd like to lift for an\n`iframe`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "scope",
        "comment": " Specifies the scope of a header cell `th`. Possible values are: col, row,\ncolgroup, rowgroup.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "scoped",
        "comment": " Indicates that a `style` should only apply to its parent and all of the\nparents children.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "seamless",
        "comment": " Make an `iframe` look like part of the containing document.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "selected",
        "comment": " Defines which `option` will be selected on page load.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "shape",
        "comment": " Declare the shape of the clickable area in an `a` or `area`. Valid values\ninclude: default, rect, circle, poly. This attribute can be paired with\n`coords` to create more particular shapes.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "size",
        "comment": " For `input` specifies the width of an input in characters.\nFor `select` specifies the number of visible options in a drop-down list.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "spellcheck",
        "comment": " Indicates whether spell checking is allowed for the element.\n",
        "type": "Bool -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "src",
        "comment": " The URL of the embeddable content. For `audio`, `embed`, `iframe`, `img`,\n`input`, `script`, `source`, `track`, and `video`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "srcdoc",
        "comment": " An HTML document that will be displayed as the body of an `iframe`. It will\noverride the content of the `src` attribute if it has been specified.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "srclang",
        "comment": " A two letter language code indicating the language of the `track` text data.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "start",
        "comment": " Defines the first number of an ordered list if you want it to be something\nbesides 1.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "step",
        "comment": " Add a step size to an `input`. Use `step \"any\"` to allow any floating-point\nnumber to be used in the input.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "style",
        "comment": " This is used to declare style inline with an element.\nUnder the hood, it will create an anonymous hashed class.\n\nThe first argument is the list of attributes.\n\nThe second argument is a list nested rules.\n\n\n    div\n      [ StyledHtml.Attributes.style\n        [ \"background-color: green\"\n        , \"text-transform: uppercase\"\n        ]\n        [ StyledHtml.Css.selector \":hover\"\n          [ \"background-color: blue\" ]\n          []\n        ]\n      ]\n",
        "type": "List StyledHtml.Private.StyleSnippet -> List (List StyledHtml.Private.Rule) -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "tabindex",
        "comment": " Overrides the browser's default tab order and follows the one specified\ninstead.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "target",
        "comment": " Specify where the results of clicking an `a`, `area`, `base`, or `form`\nshould appear. Possible special values include:\n  * _blank &mdash; a new window or tab\n  * _self &mdash; the same frame (this is default)\n  * _parent &mdash; the parent frame\n  * _top &mdash; the full body of the window\nYou can also give the name of any `frame` you have created.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "title",
        "comment": " Text to be displayed in a tooltip when hovering over the element.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "type_",
        "comment": " Defines the type of a `button`, `input`, `embed`, `object`, `script`,\n`source`, `style`, or `menu`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "usemap",
        "comment": " Specify the hash name reference of a `map` that should be used for an `img`\nor `object`. A hash name reference is a hash symbol followed by the element's name or id.\nE.g. `\"#planet-map\"`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "value",
        "comment": " Defines a default value which will be displayed in a `button`, `option`,\n`input`, `li`, `meter`, `progress`, or `param`.\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "width",
        "comment": " Declare the width of a `canvas`, `embed`, `iframe`, `img`, `input`,\n`object`, or `video`.\n",
        "type": "Int -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "wrap",
        "comment": " Indicates whether the text should be wrapped in a `textarea`. Possible\nvalues are \"hard\" and \"soft\".\n",
        "type": "String -> StyledHtml.Private.Attribute msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "StyledHtml",
    "comment": "\n\nThis module contains everything you find in [elm-lang/html.Html](http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html),\nincluding [Program](http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Platform#Program)\nconstructors and a handful other functions specific to Styled Html.\n\nPlease note that any reference to the `Html` type inside this module, refers to `StyledHtml.Html` NOT to `Html.Html`.\n\n# Styled Html specific stuff\n@docs renderStyleAndHtml, fromHtml, toHtml\n\n# Primitives\n@docs Html, Attribute, text, node, map\n# Programs\n@docs beginnerProgram, program, programWithFlags\n# Tags\n## Headers\n@docs h1, h2, h3, h4, h5, h6\n## Grouping Content\n@docs div, p, hr, pre, blockquote\n## Text\n@docs span, a, code, em, strong, i, b, u, sub, sup, br\n## Lists\n@docs ol, ul, li, dl, dt, dd\n## Emdedded Content\n@docs img, iframe, canvas, math\n## Inputs\n@docs form, input, textarea, button, select, option\n## Sections\n@docs section, nav, article, aside, header, footer, address, main_, body\n## Figures\n@docs figure, figcaption\n## Tables\n@docs table, caption, colgroup, col, tbody, thead, tfoot, tr, td, th\n## Less Common Elements\n### Less Common Inputs\n@docs fieldset, legend, label, datalist, optgroup, keygen, output, progress, meter\n### Audio and Video\n@docs audio, video, source, track\n### Embedded Objects\n@docs embed, object, param\n### Text Edits\n@docs ins, del\n### Semantic Text\n@docs small, cite, dfn, abbr, time, var, samp, kbd, s, q\n### Less Common Text Tags\n@docs mark, ruby, rt, rp, bdi, bdo, wbr\n## Interactive Elements\n@docs details, summary, menuitem, menu\n\n",
    "aliases": [
      {
        "name": "Attribute",
        "comment": " A Styled Html element attribute.\nYou use it exactly as a normal html element attribute.\n",
        "args": [
          "msg"
        ],
        "type": "StyledHtml.Private.Attribute msg"
      },
      {
        "name": "Html",
        "comment": " A Styled Html element.\nYou use it exactly as a normal html element.\n\n    styledHtmlHello : Html msg\n    styledHtmlHello =\n      div [] [ text \"Hello!\" ]\n",
        "args": [
          "msg"
        ],
        "type": "StyledHtml.Private.Html msg"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "a",
        "comment": " Represents a hyperlink, linking to another resource.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "abbr",
        "comment": " Represents an abbreviation or an acronym; the expansion of the\nabbreviation can be represented in the title attribute.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "address",
        "comment": " Defines a section containing contact information.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "article",
        "comment": " Defines self-contained content that could exist independently of the rest\nof the content.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "aside",
        "comment": " Defines some content loosely related to the page content. If it is removed,\nthe remaining content still makes sense.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "audio",
        "comment": " Represents a sound or audio stream.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "b",
        "comment": " Represents a text which to which attention is drawn for utilitarian\npurposes. It doesn't convey extra importance and doesn't imply an alternate\nvoice.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "bdi",
        "comment": " Represents text that must be isolated from its surrounding for\nbidirectional text formatting. It allows embedding a span of text with a\ndifferent, or unknown, directionality.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "bdo",
        "comment": " Represents the directionality of its children, in order to explicitly\noverride the Unicode bidirectional algorithm.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "beginnerProgram",
        "comment": "\n",
        "type": "{ model : model , view : model -> StyledHtml.Html msg , update : msg -> model -> model } -> Platform.Program Basics.Never model msg"
      },
      {
        "name": "blockquote",
        "comment": " Represents a content that is quoted from another source.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "body",
        "comment": " Represents the content of an HTML document. There is only one `body`\nelement in a document.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "br",
        "comment": " Represents a line break.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "button",
        "comment": " Represents a button.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "canvas",
        "comment": " Represents a bitmap area for graphics rendering.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "caption",
        "comment": " Represents the title of a table.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "cite",
        "comment": " Represents the title of a work.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "code",
        "comment": " Represents computer code.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "col",
        "comment": " Represents a column of a table.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "colgroup",
        "comment": " Represents a set of one or more columns of a table.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "datalist",
        "comment": " Represents a set of predefined options for other controls.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "dd",
        "comment": " Represents the definition of the terms immediately listed before it.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "del",
        "comment": " Defines a removal from the document.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "details",
        "comment": " Represents a widget from which the user can obtain additional information\nor controls.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "dfn",
        "comment": " Represents a term whose definition is contained in its nearest ancestor\ncontent.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "div",
        "comment": " Represents a generic container with no special meaning.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "dl",
        "comment": " Defines a definition list, that is, a list of terms and their associated\ndefinitions.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "dt",
        "comment": " Represents a term defined by the next `dd`.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "em",
        "comment": " Represents emphasized text, like a stress accent.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "embed",
        "comment": " Represents a integration point for an external, often non-HTML,\napplication or interactive content.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "fieldset",
        "comment": " Represents a set of controls.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "figcaption",
        "comment": " Represents the legend of a figure.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "figure",
        "comment": " Represents a figure illustrated as part of the document.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "footer",
        "comment": " Defines the footer for a page or section. It often contains a copyright\nnotice, some links to legal information, or addresses to give feedback.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "form",
        "comment": " Represents a form, consisting of controls, that can be submitted to a\nserver for processing.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "fromHtml",
        "comment": " Important: the function signature is actually:\n\n    fromHtml : Html.Html msg -> StyledHtml.Html msg\n\nThe two types of `Html` are different, but the generated Elm docs will confuse the two types.\n\nThe function converts your normal Html or Svg to Styled Html.\n\n    styledHtml =\n      StyledHtml.fromHtml <|\n        Html.div\n          []\n          [ Html.text \"I am normal Html\" ]\n",
        "type": "Html.Html msg -> StyledHtml.Html msg"
      },
      {
        "name": "h1",
        "comment": " ",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "h2",
        "comment": " ",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "h3",
        "comment": " ",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "h4",
        "comment": " ",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "h5",
        "comment": " ",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "h6",
        "comment": " ",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "header",
        "comment": " Defines the header of a page or section. It often contains a logo, the\ntitle of the web site, and a navigational table of content.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "hr",
        "comment": " Represents a thematic break between paragraphs of a section or article or\nany longer content.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "i",
        "comment": " Represents some text in an alternate voice or mood, or at least of\ndifferent quality, such as a taxonomic designation, a technical term, an\nidiomatic phrase, a thought, or a ship name.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "iframe",
        "comment": " Embedded an HTML document.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "img",
        "comment": " Represents an image.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "input",
        "comment": " Represents a typed data field allowing the user to edit the data.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "ins",
        "comment": " Defines an addition to the document.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "kbd",
        "comment": " Represents user input, often from the keyboard, but not necessarily; it\nmay represent other input, like transcribed voice commands.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "keygen",
        "comment": " Represents a key-pair generator control.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "label",
        "comment": " Represents the caption of a form control.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "legend",
        "comment": " Represents the caption for a `fieldset`.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "li",
        "comment": " Defines a item of an enumeration list.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "main_",
        "comment": " Defines the main or important content in the document. There is only one\n`main` element in the document.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "map",
        "comment": "\n",
        "type": "(a -> b) -> StyledHtml.Html a -> StyledHtml.Html b"
      },
      {
        "name": "mark",
        "comment": " Represents text highlighted for reference purposes, that is for its\nrelevance in another context.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "math",
        "comment": " Defines a mathematical formula.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "menu",
        "comment": " Represents a list of commands.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "menuitem",
        "comment": " Represents a command that the user can invoke.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "meter",
        "comment": " Represents a scalar measurement (or a fractional value), within a known\nrange.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "nav",
        "comment": " Defines a section that contains only navigation links.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "node",
        "comment": "\n",
        "type": "String -> List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "object",
        "comment": " Represents an external resource, which is treated as an image, an HTML\nsub-document, or an external resource to be processed by a plug-in.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "ol",
        "comment": " Defines an ordered list of items.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "optgroup",
        "comment": " Represents a set of options, logically grouped.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "option",
        "comment": " Represents an option in a `select` element or a suggestion of a `datalist`\nelement.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "output",
        "comment": " Represents the result of a calculation.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "p",
        "comment": " Defines a portion that should be displayed as a paragraph.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "param",
        "comment": " Defines parameters for use by plug-ins invoked by `object` elements.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "pre",
        "comment": " Indicates that its content is preformatted and that this format must be\npreserved.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "program",
        "comment": "\n",
        "type": "{ init : ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> StyledHtml.Html msg } -> Platform.Program Basics.Never model msg"
      },
      {
        "name": "programWithFlags",
        "comment": "\n",
        "type": "{ init : flags -> ( model, Platform.Cmd.Cmd msg ) , update : msg -> model -> ( model, Platform.Cmd.Cmd msg ) , subscriptions : model -> Platform.Sub.Sub msg , view : model -> StyledHtml.Html msg } -> Platform.Program flags model msg"
      },
      {
        "name": "progress",
        "comment": " Represents the completion progress of a task.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "q",
        "comment": " Represents an inline quotation.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "renderStyleAndHtml",
        "comment": " Important: the function signature is actually:\n\n    renderStyleAndHtml : StyledHtml.Html msg -> ( String, Html.Html msg )\n\nThe two types of `Html` are different, but the generated Elm docs will confuse the two types.\n\nThis function is the main algorithm of the library: it transforms styled html\ninto CSS stylesheet and `Html.Html` tree.\n\n    ( stylesheet, html ) =\n      StyledHtml.renderStyleAndHtml <|\n        StyledHtml.div\n          [ StyledHtml.Attributes.class someStyleClass ]\n          [ StyledHtml.text \"Some content\" ]\n",
        "type": "StyledHtml.Html msg -> ( String, Html.Html msg )"
      },
      {
        "name": "rp",
        "comment": " Represents parenthesis around a ruby annotation, used to display the\nannotation in an alternate way by browsers not supporting the standard display\nfor annotations.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "rt",
        "comment": " Represents the text of a ruby annotation.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "ruby",
        "comment": " Represents content to be marked with ruby annotations, short runs of text\npresented alongside the text. This is often used in conjunction with East Asian\nlanguage where the annotations act as a guide for pronunciation, like the\nJapanese furigana.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "s",
        "comment": " Represents content that is no longer accurate or relevant.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "samp",
        "comment": " Represents the output of a program or a computer.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "section",
        "comment": " Defines a section in a document.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "select",
        "comment": " Represents a control allowing selection among a set of options.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "small",
        "comment": " Represents a side comment, that is, text like a disclaimer or a\ncopyright, which is not essential to the comprehension of the document.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "source",
        "comment": " Allows authors to specify alternative media resources for media elements\nlike `video` or `audio`.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "span",
        "comment": " Represents text with no specific meaning. This has to be used when no other\ntext-semantic element conveys an adequate meaning, which, in this case, is\noften brought by global attributes like `class`, `lang`, or `dir`.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "strong",
        "comment": " Represents especially important text.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "sub",
        "comment": " Represent a subscript.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "summary",
        "comment": " Represents a summary, caption, or legend for a given `details`.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "sup",
        "comment": " Represent a superscript.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "table",
        "comment": " Represents data with more than one dimension.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "tbody",
        "comment": " Represents the block of rows that describes the concrete data of a table.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "td",
        "comment": " Represents a data cell in a table.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "text",
        "comment": "\n",
        "type": "String -> StyledHtml.Html msg"
      },
      {
        "name": "textarea",
        "comment": " Represents a multiline text edit control.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "tfoot",
        "comment": " Represents the block of rows that describes the column summaries of a table.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "th",
        "comment": " Represents a header cell in a table.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "thead",
        "comment": " Represents the block of rows that describes the column labels of a table.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "time",
        "comment": " Represents a date and time value; the machine-readable equivalent can be\nrepresented in the datetime attribute.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "toHtml",
        "comment": " Important: the function signature is actually:\n\n    toHtml : StyledHtml.Html msg -> Html.Html msg\n\nThe two types of `Html` are different, but the generated Elm docs will confuse the two types.\n\nThe function is a quick way to turn Styled Html into normal Html.\n\n    normalHtml : Html.Html\n    normalHtml =\n      StyledHtml.toHtml someStyledHtml\n\nThe input html is wrapped inside a `div` together with a `style` tag:\n```\n<div>\n  <style>\n  ...generated CSS stylesheet goes here...\n  </style>\n  ..transformed someStyledHtml..\n</div>\n```\n",
        "type": "StyledHtml.Html msg -> Html.Html msg"
      },
      {
        "name": "tr",
        "comment": " Represents a row of cells in a table.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "track",
        "comment": " Allows authors to specify timed text track for media elements like `video`\nor `audio`.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "u",
        "comment": " Represents a non-textual annoatation for which the conventional\npresentation is underlining, such labeling the text as being misspelt or\nlabeling a proper name in Chinese text.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "ul",
        "comment": " Defines an unordered list of items.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "var",
        "comment": " Represents a variable. Specific cases where it should be used include an\nactual mathematical expression or programming context, an identifier\nrepresenting a constant, a symbol identifying a physical quantity, a function\nparameter, or a mere placeholder in prose.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "video",
        "comment": " Represents a video, the associated audio and captions, and controls.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      },
      {
        "name": "wbr",
        "comment": " Represents a line break opportunity, that is a suggested point for\nwrapping text in order to improve readability of text split on several lines.\n",
        "type": "List (StyledHtml.Attribute msg) -> List (StyledHtml.Html msg) -> StyledHtml.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "StyledHtml.Css",
    "comment": " This modules allows you to define and combine styles for Styled Html.\n\n\n# Defining named classes\n@docs Class, makeClass\n\n# Combining selectors\n@docs selector, andClass\n",
    "aliases": [
      {
        "name": "Class",
        "comment": " This describes a Styled Html class.\n",
        "args": [],
        "type": "StyledHtml.Private.Class"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "andClass",
        "comment": " This is used to select a Styled Html Class.\n\n    buttonClass =\n        StyledHtml.Css.makeClass \"button\" [] []\n\n    inputClass =\n        StyledHtml.Css.makeClass \"input\"\n          [ \"border: 1px solid #b1b1b1\" ]\n          [ StyledHtml.Css.andClass buttonClass\n            [ \"border: 2px solid #b1b1b1\"\n            , \"cursor: pointer\"\n            ]\n            []\n          ]\n\nwill produce the rules:\n\n    .button_932D {\n    }\n\n    .input_21F1 {\n      border: 1px solid #b1b1b1;\n    }\n\n    .input_21F1.button_932D {\n      border: 2px solid #b1b1b1;\n      cursor: pointer;\n    }\n",
        "type": "StyledHtml.Css.Class -> List StyledHtml.Private.StyleSnippet -> List (List StyledHtml.Private.Rule) -> List StyledHtml.Private.Rule"
      },
      {
        "name": "makeClass",
        "comment": " Defines a new styled html `Class`.\n\nThe first argument is the name to use as a base for the class name.\nUnder the hood, this base name will be extended with a hash string of the class rules.\n\nThe second argument is a list of style attributes to apply directly to the class, and\nthe third argument can be used to make composite selections.\n\n    modalContainerClass =\n      StyledHtml.Css.makeClass \"modal-container\"\n        [ \"display: flex\"\n        , \"justify-content: center\"\n        ]\n        [ StyledHtml.Css.selector \" .close-icon\"\n            [ \"width: 12px\" ]\n            []\n        ]\n\nwill produce the rules:\n\n    .modal-container_D783 {\n        display: flex;\n        justify-content: center;\n    }\n\n    .modal-container_D783 .close-icon {\n        width: 12px;\n    }\n",
        "type": "String -> List StyledHtml.Private.StyleSnippet -> List (List StyledHtml.Private.Rule) -> StyledHtml.Css.Class"
      },
      {
        "name": "selector",
        "comment": " Creates a new CSS rule (extending the parent rule) with the given CSS selector.\n\n    buttonClass =\n      StyledHtml.Css.makeClass \"button\"\n        [ \"border: 2px solid grey\" ]\n        [ StyledHtml.Css.selector \":hover\"\n          [ \"background-color: grey\"\n          , \"border: 2px solid black\"\n          ]\n          [ StyledHtml.Css.selector \" svg.icon\"\n            [ \"fill: red\" ]\n            []\n          ]\n        ]\n\nwill result in these rules:\n\n    .button_37A2B {\n      border: 2px solid black;\n    }\n\n    .button_37A2B:hover {\n      background-color: grey;\n      border: 2px solid black;\n    }\n\n    .button_37A2B:hover svg.icon {\n      fill: red;\n    }\n",
        "type": "String -> List StyledHtml.Private.StyleSnippet -> List (List StyledHtml.Private.Rule) -> List StyledHtml.Private.Rule"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "StyledHtml.Events",
    "comment": " This module is pretty much the same as [Html.Events](http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html-Events)\n\n# Mouse Helpers\n@docs onClick, onDoubleClick,\n      onMouseDown, onMouseUp,\n      onMouseEnter, onMouseLeave,\n      onMouseOver, onMouseOut\n# Form Helpers\n@docs onInput, onCheck, onSubmit\n# Focus Helpers\n@docs onBlur, onFocus\n# Custom Event Handlers\n@docs on, onWithOptions, Options, defaultOptions\n# Custom Decoders\n@docs targetValue, targetChecked, keyCode\n",
    "aliases": [
      {
        "name": "Options",
        "comment": " Options for an event listener. If `stopPropagation` is true, it means the\nevent stops traveling through the DOM so it will not trigger any other event\nlisteners. If `preventDefault` is true, any built-in browser behavior related\nto the event is prevented. For example, this is used with touch events when you\nwant to treat them as gestures of your own, not as scrolls.\n",
        "args": [],
        "type": "{ stopPropagation : Bool, preventDefault : Bool }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "defaultOptions",
        "comment": " Everything is `False` by default.\n    defaultOptions =\n        { stopPropagation = False\n        , preventDefault = False\n        }\n",
        "type": "StyledHtml.Events.Options"
      },
      {
        "name": "keyCode",
        "comment": " A `Json.Decoder` for grabbing `event.keyCode`. This helps you define\nkeyboard listeners like this:\n    import Json.Decode as Json\n    onKeyUp : (Int -> msg) -> Attribute msg\n    onKeyUp tagger =\n      on \"keyup\" (Json.map tagger keyCode)\n**Note:** It looks like the spec is moving away from `event.keyCode` and\ntowards `event.key`. Once this is supported in more browsers, we may add\nhelpers here for `onKeyUp`, `onKeyDown`, `onKeyPress`, etc.\n",
        "type": "Json.Decode.Decoder Int"
      },
      {
        "name": "on",
        "comment": " Create a custom event listener. Normally this will not be necessary, but\nyou have the power! Here is how `onClick` is defined for example:\n    import Json.Decode as Json\n    onClick : msg -> Attribute msg\n    onClick message =\n      on \"click\" (Json.succeed message)\nThe first argument is the event name in the same format as with JavaScript's\n[`addEventListener`][aEL] function.\nThe second argument is a JSON decoder. Read more about these [here][decoder].\nWhen an event occurs, the decoder tries to turn the event object into an Elm\nvalue. If successful, the value is routed to your `update` function. In the\ncase of `onClick` we always just succeed with the given `message`.\nIf this is confusing, work through the [Elm Architecture Tutorial][tutorial].\nIt really does help!\n[aEL]: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n[decoder]: http://package.elm-lang.org/packages/elm-lang/core/latest/Json-Decode\n[tutorial]: https://github.com/evancz/elm-architecture-tutorial/\n",
        "type": "String -> Json.Decode.Decoder msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onBlur",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onCheck",
        "comment": " Capture [change](https://developer.mozilla.org/en-US/docs/Web/Events/change)\nevents on checkboxes. It will grab the boolean value from `event.target.checked`\non any input event.\nCheck out [targetChecked](#targetChecked) for more details on how this works.\n",
        "type": "(Bool -> msg) -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onClick",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onDoubleClick",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onFocus",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onInput",
        "comment": " Capture [input](https://developer.mozilla.org/en-US/docs/Web/Events/input)\nevents for things like text fields or text areas.\nIt grabs the **string** value at `event.target.value`, so it will not work if\nyou need some other type of information. For example, if you want to track\ninputs on a range slider, make a custom handler with [`on`](#on).\nFor more details on how `onInput` works, check out [targetValue](#targetValue).\n",
        "type": "(String -> msg) -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onMouseDown",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onMouseEnter",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onMouseLeave",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onMouseOut",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onMouseOver",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onMouseUp",
        "comment": " ",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onSubmit",
        "comment": " Capture a [submit](https://developer.mozilla.org/en-US/docs/Web/Events/submit)\nevent with [`preventDefault`](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\nin order to prevent the form from changing the page’s location. If you need\ndifferent behavior, use `onWithOptions` to create a customized version of\n`onSubmit`.\n",
        "type": "msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "onWithOptions",
        "comment": " Same as `on` but you can set a few options.\n",
        "type": "String -> StyledHtml.Events.Options -> Json.Decode.Decoder msg -> StyledHtml.Private.Attribute msg"
      },
      {
        "name": "targetChecked",
        "comment": " A `Json.Decoder` for grabbing `event.target.checked`. We use this to define\n`onCheck` as follows:\n    import Json.Decode as Json\n    onCheck : (Bool -> msg) -> Attribute msg\n    onCheck tagger =\n      on \"input\" (Json.map tagger targetChecked)\n",
        "type": "Json.Decode.Decoder Bool"
      },
      {
        "name": "targetValue",
        "comment": " A `Json.Decoder` for grabbing `event.target.value`. We use this to define\n`onInput` as follows:\n    import Json.Decode as Json\n    onInput : (String -> msg) -> Attribute msg\n    onInput tagger =\n      on \"input\" (Json.map tagger targetValue)\nYou probably will never need this, but hopefully it gives some insights into\nhow to make custom event handlers.\n",
        "type": "Json.Decode.Decoder String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]