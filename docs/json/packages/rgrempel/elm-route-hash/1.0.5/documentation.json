[
  {
    "name": "RouteHash",
    "comment": " This module provides routing for single-page apps based on changes to the\nhash portion of the browser's location. The routing happens in both directions\n-- that is, changes to the browser's location hash are translated to actions\nyour app performs, and changes to your model are translated to changes in the\nbrowser's location hash. The net effect is to make it possible for the 'back'\nand 'forward' buttons in the browser to do useful things, and for the state of\nyour app to be partially bookmark-able.\n\nTo use this module, you will need to configure it using the [`start`](#start)\nfunction, as described below.\n\nThere is [additional documentation](https://github.com/rgrempel/elm-route-hash)\navailable in the README in the Github repository.\n\n# Configuration\n\n@docs start, Config, defaultPrefix\n\n# Helpers for `HashUpdate`\n\n@docs HashUpdate, set, replace, apply, map, extract\n",
    "aliases": [
      {
        "name": "Config",
        "comment": " Represents the configuration necessary to use this module.\n\n*  `prefix` is the initial characters that should be stripped from the hash (if\n    present) when reacting to location changes, and added to the hash when\n    generating location changes. Normally, you'll likely want to use\n    [`defaultPrefix`](#defaultPrefix), which is \"#!/\".\n\n*   `models` is your signal of models. This is required so that we can react to\n    changes in the model, possibly updating the location.\n\n*   `delta2update` is a function which takes two arguments and possibly\n    returns a [`HashUpdate`](#HashUpdate). The first argument is the previous\n    model.  The second argument is the current model.\n\n    The reason you are provided with both the previous and current models is\n    that sometimes the nature of the location update depends on the difference\n    between the two, not just on the latest model. For instance, if the user is\n    typing in a form, you might want to use [`replace`](#replace) rather than\n    [`set`](#set). Of course, in cases where you only need to consult the\n    current model, you can ignore the first parameter.\n\n    This module will normalize the `List String` in the update in the following\n    way before setting the actual location. It will:\n\n    * uriEncode the strings\n    * join them with \"/\"\n    * add the `prefix` to the beginning\n\n    In a modular application, you may well want to use [`map`](#map) after dispatching\n    to a lower level -- see the example in the [`map` documentation](#map).\n\n    Note that this module will automatically detect cases where you return\n    a [`HashUpdate`](#HashUpdate) which would set the same location that is\n    already set, and do nothing. Thus, you don't need to try to detect that\n    yourself.\n\n    The content of the individual strings is up to you ... essentially it\n    should be something that your `location2action` function can deal with.\n\n*   `location2action` is a function which takes a `List String` and returns\n    a list of actions your app can perform.\n\n    The argument is a normalized version of the hash portion of the location.\n    First, the `prefix` is stripped from the hash, and then the result is\n    converted to a `List String` by using '/' as a delimiter. Then, each\n    `String` value is uriDecoded.\n\n    Essentially, your `location2action` should return actions that are the\n    reverse of what your `delta2update` function produced. That is, the\n    `List String` you get back in `location2action` is the `List String` that\n    your `delta2update` used to create a [`HashUpdate`](#HashUpdate). So,\n    however you encoded your state in `delta2update`, you now need to interpret\n    that in `location2action` in order to return actions which will produce the\n    desired state.\n\n    Note that the list of actions you return will often be a single action. It\n    is a `List action` so that you can return multiple actions, if your app is\n    modular in a way that requires multiple actions to produce the desired\n    state.\n\n*   `address` is a `Signal.Address` to which the actions returned by\n    `location2action` can be sent.\n",
        "args": [
          "model",
          "action"
        ],
        "type": "{ prefix : String , models : Signal.Signal model , delta2update : model -> model -> Maybe.Maybe RouteHash.HashUpdate , location2action : List String -> List action , address : Signal.Address action }"
      }
    ],
    "types": [
      {
        "name": "HashUpdate",
        "comment": " An opaque type which represents an update to the hash portion of the\nbrowser's location.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "apply",
        "comment": " Applies the supplied function to the [`HashUpdate`](#HashUpdate). ",
        "type": "(List String -> List String) -> RouteHash.HashUpdate -> RouteHash.HashUpdate"
      },
      {
        "name": "defaultPrefix",
        "comment": " The value that you will most often want to supply as the\n`prefix` in your [`Config`](#Config). It is equal to \"#!/\".\n",
        "type": "String"
      },
      {
        "name": "extract",
        "comment": " Extracts the `List String` from the [`HashUpdate`](#HashUpdate). ",
        "type": "RouteHash.HashUpdate -> List String"
      },
      {
        "name": "map",
        "comment": " Applies the supplied function to the [`HashUpdate`](#HashUpdate).\n\nYou might use this function when dispatching in a modular application.\nFor instance, your [`delta2update`](#Config) function might look something like this:\n\n    delta2update : Model -> Model -> Maybe HashUpdate\n    delta2update old new =\n        case new.virtualPage of\n            PageTag1 ->\n                RouteHash.map ((::) \"page-tag-1\") PageModule1.delta2update old new\n\n            PageTag2 ->\n                RouteHash.map ((::) \"page-tag-2\") PageModule2.delta2update old new\n\nOf course, your model and modules may be set up differently. However you do it,\nthe `map` function allows you to dispatch `delta2update` to a lower-level module,\nand then modify the `Maybe HashUpdate` which it returns.\n",
        "type": "(List String -> List String) -> Maybe.Maybe RouteHash.HashUpdate -> Maybe.Maybe RouteHash.HashUpdate"
      },
      {
        "name": "replace",
        "comment": " Returns a HashUpdate that will update the browser's location, replacing\nthe current history entry.\n\nThe `List String` represents the hash portion of the location. Each element of\nthe list will be uriEncoded, and then the list will be joined using slashes\n(\"/\"). Finally, a prefix will be applied (by [default](#defaultPrefix), \"#!/\",\nbut it is configurable).\n",
        "type": "List String -> RouteHash.HashUpdate"
      },
      {
        "name": "set",
        "comment": " Returns a [`HashUpdate`](#HashUpdate) that will update the browser's\nlocation, creating a new history entry.\n\nThe `List String` represents the hash portion of the location. Each element of\nthe list will be uriEncoded, and then the list will be joined using slashes\n(\"/\"). Finally, a prefix will be applied (by [default](#defaultPrefix), \"#!/\",\nbut it is configurable).\n",
        "type": "List String -> RouteHash.HashUpdate"
      },
      {
        "name": "start",
        "comment": " Call this function once with your [configuration](#Config).\n\nThe signal of tasks returned by this function needs to be sent to a port\nto be executed. So, you might call it in your main module something\nlike this:\n\n    port routeTasks : Signal (Task () ())\n    port routeTasks =\n        RouteHash.start\n            { prefix = RouteHash.defaultPrefix\n            , models = models\n            , delta2update = delta2update \n            , address = address\n            , location2action = location2action\n            }\n\nSee [`Config`](#Config) for the documentation of the parameter you need to supply.\n",
        "type": "RouteHash.Config model action -> Signal.Signal (Task.Task () ())"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]