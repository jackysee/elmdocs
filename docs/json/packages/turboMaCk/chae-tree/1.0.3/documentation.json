[
  {
    "name": "Chae.Tree",
    "comment": " Tree is list of nodes.\nTree is main data structure this package provides and this module implements the most essential functions\nwhich really differs from general Rose Tree implementation. Along side with functor functions\ntrees support operation like `push`, `subTreeFor` and `fromList`. These functions make it easy to create\nand manipulate trees only by knowing Ids of items.\n\n# Definition\n@docs Tree\n\n# Constructors\n@docs nil, fromList\n\n# Query a Tree\n@docs subTreeFor\n\n# Common Operations\n@docs push\n\n# Map - Reduce\n@docs map, map2, zip, reduce, filter\n\n",
    "aliases": [
      {
        "name": "Tree",
        "comment": " Tree\n",
        "args": [
          "a"
        ],
        "type": "List (Chae.Node.Node a)"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "filter",
        "comment": " Filter Tree.\nSimilar to `List.filter` but working on trees.\nIf parent node do not pass condition its children are no included in result\n\n    tree = [Node.node \"5\" 5 [ Node.singleton \"1\" 1, Node.singleton \"10\" 10 ] ]\n\n    filter ((<) 4) tree == [Node \"5\" 5 ([Node \"10\" 10 []])]\n    filter ((<) 6) tree == []\n    filter ((<) 0) tree == tree\n\n",
        "type": "(a -> Bool) -> Chae.Tree.Tree a -> Chae.Tree.Tree a"
      },
      {
        "name": "fromList",
        "comment": " Build `Tree` from given list of items.\nFirst argument is function from item to `Id/String`.\nSecond argument is function from item to `List Id/List String`.\n\n    items =\n        [ { id = 1, name = \"first\", parentIds = [] }\n        , { id = 2, name = \"child\", parentIds = [1] }\n        , { id = 3, name = \"deep child\", parentIds = [2] }\n        ]\n\n     itemId item =\n         toId (.id item )\n\n     itemParentIds item =\n         .parentIds item |> List.map toId\n\n     fromList itemId itemParentIds items == [Node \"1\" { id = 1, name = \"first\", parentIds = [] } ([Node \"2\" { id = 2, name = \"child\", parentIds = [1] } ([Node \"3\" { id = 3, name = \"deep child\", parentIds = [2] } []])])]\n",
        "type": "(a -> Chae.Id.Id) -> (a -> List Chae.Id.Id) -> List a -> Chae.Tree.Tree a"
      },
      {
        "name": "map",
        "comment": " Map function over tree\nSimilar to `List.map` but working with trees\n",
        "type": "(a -> Chae.Id.Id) -> (a -> b) -> Chae.Tree.Tree a -> Chae.Tree.Tree b"
      },
      {
        "name": "map2",
        "comment": " Map function over two trees to produce new tree from both combined\nSimilar to `List.map2` but working with trees\n",
        "type": "(a -> b -> Chae.Id.Id) -> (a -> b -> c) -> Chae.Tree.Tree a -> Chae.Tree.Tree b -> Chae.Tree.Tree c"
      },
      {
        "name": "nil",
        "comment": " Construct empty tree\nAlias for []\n",
        "type": "Chae.Tree.Tree a"
      },
      {
        "name": "push",
        "comment": " Produce new tree with given item pushed under its parent.\nFirst argument is function from item to `Id/String`.\n\nSecond argument is `Maybe Id` is ether:\n\n- `Nothing` => push to root\n- `Just parentId` => push to sub Tree\n\n\n    push toId Nothing 1 [] == [Node \"1\" 1 []]\n    push toId (Just (toId 1)) 2 [ Node.singleton \"1\" 1 ] == [Node \"1\" 1 ([Node \"2\" 2 []])]\n",
        "type": "(a -> Chae.Id.Id) -> Maybe.Maybe Chae.Id.Id -> a -> Chae.Tree.Tree a -> Chae.Tree.Tree a"
      },
      {
        "name": "reduce",
        "comment": " Reduce Tree by given function\nSimilar to `List.foldl` but working with trees\n",
        "type": "(a -> b -> b) -> b -> Chae.Tree.Tree a -> b"
      },
      {
        "name": "subTreeFor",
        "comment": " Returns sub `Tree` and ancestors for given `Id` and `Tree`.\nFirst argument is `Maybe Id` is ether:\n\n- `Nothing` => result is given tree (with empty ancestors `List`).\n- `Just parentId` => result is sub tree for node with `id == parentId`.\n\nReturns tuple containing sub tree and list of ancestors of that sub tree (from parent to root).\n\n    items =\n        [ { id = 1, name = \"first\", parentIds = [] }\n        , { id = 2, name = \"child\", parentIds = [1] }\n        , { id = 3, name = \"dep categories\", parentIds = [2] }\n        ]\n\n     itemId item =\n         toId (.id item )\n\n     itemParentIds item =\n         .parentIds item |> List.map toId\n\n     tree =\n        fromList itemId itemParentIds items\n\n     subTreeFor Nothing tree == (tree, [])\n     subTreeFor (Just \"1\") tree == ([Node \"2\" { id = 2, name = \"child\", parentIds = [1] } ([Node \"3\" { id = 3, name = \"dep categories\", parentIds = [2] } []])],[{ id = 1, name = \"first\", parentIds = [] }])\n     subTreeFor (Just \"2\") tree == ([Node \"3\" { id = 3, name = \"dep categories\", parentIds = [2] } []],[{ id = 2, name = \"child\", parentIds = [1] },{ id = 1, name = \"first\", parentIds = [] }])\n",
        "type": "Maybe.Maybe Chae.Id.Id -> Chae.Tree.Tree a -> ( Chae.Tree.Tree a, List a )"
      },
      {
        "name": "zip",
        "comment": " Zip two trees to tree of tuple\nSimilar to `List.zip` but working with trees\n",
        "type": "(a -> b -> Chae.Id.Id) -> Chae.Tree.Tree a -> Chae.Tree.Tree b -> Chae.Tree.Tree ( a, b )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Chae.Node",
    "comment": " Node is [Rose Tree](https://en.wikipedia.org/wiki/Rose_tree) like data structure beside it also have its id.\nThis Id is essential to some manipulations Chae-Tree provides.\nIf you're looking for `Rose Tree` you'll better pick some regular implementation.\nChae Tree is domain specific with focus on building multi level navigation or similar UI elements.\nIt's not necessary the best pick if you want to process structural data beside you want to use functions\nlike `pushDeep`.\n\n# Definition\n@docs Node\n\n# Constructors\n@docs singleton, node\n\n# Query a Node\n@docs id, root, children, hasChildren, toTuple\n\n# Common operations\n@docs addChild, pushDeep\n\n# Map - Reduce\n@docs map, map2, flatten, flatMap, reduce\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Node",
        "comment": " Node\n",
        "args": [
          "a"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "addChild",
        "comment": " Return `Node` with item add as sub `Node`.\nFirst argument is function from item to `Id/String`.\n\n    addChild \"2\" 2 (singleton \"1\" 1) == Node \"1\" 1 ([Node \"2\" 2 []])\n    addChild \"3\" 3 (addChild \"2\" 2 (singleton \"1\" 1)) == Node \"1\" 1 ([Node \"3\" 3 [],Node \"2\" 2 []])\n",
        "type": "Chae.Id.Id -> a -> Chae.Node.Node a -> Chae.Node.Node a"
      },
      {
        "name": "children",
        "comment": " Get child tree of `Node`.\nThis is common way to access sub tree of given node.\n\n    children (singleton \"1\" 1) == []\n    children (addChild \"2\" 2 (singleton \"1\" 1)) == [Node \"2\" 2 []]\n",
        "type": "Chae.Node.Node a -> List (Chae.Node.Node a)"
      },
      {
        "name": "flatMap",
        "comment": " Map and flatten\n\n    n = node \"1\" 1 [ node \"2\" 2 [], node \"3\" 3 [ node \"4\" 4 []]]\n\n    flatMap toId (\\a -> node \"2\" (a * 2) []) n == Node \"1\" 2 ([Node \"2\" 4 [],Node \"3\" 6 ([Node \"4\" 8 []])])\n    flatMap toId (\\a -> node \"2\" (a *2) [node  \"1\" (a * 3) []]) m == Node \"1\" 2 ([Node \"1\" 3 [],Node \"2\" 4 ([Node \"1\" 6 []]),Node \"3\" 6 ([Node \"1\" 9 [],Node \"4\" 8 ([Node \"1\" 12 []])])])\n",
        "type": "(a -> Chae.Id.Id) -> (a -> Chae.Node.Node b) -> Chae.Node.Node a -> Chae.Node.Node b"
      },
      {
        "name": "flatten",
        "comment": " Flatten Node of Nodes to Node.\n",
        "type": "(Chae.Id.Id -> Chae.Id.Id -> Chae.Id.Id) -> Chae.Node.Node (Chae.Node.Node a) -> Chae.Node.Node a"
      },
      {
        "name": "hasChildren",
        "comment": " Check if tree has children\n\n    hasChildren (singleton \"1\" 1) == False\n    hasChildren (addChild \"2\" 2 (singleton \"1\" 1)) == True\n",
        "type": "Chae.Node.Node a -> Bool"
      },
      {
        "name": "id",
        "comment": " Get id of given `Node`.\n\n    id (singleton \"1\" 1) == \"1\"\n    id (singleton \"uid\" { a = \"a\"} ) == \"uid\"\n",
        "type": "Chae.Node.Node a -> Chae.Id.Id"
      },
      {
        "name": "map",
        "comment": " Map function on tree\nproduces new modified tree\n\n   map toId ((+) 1) (addChild \"2\" 2 (singleton \"1\" 1)) == Node \"1\" 2 ([Node \"2\" 3 []])\n   map (\\n -> n + 1 |> toId) ((+) 1) (addChild \"2\" 2 (singleton \"1\" 1)) == Node \"2\" 2 ([Node \"3\" 3 []])\n",
        "type": "(a -> Chae.Id.Id) -> (a -> b) -> Chae.Node.Node a -> Chae.Node.Node b"
      },
      {
        "name": "map2",
        "comment": " Similar to map, but takes two Nodes and produce new one by combining items of both\n",
        "type": "(a -> b -> Chae.Id.Id) -> (a -> b -> c) -> Chae.Node.Node a -> Chae.Node.Node b -> Chae.Node.Node c"
      },
      {
        "name": "node",
        "comment": " Create node. Alias for Node constructor\n\n    node \"1\" 1 [] == Node \"1\" 1 []\n    node \"1\" 1 [ node \"2\" 2 [] ] == Node \"1\" 1 ([Node \"2\" 2 []])\n",
        "type": "Chae.Id.Id -> b -> List (Chae.Node.Node b) -> Chae.Node.Node b"
      },
      {
        "name": "pushDeep",
        "comment": " Find parent node in children by id and push new item to it\n\n    n = node \"1\" 1 [ node \"2\" 2 [], node \"3\" 3 [ node \"4\" 4 []]]\n\n    pushDeep \"4\" \"10\" 10 n == Node \"1\" 1 ([Node \"2\" 2 [],Node \"3\" 3 ([Node \"4\" 4 ([Node \"10\" 10 []])])])\n",
        "type": "Chae.Id.Id -> Chae.Id.Id -> a -> Chae.Node.Node a -> Chae.Node.Node a"
      },
      {
        "name": "reduce",
        "comment": " Reduce Node by given function. Similar to `List.foldr`\n\n    reduce (+) 0 (addChild \"20\" 20 (singleton \"1\" 1)) == 21\n    reduce (*) 1 (addChild \"3\" 3 (singleton \"4\" 4)) == 12\n",
        "type": "(a -> b -> b) -> b -> Chae.Node.Node a -> b"
      },
      {
        "name": "root",
        "comment": " Turns `Node` back to value it was created from.\n\nThis function provide recommended way to access user space data while working with tree.\n\n    root (singleton \"1\" \"Elm\") == \"Elm\"\n    root (singleton \"1\" { id = \"1\", name = \"Elm\" }) == { id = \"1\", name = \"Elm\" }\n",
        "type": "Chae.Node.Node a -> a"
      },
      {
        "name": "singleton",
        "comment": " Create empty `Node` for given values.\nFirst paramter is function which takes given value and return it's id.\n\n    singleton \"1\" 1 == Node \"1\" 1 []\n    singleton \"1\" { a = \"b\" } == Node \"1\" { a = \"b\" } []\n",
        "type": "Chae.Id.Id -> a -> Chae.Node.Node a"
      },
      {
        "name": "toTuple",
        "comment": " Transform node to tuple of `( id, item, children )`\n\n    toTuple (singleton \"1\" 1) == (\"1\",1,[])\n    toTuple (node \"1\" 1 [(singleton \"2\" 2)]) == (\"1\",1,[Node \"2\" 2 []])\n",
        "type": "Chae.Node.Node a -> ( Chae.Id.Id, a, List (Chae.Node.Node a) )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Chae.Id",
    "comment": " This module contains `Id` type implementation.\n\n# Definition\n@docs Id\n\n# Constructor\n@docs toId\n\n",
    "aliases": [
      {
        "name": "Id",
        "comment": " ",
        "args": [],
        "type": "String"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "toId",
        "comment": " Convert any value to `Id` type.\nThis is just alias for `toString` function.\n\n    toId \"str\" = \"str\"\n    toId 1 = \"1\"\n    toId { a = \"a\" } = \"{ a = \\\"a\\\" }\"\n",
        "type": "a -> Chae.Id.Id"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]