[
  {
    "name": "HistoryTree",
    "comment": " This library defines a tree structure that contains a complete history of\nsome parent and child states, with infinitely many different timelines.\n\nYou can undo/redo along this timeline, and continue to do new actions from any point in time, without losing the other timeline you had created earlier.\n\n# Definition\n@docs HistoryTree, Index\n\n# Creation and basic usage\n@docs init, current, undo, redo, branchCount\n\n# Manipulation\n@docs apply, push\n\n# Checks\n@docs canUndo, canRedo\n\n# Changing focus\n@docs goto, rewind\n",
    "aliases": [
      {
        "name": "HistoryTree",
        "comment": " A tree that has a focus on a certain point in its history.\n",
        "args": [
          "a"
        ],
        "type": "FocusTree.FocusTree a"
      },
      {
        "name": "Index",
        "comment": " The index pointing at a certain subtree. An alias for Int.\n",
        "args": [],
        "type": "FocusTree.Index"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "apply",
        "comment": " Push a new history entry calculated from the current value onto the tree, and focus on it.\nLike `push`, but with the new value being a transformation of the current point in history.\n",
        "type": "(a -> a) -> HistoryTree.HistoryTree a -> HistoryTree.HistoryTree a"
      },
      {
        "name": "branchCount",
        "comment": " Returns the count of child timeline branches from the currently focussed point.\nCan be used to e.g. show several different Redo buttons for each child branch.\n",
        "type": "HistoryTree.HistoryTree a -> Int"
      },
      {
        "name": "canRedo",
        "comment": " Returns True if there is any later (child) points in history to switch to,\nFalse if we're at a point in time that has no child points in time.\n\nThis can be useful for the same reasons as `canUndo`. It might be a bit too generic for most use cases, since there's possibly multiple redo paths to take.\n",
        "type": "HistoryTree.HistoryTree a -> Bool"
      },
      {
        "name": "canUndo",
        "comment": " Returns True if there is a previous (parent) point in history to switch to,\nFalse if we're already at the earliest point in time.\n\nThis is useful for UIs based on using these trees: You can, for example, disable an \"Undo\" button if this returns False.\n",
        "type": "HistoryTree.HistoryTree a -> Bool"
      },
      {
        "name": "current",
        "comment": " Get the value at the current (focussed) point in history.\n",
        "type": "HistoryTree.HistoryTree a -> a"
      },
      {
        "name": "goto",
        "comment": " Try to traverse the tree downwards to a certain point in history.\nThis is like repeated applications of `redo` - you can think of it as taking a described path to the point in history.\nReturns a `Just` value containing the history tree with the chosen history point in focus,\n`Nothing` when there is no history point at the given path to be found.\n",
        "type": "List HistoryTree.Index -> HistoryTree.HistoryTree a -> Maybe.Maybe (HistoryTree.HistoryTree a)"
      },
      {
        "name": "init",
        "comment": " Make a new history tree with an initial (root) value.\n",
        "type": "a -> HistoryTree.HistoryTree a"
      },
      {
        "name": "push",
        "comment": " Push some new history entry onto the tree, and focus on it.\n",
        "type": "a -> HistoryTree.HistoryTree a -> HistoryTree.HistoryTree a"
      },
      {
        "name": "redo",
        "comment": " Try to redo a certain history child. These are numbered with Int indices.\nReturns a `Just` value containing the history tree with the chosen child in focus,\n`Nothing` when there is no child with the given index available.\n",
        "type": "HistoryTree.Index -> HistoryTree.HistoryTree a -> Maybe.Maybe (HistoryTree.HistoryTree a)"
      },
      {
        "name": "rewind",
        "comment": " Rewind history, focussing on the first point in time.\nUseful for drawing a tree, since for that, you need to traverse it downwards from the top.\n",
        "type": "HistoryTree.HistoryTree a -> HistoryTree.HistoryTree a"
      },
      {
        "name": "undo",
        "comment": " Try to undo one step on the current history tree.\nReturns a `Just` value containing the new history tree if it's possible,\n`Nothing` when already at the initial point of history.\n",
        "type": "HistoryTree.HistoryTree a -> Maybe.Maybe (HistoryTree.HistoryTree a)"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  }
]