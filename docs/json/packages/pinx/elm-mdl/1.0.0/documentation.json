[
  {
    "name": "Material",
    "comment": "\n\nMaterial Design component library for Elm based on Google's\n[Material Design Lite](https://www.getmdl.io/).\n\nClick \n[here](https://debois.github.io/elm-mdl/)\nfor a live demo. \n\n# Component model \n\nThe component model of the library is simply the Elm Architecture (TEA), i.e.,\neach component has types `Model` and `Msg`, and values `view` and `update`. A\nminimal example using this library as plain TEA can be found\n[here](https://github.com/debois/elm-mdl/blob/master/examples/Component-TEA.elm).\n\nUsing more than a few component in plain TEA is unwieldy because of the large\namount of boilerplate one has to write. This library uses the \n[Parts model](https://github.com/debois/elm-parts) for getting rid of most of\n  that boilerplate. A minimal example using the parts model is\n[here](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm).\n\nIt is important to note that the parts model lives __within__ TEA; \nit is not an alternative architecture. \n\n# Getting started\n\nThe easiest way to get started is to start with one of the minimal examples above.\nWe recommend going with the one that uses \n[the one that uses](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm)\nthe library's component support rather than working directly in plain Elm.\n\n# Interfacing with CSS\n\nThis library depends on the CSS part of Google's Material Design Lite. Your app\nwill have to load that. See the\n[Scheme](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Scheme)\nmodule for exposing details. (The starting point implementations above\nload CSS automatically.)\n\n# View functions\n\nThe view function of most components has this signature: \n\n    view : (Msg -> m) -> Model -> List (Property m) -> List (Html m) -> Html m\n\nFor technical reasons, rather than using `Html.App.map f (view ...)`, you\nprovide the lifting function `f` directly to the component as the first\nargument. The `Model` argument is standard.  The third argument, `List (Property m)`,\nis a mechanism for you to specify additional classes and CSS for the component, as well\nas messages to send in response to events on the component.  You need this,\ne.g., when you want to specify the width of a button. See the\n[Options](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Options)\nmodule for details. \n\nMaterial Design defines a color palette. The \n[Color](http://package.elm-lang.org/packages/debois/elm-mdl/latest/Material-Color)\nmodule contains exposing various `Property` values and helper functions for working with\nthis color palette.\n\nNB! If you are using the parts model rather than plain TEA, call `render` instead of `view`. \n\n# Parts model\n\nThe present module contains only convenience functions for working with nested \ncomponents in the Elm architecture. A minimal example using this library\nwith component support can be found \n[here](http://github.com/debois/elm-mdl/blob/master/examples/Component.elm).\nWe encourage you to use the library in this fashion.\n\nHere is how you use component support in general.  First, boilerplate. \n\n 1. Include `Material`:\n\n    <!-- MDL -->\n    <link href='https://fonts.googleapis.com/css?family=Roboto:400,300,500|Roboto+Mono|Roboto+Condensed:400,700&subset=latin,latin-ext' rel='stylesheet' type='text/css'>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n    <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.1.3/material.min.css\" />\n\n 2. Add a model container Material components to your model:\n\n        type alias Model = \n          { ...\n          , mdl : Material.Model    \n          }\n\n        model : Model = \n          { ...\n          , mdl = Material.model\n          }\n\n 3. Add an action for Material components. \n\n        type Msg = \n          ...\n          | Mdl Material.Msg \n\n 4. Handle that message in your update function as follows:\n\n        update message model = \n          case message of \n            ...\n            Mdl message' -> \n              Material.update Mdl message' model\n\nYou now have sufficient boilerplate for using __any__ number of elm-mdl components. \nLet's say you need a textfield for name entry, and you'd like to be notifed\nwhenever the field changes value through your own NameChanged action: \n\n        import Material.Textfield as Textfield\n\n        ...\n\n        type Msg = \n          ...\n          | NameChanged String\n\n        ... \n\n        update action model = \n          case action of \n            ...\n            NameChanged name -> \n              -- Do whatever you need to do. \n\n        ...\n\n        nameInput : Textfield.Instance Material.Model Msg\n        nameInput = \n        \n        view addr model = \n          ...\n          Textfield.instance [0] Mdl model.mdl\n            [ css \"width\" \"16rem\"\n            , Textfield.floatingLabel\n            , Textfield.onInput NameChanged\n            ] \n\nThe win relative to using plain Elm Architecture is that adding a component\nneither requires you to update your model, your Msgs, nor your update function. \n(As in the above example, you will frequently have to update the latter two anyway, \nbut now it's not boilerplate, its \"business logic\".)\n\n\n## Optimising for size\n\nUsing this module will force all elm-mdl components to be built and included in \nyour application. If this is unacceptable, you can custom-build a version of this\nmodule that exposing uses only the components you need. To do so, you need to provide your\nown versions of the type `Model` and the value `model` of the present module. \nUse the corresponding definitions in this module as a starting point \n([source](https://github.com/debois/elm-mdl/blob/master/src/Material.elm)) \nand simply comment out the components you do not need. \n\n@docs Model, model, Msg, update\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Model encompassing all Material components. Since some components store\nuser actions in their model (notably Snackbar), the model is generic in the \ntype of such \"observations\". \n",
        "args": [],
        "type": "{ button : Parts.Indexed Material.Button.Model , textfield : Parts.Indexed Material.Textfield.Model , menu : Parts.Indexed Material.Menu.Model , snackbar : Maybe.Maybe (Material.Snackbar.Model Int) , layout : Material.Layout.Model , toggles : Parts.Indexed Material.Toggles.Model }"
      },
      {
        "name": "Msg",
        "comment": " Msg encompassing actions of all Material components. \n",
        "args": [],
        "type": "Parts.Msg Material.Model"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "model",
        "comment": " Initial model.\n",
        "type": "Material.Model"
      },
      {
        "name": "update",
        "comment": " Update function for the above Msg. Provide as the first \nargument a lifting function that embeds the generic MDL action in \nyour own Msg type. \n",
        "type": "(Material.Msg -> obs) -> Material.Msg -> { model | mdl : Material.Model } -> ( { model | mdl : Material.Model }, Platform.Cmd.Cmd obs )"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Menu",
    "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#menus-section):\n\n> The Material Design Lite (MDL) menu component is a user interface element\n> that allows users to select one of a number of options. The selection\n> typically results in an action initiation, a setting change, or other\n> observable effect. Menu options are always presented in sets of two or\n> more, and options may be programmatically enabled or disabled as required.\n> The menu appears when the user is asked to choose among a series of\n> options, and is usually dismissed after the choice is made.\n\n> Menus are an established but non-standardized feature in user interfaces,\n> and allow users to make choices that direct the activity, progress, or\n> characteristics of software. Their design and use is an important factor in\n> the overall user experience. See the menu component's Material Design\n> specifications page for details.\n\nSee also the\n[Material Design Specification]([https://www.google.com/design/spec/components/menus.html).\n\nRefer to\n[this site](https://debois.github.io/elm-mdl/#/menus)\nfor a live demo.\n\n# Render\n@docs Item, render\n\n# Options\n@docs Property\n\n## Alignment\n@docs bottomLeft, bottomRight, topLeft, topRight\n\n## Appearance\n@docs ripple\n\n# Elm architecture\n@docs Model, defaultModel, Msg, update, view\n\n\n",
    "aliases": [
      {
        "name": "Item",
        "comment": " Item model.\n",
        "args": [
          "m"
        ],
        "type": "{ divider : Bool, enabled : Bool, html : Html.Html m }"
      },
      {
        "name": "Model",
        "comment": " TODO. \n",
        "args": [],
        "type": "{ items : Dict.Dict Int Material.Ripple.Model , animationState : Material.Menu.AnimationState , geometry : Maybe.Maybe Material.Menu.Geometry.Geometry }"
      },
      {
        "name": "Property",
        "comment": "\n  TODO\n",
        "args": [
          "m"
        ],
        "type": "Material.Options.Property Material.Menu.Config m"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Component action.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "bottomLeft",
        "comment": "\n",
        "type": "Material.Menu.Property m"
      },
      {
        "name": "bottomRight",
        "comment": "\n",
        "type": "Material.Menu.Property m"
      },
      {
        "name": "defaultModel",
        "comment": " TODO.\n",
        "type": "Material.Menu.Model"
      },
      {
        "name": "render",
        "comment": " Component render. Below is an example, assuming boilerplate setup as\nindicated in `Material`, and a user message `Select String`.\n\n    item : String -> Html Msg\n    item str = \n      Html.div \n        [ Html.Events.onClick (Select str) ]\n        [ Html.text str ]\n\n    Menu.render Mdl [idx] model.mdl \n      [ Menu.topLeft\n      , Menu.ripple\n      ] \n      [ Menu.Item False True  <| item \"Some item\"\n      , Menu.Item True  True  <| item \"Another item\"\n      , Menu.Item False False <| item \"Disabled item\"\n      , Menu.Item False True  <| item \"Yet another item\"\n      ]\n",
        "type": "(Parts.Msg (Material.Menu.Container c) -> m) -> Parts.Index -> Material.Menu.Container c -> List (Material.Menu.Property m) -> List (Material.Menu.Item m) -> Html.Html m"
      },
      {
        "name": "ripple",
        "comment": "\n",
        "type": "Material.Menu.Property m"
      },
      {
        "name": "topLeft",
        "comment": "\n",
        "type": "Material.Menu.Property m"
      },
      {
        "name": "topRight",
        "comment": "\n",
        "type": "Material.Menu.Property m"
      },
      {
        "name": "update",
        "comment": " Component update.\n",
        "type": "Material.Menu.Msg -> Material.Menu.Model -> ( Material.Menu.Model, Platform.Cmd.Cmd Material.Menu.Msg )"
      },
      {
        "name": "view",
        "comment": " TODO\n",
        "type": "Material.Menu.Model -> List (Material.Menu.Property Material.Menu.Msg) -> List (Material.Menu.Item Material.Menu.Msg) -> Html.Html Material.Menu.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Layout",
    "comment": " From the\n[Material Design Lite documentation](https://www.getmdl.io/components/index.html#layout-section):\n\n> The Material Design Lite (MDL) layout component is a comprehensive approach to\n> page layout that uses MDL development tenets, allows for efficient use of MDL\n> components, and automatically adapts to different browsers, screen sizes, and\n> devices.\n>\n> Appropriate and accessible layout is a critical feature of all user interfaces,\n> regardless of a site's content or function. Page design and presentation is\n> therefore an important factor in the overall user experience. See the layout\n> component's\n> [Material Design specifications page](https://www.google.com/design/spec/layout/structure.html#structure-system-bars)\n> for details.\n>\n> Use of MDL layout principles simplifies the creation of scalable pages by\n> providing reusable components and encourages consistency across environments by\n> establishing recognizable visual elements, adhering to logical structural\n> grids, and maintaining appropriate spacing across multiple platforms and screen\n> sizes. MDL layout is extremely powerful and dynamic, allowing for great\n> consistency in outward appearance and behavior while maintaining development\n> flexibility and ease of use.\n\n# Subscriptions\n\nThe layout needs to be initialised with and subscribe to changes in viewport\nsizes. Example initialisation of containing app: \n\n    import Material.Layout as Layout\n    import Material\n\n    type Msg = \n      ...\n      | Mdl Material.Msg -- Boilerplate\n\n    ...\n\n    App.program \n      { init = ( model, Layout.sub0 Mdl )\n      , view = view\n      , subscriptions = Layout.subs Mdl\n      , update = update\n      }\n\n\n@docs sub0, subs\n\n# Render\n@docs Contents, render, toggleDrawer\n\n# Options\n@docs Property\n\n## Tabs\n@docs fixedTabs, rippleTabs\n\n## Header\n@docs fixedHeader, fixedDrawer\n@docs waterfall, seamed, scrolling\n@docs transparentHeader\n@docs selectedTab\n\n## Events\n@docs onSelectTab\n\n# Sub-views\n@docs row, spacer, title, navigation, link, onClick, href\n\n# Elm architecture\n@docs view, Msg, Model, defaultModel, update, init, subscriptions\n\n\n",
    "aliases": [
      {
        "name": "Contents",
        "comment": " Content of the layout only (contents of main pane is set elsewhere). Every\npart is optional; if you supply an empty list for either, the sub-component is \nomitted. \n\nThe `header` and `drawer` contains the contents of the header rows and drawer,\nrespectively. Use `row`, `spacer`, `title`, `nav`, and `link`, as well as\nregular Html to construct these. The `tabs` contains\nthe title of each tab.\n",
        "args": [
          "m"
        ],
        "type": "{ header : List (Html.Html m) , drawer : List (Html.Html m) , tabs : ( List (Html.Html m), List (Material.Options.Style m) ) , main : List (Html.Html m) }"
      },
      {
        "name": "Model",
        "comment": " Component mode. \n",
        "args": [],
        "type": "{ ripples : Dict.Dict Int Material.Ripple.Model , isSmallScreen : Bool , isCompact : Bool , isAnimating : Bool , isScrolled : Bool , isDrawerOpen : Bool }"
      },
      {
        "name": "Property",
        "comment": " Layout options. \n",
        "args": [
          "m"
        ],
        "type": "Material.Options.Property (Material.Layout.Config m) m"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Component messages.\n",
        "args": [],
        "cases": [
          [
            "ToggleDrawer",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "defaultModel",
        "comment": " Default component model. \n",
        "type": "Material.Layout.Model"
      },
      {
        "name": "fixedDrawer",
        "comment": " Drawer is \"fixed\": It is always open on large screens. \n",
        "type": "Material.Layout.Property m"
      },
      {
        "name": "fixedHeader",
        "comment": " Header is \"fixed\": It appears even on small screens. \n",
        "type": "Material.Layout.Property m"
      },
      {
        "name": "fixedTabs",
        "comment": " Tabs are spread out to consume available space and do not scroll horisontally.\n",
        "type": "Material.Layout.Property m"
      },
      {
        "name": "href",
        "comment": " href for Links.\n",
        "type": "String -> Material.Layout.LinkProperty m"
      },
      {
        "name": "init",
        "comment": " Layout needs initial viewport size\n",
        "type": "( Material.Layout.Model, Platform.Cmd.Cmd Material.Layout.Msg )"
      },
      {
        "name": "link",
        "comment": " Link.\n",
        "type": "List (Material.Layout.LinkProperty m) -> List (Html.Html m) -> Html.Html m"
      },
      {
        "name": "navigation",
        "comment": " Container for links.\n",
        "type": "List (Material.Options.Style m) -> List (Html.Html m) -> Html.Html m"
      },
      {
        "name": "onClick",
        "comment": " onClick for Links.\n",
        "type": "m -> Material.Layout.LinkProperty m"
      },
      {
        "name": "onSelectTab",
        "comment": " Receieve notification when tab `k` is selected.\n",
        "type": "(Int -> m) -> Material.Layout.Property m"
      },
      {
        "name": "render",
        "comment": " Component render. Refer to `demo/Demo.elm` on github for an example use. \nExcerpt:\n\n    Layout.render Mdl model.mdl\n      [ Layout.selectedTab model.selectedTab\n      , Layout.onSelectTab SelectTab\n      , Layout.fixedHeader\n      ]\n      { header = myHeader\n      , drawer = myDrawer\n      , tabs = (tabTitles, [])\n      , main = [ MyComponent.view model ]\n      }\n",
        "type": "(Parts.Msg (Material.Layout.Container b) -> c) -> Material.Layout.Container b -> List (Material.Layout.Property c) -> Material.Layout.Contents c -> Html.Html c"
      },
      {
        "name": "rippleTabs",
        "comment": " Make tabs ripple when clicked. \n",
        "type": "Material.Layout.Property m"
      },
      {
        "name": "row",
        "comment": " Header row. \n",
        "type": "List (Material.Layout.Property m) -> List (Html.Html m) -> Html.Html m"
      },
      {
        "name": "scrolling",
        "comment": " Header scrolls with contents. \n",
        "type": "Material.Layout.Property m"
      },
      {
        "name": "seamed",
        "comment": " Header behaves as \"Seamed\" header: it does not cast shadow, is permanently\naffixed to the top of the screen.\n",
        "type": "Material.Layout.Property m"
      },
      {
        "name": "selectedTab",
        "comment": " Set the selected tab. \n",
        "type": "Int -> Material.Layout.Property m"
      },
      {
        "name": "spacer",
        "comment": " Push subsequent elements in header row or drawer column to the right/bottom.\n",
        "type": "Html.Html m"
      },
      {
        "name": "sub0",
        "comment": " Component subscription initialiser. Either this or \n`init` must be connected for the Layout to be responsive under\nviewport size changes. Example use: \n",
        "type": "(Parts.Msg (Material.Layout.Container b) -> c) -> Platform.Cmd.Cmd c"
      },
      {
        "name": "subs",
        "comment": " Component subscriptions (type compatible with render). Either this or \n`subscriptions` must be connected for the Layout to be responsive under\nviewport size changes. \n",
        "type": "(Parts.Msg (Material.Layout.Container b) -> c) -> x -> Platform.Sub.Sub c"
      },
      {
        "name": "subscriptions",
        "comment": " Layout subscribes to changes in viewport size. \n",
        "type": "x -> Platform.Sub.Sub Material.Layout.Msg"
      },
      {
        "name": "title",
        "comment": " Title in header row or drawer.\n",
        "type": "List (Material.Layout.Property m) -> List (Html.Html m) -> Html.Html m"
      },
      {
        "name": "toggleDrawer",
        "comment": " Toggle drawer. \n\nThis function is for use with parts typing. For plain TEA, simply issue \nan update for the exposed Msg `ToggleDrawer`. \n",
        "type": "(Parts.Msg (Material.Layout.Container b) -> c) -> c"
      },
      {
        "name": "transparentHeader",
        "comment": " Header is transparent: It draws on top of the layout's background\n",
        "type": "Material.Layout.Property m"
      },
      {
        "name": "update",
        "comment": " Component update.\n",
        "type": "Material.Layout.Msg -> Material.Layout.Model -> ( Material.Layout.Model, Platform.Cmd.Cmd Material.Layout.Msg )"
      },
      {
        "name": "view",
        "comment": " Main layout view.\n",
        "type": "(Material.Layout.Msg -> m) -> Material.Layout.Model -> List (Material.Layout.Property m) -> Material.Layout.Contents m -> Html.Html m"
      },
      {
        "name": "waterfall",
        "comment": " Header behaves as \"Waterfall\" header: On scroll, the top (argument `True`) or\nthe bottom (argument `False`) of the header disappears. \n",
        "type": "Bool -> Material.Layout.Property m"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Button",
    "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#buttons-section):\n\n> The Material Design Lite (MDL) button component is an enhanced version of the\n> standard HTML `<button>` element. A button consists of text and/or an image that\n> clearly communicates what action will occur when the user clicks or touches it.\n> The MDL button component provides various types of buttons, and allows you to\n> add both display and click effects.\n>\n> Buttons are a ubiquitous feature of most user interfaces, regardless of a\n> site's content or function. Their design and use is therefore an important\n> factor in the overall user experience. See the button component's Material\n> Design specifications page for details.\n>\n> The available button display types are flat (default), raised, fab, mini-fab,\n> and icon; any of these types may be plain (light gray) or colored, and may be\n> initially or programmatically disabled. The fab, mini-fab, and icon button\n> types typically use a small image as their caption rather than text.\n\nSee also the\n[Material Design Specification]([https://www.google.com/design/spec/components/buttons.html).\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/buttons) \nfor a live demo. \n\n# Render\n@docs render\n\n# Options\n\n@docs Property\n\n## Appearance\n@docs plain, colored, primary, accent\n@docs ripple, disabled\n  \n## Events\n@docs onClick\n\n## Type \nRefer to the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html)\nfor details about what type of buttons are appropriate for which situations.\n@docs flat, raised, fab, minifab, icon\n\n# Elm architecture\n@docs Model, defaultModel, Msg, update, view\n\n\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " \n",
        "args": [],
        "type": "Material.Ripple.Model"
      },
      {
        "name": "Msg",
        "comment": " Component action.\n",
        "args": [],
        "type": "Material.Ripple.Msg"
      },
      {
        "name": "Property",
        "comment": " Properties for Button options.\n",
        "args": [
          "m"
        ],
        "type": "Material.Options.Property (Material.Button.Config m) m"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "accent",
        "comment": " Color button with accent color. \n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "colored",
        "comment": " Color button with primary or accent color depending on button type.\n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "defaultModel",
        "comment": "\n",
        "type": "Material.Button.Model"
      },
      {
        "name": "disabled",
        "comment": " Set button to \"disabled\".\n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "fab",
        "comment": " Floating Msg Button. From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons-floating-action-button.html):\n\n> Floating action buttons are used for a promoted action. They are distinguished\n> by a circled icon floating above the UI and have motion behaviors that include\n> morphing, launching, and a transferring anchor point.\n>\n> Floating action buttons come in two sizes:\n>\n>  - Default size: For most use cases\n>  - Mini size: Only used to create visual continuity with other screen elements\n\nThis constructor produces the default size, use `minifab` to get the mini-size.\n\nExample use (colored with a '+' icon):\n\n    import Material.Button as Button\n    import Material.Icon as Icon\n\n    fabButton : Html\n    fabButton = fab addr model Colored [Icon.i \"add\"]\n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "flat",
        "comment": " From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html#buttons-flat-buttons):\n\n> Flat buttons are printed on material. They do not lift, but fill with color on\n> press.\n>\n> Use flat buttons in the following locations:\n>\n>  - On toolbars\n>  - In dialogs, to unify the button action with the dialog content\n>  - Inline, with padding, so the user can easily find them\n\nExample use (uncolored flat button, assuming properly setup model):\n\n    import Material.Button as Button\n\n    flatButton : Html\n    flatButton = Button.flat addr model Button.Plain [text \"Click me!\"]\n\n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "icon",
        "comment": " The [Material Design Lite implementation](https://www.getmdl.io/components/index.html#buttons-section)\nalso offers an \"icon button\", which we\nre-implement here. See also\n[Material Design Specification](http://www.google.com/design/spec/components/buttons.html#buttons-toggle-buttons).\nExample use (no color, displaying a '+' icon):\n\n    import Material.Button as Button\n    import Material.Icon as Icon\n\n    iconButton : Html\n    iconButton = icon addr model Plain [Icon.i \"add\"]\n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "minifab",
        "comment": " Mini-sized variant of a Floating Msg Button; refer to `fab`.\n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "onClick",
        "comment": " Add an `on \"click\"` handler to a button. \n",
        "type": "m -> Material.Button.Property m"
      },
      {
        "name": "plain",
        "comment": " Plain, uncolored button (default). \n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "primary",
        "comment": " Color button with primary color.\n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "raised",
        "comment": " From the\n[Material Design Specification](https://www.google.com/design/spec/components/buttons.html#buttons-raised-buttons):\n\n> Raised buttons add dimension to mostly flat layouts. They emphasize functions\n> on busy or wide spaces.\n>\n> Raised buttons behave like a piece of material resting on another sheet –\n> they lift and fill with color on press.\n\nExample use (colored raised button, assuming properly setup model):\n\n    import Material.Button as Button\n\n    raisedButton : Html\n    raisedButton = Button.raised addr model Button.Colored [text \"Click me!\"]\n\n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "render",
        "comment": " Component render.  Below is an example, assuming boilerplate setup as\nindicated in `Material`, and a user message `PollMsg`.\n    Button.render Mdl [0] model.mdl\n      [ Button.raised\n      , Button.ripple\n      , Button.onClick PollMsg\n      ]\n      [ text \"Fetch new\"]\n",
        "type": "(Parts.Msg (Material.Button.Container c) -> m) -> Parts.Index -> Material.Button.Container c -> List (Material.Button.Property m) -> List (Html.Html m) -> Html.Html m"
      },
      {
        "name": "ripple",
        "comment": " Set button to ripple when clicked.\n",
        "type": "Material.Button.Property m"
      },
      {
        "name": "update",
        "comment": " Component update.\n",
        "type": "Material.Button.Msg -> Material.Button.Model -> ( Material.Button.Model, Platform.Cmd.Cmd Material.Button.Msg )"
      },
      {
        "name": "view",
        "comment": " Component view function.\n",
        "type": "(Material.Button.Msg -> m) -> Material.Button.Model -> List (Material.Button.Property m) -> List (Html.Html m) -> Html.Html m"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Scheme",
    "comment": " \nThe elm-mdl library depends on Google's MDL CSS implementation, and your\napplication must load this CSS in order for elm-mdl to function correctly.\nThere are two ways to accomplish this: \n\n1. Load CSS from HTML by adding suitable `<link ...>` directives to the\nHTML-file containing your app, or \n2. Load CSS from Elm (by inserting `style` elements into the DOM).\n\n\n# Load CSS from HTML \n\nTo load CSS manually, add the following to your main html file. \n\n    <!-- MDL -->\n    <link href='https://fonts.googleapis.com/css?family=Roboto:400,300,500|Roboto+Mono|Roboto+Condensed:400,700&subset=latin,latin-ext' rel='stylesheet' type='text/css'>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n    <link rel=\"stylesheet\" href=\"https://code.getmdl.io/1.1.3/material.min.css\" />\n\n# Loading CSS from Elm \n\n@docs topWithScheme, top\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "top",
        "comment": " Top-level container with default color scheme. See `topWithScheme` above.\n",
        "type": "Html.Html a -> Html.Html a"
      },
      {
        "name": "topWithScheme",
        "comment": " Top-level container for Material components. This will force loading of\nMaterial Design Lite CSS files by inserting an appropriate `style` element.\n\nSupply primary and accent colors as parameters. Refer to the Material Design\nLite [Custom CSS theme builder](https://www.getmdl.io/customize/index.html)\nto preview combinations.  Please be aware that Grey, Blue Grey, and Brown\ncannot be secondary colors. If you choose them as such anyway, you will get the\ndefault theme.\n\n**NB!** Using this top-level container is not recommended, as most browsers\nwill load CSS requested from `style` elements concurrently with rendering the\ninitial page, which will produce a flicker on page load. The container is\nincluded only to provide an option to get started quickly and for use with\nelm-reactor.\n\nExample use: \n\n  view : Model -> Html Msg\n  view = \n    div \n      []\n      [ Scheme.topWithScheme Color.Teal Color.Red contents\n      , ...\n      ]\n",
        "type": "Material.Color.Hue -> Material.Color.Hue -> Html.Html a -> Html.Html a"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Snackbar",
    "comment": " From the [Material Design Lite documentation](https://www.getmdl.io/components/index.html#snackbar-section):\n\n> The Material Design Lite (MDL) __snackbar__ component is a container used to\n> notify a user of an operation's status. It displays at the bottom of the\n> screen. A snackbar may contain an action button to execute a command for the\n> user. Msgs should undo the committed action or retry it if it failed for\n> example. Msgs should not be to close the snackbar. By not providing an\n> action, the snackbar becomes a __toast__ component.\n\nRefer to [this site](http://debois.github.io/elm-mdl#/snackbar)\nfor a live demo. \n\n# Generating messages\n@docs Contents, toast, snackbar, add\n\n# Elm Architecture\n\n@docs Model, model\n@docs Msg, update\n@docs view\n\n# Render\nSnackbar does not have a `render` value. It must be used as a regular TEA\ncomponent. \n",
    "aliases": [
      {
        "name": "Contents",
        "comment": " Defines a single snackbar message. Usually, you would use either `toast`\nor `snackbar` to construct `Contents`.\n\n - `message` defines the (text) message displayed\n - `action` defines a label for the action-button in the snackbar. If \n    no action is provided, the snackbar is a message-only toast. \n - `payload` defines the data returned by Snackbar actions for this message. \n   You will usually choose this to be an Msg of yours for later dispatch, \n   e.g., if your snackbar has an \"Undo\" action, you would store the\n   corresponding action as the payload. \n - `timeout` is the amount of time the snackbar should be visible\n - `fade` is the duration of the fading animation of the snackbar. \n\nIf you are satsified with the default timeout and fade, do not construct\nvalues of this type yourself; use `snackbar` and `toast` below instead. \n",
        "args": [
          "a"
        ],
        "type": "{ message : String , action : Maybe.Maybe String , payload : a , timeout : Time.Time , fade : Time.Time }"
      },
      {
        "name": "Model",
        "comment": " Do not construct this yourself; use `model` below.\n",
        "args": [
          "a"
        ],
        "type": "{ queue : List (Material.Snackbar.Contents a) , state : Material.Snackbar.State a , seq : Int }"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Elm Architecture Msg type.  \nThe following actions are observable to you: \n- `Begin a`. The snackbar is now displaying the message with payload `a`.\n- `End a`. The snackbar is done displaying the message with payload `a`.\n- `Click a`. The user clicked the action on the message with payload `a`.\nYou can consume these three actions without forwarding them to `Snackbar.update`.\n(You still need to forward other Snackbar actions.)\n",
        "args": [
          "a"
        ],
        "cases": [
          [
            "Begin",
            [
              "a"
            ]
          ],
          [
            "End",
            [
              "a"
            ]
          ],
          [
            "Click",
            [
              "a"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "add",
        "comment": " Add a message to the snackbar. If another message is currently displayed, \nthe provided message will be queued. You will be able to observe a `Begin` action\n(see `Msg` above) once the action begins displaying.\n\nYou must dispatch the returned effect for the Snackbar to begin displaying your\nmessage.\n",
        "type": "Material.Snackbar.Contents a -> Material.Snackbar.Model a -> ( Material.Snackbar.Model a , Platform.Cmd.Cmd (Material.Snackbar.Msg a) )"
      },
      {
        "name": "model",
        "comment": " Default snackbar model.\n",
        "type": "Material.Snackbar.Model a"
      },
      {
        "name": "snackbar",
        "comment": " Generate snackbar with given payload, message and label. \nTimeout is 2750ms, fade 250ms.\n",
        "type": "a -> String -> String -> Material.Snackbar.Contents a"
      },
      {
        "name": "toast",
        "comment": " Generate toast with given payload and message. Timeout is 2750ms, fade 250ms.\n",
        "type": "a -> String -> Material.Snackbar.Contents a"
      },
      {
        "name": "update",
        "comment": " Elm Architecture update function. \n",
        "type": "Material.Snackbar.Msg a -> Material.Snackbar.Model a -> ( Material.Snackbar.Model a , Platform.Cmd.Cmd (Material.Snackbar.Msg a) )"
      },
      {
        "name": "view",
        "comment": " Elm architecture update function. \n",
        "type": "Material.Snackbar.Model a -> Html.Html (Material.Snackbar.Msg a)"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Grid",
    "comment": " From the\n[Material Design Lite documentation](http://www.getmdl.io/components/#layout-section/grid):\n\n> The Material Design Lite (MDL) grid component is a simplified method for laying\n> out content for multiple screen sizes. It reduces the usual coding burden\n> required to correctly display blocks of content in a variety of display\n> conditions.\n>\n> The MDL grid is defined and enclosed by a container element. A grid has 12\n> columns in the desktop screen size, 8 in the tablet size, and 4 in the phone\n> size, each size having predefined margins and gutters. Cells are laid out\n> sequentially in a row, in the order they are defined, with some exceptions:\n>\n>   - If a cell doesn't fit in the row in one of the screen sizes, it flows\n>     into the following line.\n>   - If a cell has a specified column size equal to or larger than the number\n>     of columns for the current screen size, it takes up the entirety of its\n>     row.\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/grid)\nfor a live demo. \n\nExample use:\n\n    import Material.Grid exposing (grid, cell, size, Device(..))\n\n    top : (Html a)\n    top =\n      grid []\n        [ cell [ size All 4 ]\n            [ h4 [] [text \"Cell 1\"]\n            ]\n        , cell [ offset All 2, size All 4 ]\n            [ h4 [] [text \"Cell 2\"]\n            , p [] [text \"This cell is offset by 2\"]\n            ]\n        , cell [ size All 6 ]\n            [ h4 [] [text \"Cell 3\"]\n            ]\n        , cell [ size Tablet 6, size Desktop 12, size Phone 2 ]\n            [ h4 [] [text \"Cell 4\"]\n            , p [] [text \"Size varies with device\"]\n            ]\n        ]\n\n# Grid container\n@docs grid, noSpacing, maxWidth\n\n# Cells\n\nCells are configured with a `List Style`; this configuration dictates the\nsize, offset, etc. of the cell. \n\n@docs cell, Cell, Device, size, offset, Align, align, hide, order\n",
    "aliases": [],
    "types": [
      {
        "name": "Align",
        "comment": " Alignment of cell contents; use with `align`.\n",
        "args": [],
        "cases": [
          [
            "Top",
            []
          ],
          [
            "Middle",
            []
          ],
          [
            "Bottom",
            []
          ]
        ]
      },
      {
        "name": "Cell",
        "comment": " Opaque cell type.\n",
        "args": [
          "a"
        ],
        "cases": []
      },
      {
        "name": "Device",
        "comment": " Device specifiers, used with `size` and `offset`. (A `Device` really\nencapsulates a screen size.)\n",
        "args": [],
        "cases": [
          [
            "All",
            []
          ],
          [
            "Desktop",
            []
          ],
          [
            "Tablet",
            []
          ],
          [
            "Phone",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "align",
        "comment": " Specify vertical cell alignment. See `Align`.\n",
        "type": "Material.Grid.Align -> Material.Options.Style a"
      },
      {
        "name": "cell",
        "comment": " Construct a cell for use in the argument list for `grid`. Note that this\nmodule defines exposing various styles to set size, offset, etc. of the cell. \n",
        "type": "List (Material.Options.Style a) -> List (Html.Html a) -> Material.Grid.Cell a"
      },
      {
        "name": "grid",
        "comment": " Construct a grid with options.\n",
        "type": "List (Material.Options.Style a) -> List (Material.Grid.Cell a) -> Html.Html a"
      },
      {
        "name": "hide",
        "comment": " Specify that a cell should be hidden on given `Device`.\n",
        "type": "Material.Grid.Device -> Material.Options.Style a"
      },
      {
        "name": "maxWidth",
        "comment": " Set maximum grid width. If more space is available, the grid stays centered with\npadding on either side. Width must be a valid CSS dimension. \n",
        "type": "String -> Material.Options.Style a"
      },
      {
        "name": "noSpacing",
        "comment": " Set grid to have no spacing between cells. \n",
        "type": "Material.Options.Style a"
      },
      {
        "name": "offset",
        "comment": " Specify cell offset, i.e., empty number of empty cells before the present\none. On devices of type `Device`, leave `Int` columns blank before the present\none begins.\n",
        "type": "Material.Grid.Device -> Int -> Material.Options.Style a"
      },
      {
        "name": "order",
        "comment": " Specify that a cell should re-order itself to position 'Int' on `Device`.\n",
        "type": "Material.Grid.Device -> Int -> Material.Options.Style a"
      },
      {
        "name": "size",
        "comment": " Specify cell size. On devices of type `Device`, the\ncell being specified spans `Int` columns.\n",
        "type": "Material.Grid.Device -> Int -> Material.Options.Style a"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Elevation",
    "comment": " From the [Material Design Lite documentation](https://github.com/google/material-design-lite/blob/master/src/shadow/README.md)\n\n> The Material Design Lite (MDL) shadow is not a component in the same sense as\n> an MDL card, menu, or textbox; it is a visual effect that can be assigned to a\n> user interface element. The effect simulates a three-dimensional positioning of\n> the element, as though it is slightly raised above the surface it rests upon —\n> a positive z-axis value, in user interface terms. The shadow starts at the\n> edges of the element and gradually fades outward, providing a realistic 3-D\n> effect.\n> \n> Shadows are a convenient and intuitive means of distinguishing an element from\n> its surroundings. A shadow can draw the user's eye to an object and emphasize\n> the object's importance, uniqueness, or immediacy.\n> \n> Shadows are a well-established feature in user interfaces, and provide users\n> with a visual clue to an object's intended use or value. Their design and use\n> is an important factor in the overall user experience.)\n\nThe [Material Design Specification](https://www.google.com/design/spec/what-is-material/elevation-shadows.html#elevation-shadows-elevation-android-)\npre-defines appropriate elevation for most UI elements; you need to manually\nassign shadows only to your own elements. \n\nYou are encouraged to visit the\n[Material Design specification](https://www.google.com/design/spec/what-is-material/elevation-shadows.html)\nfor details about appropriate use of shadows. \n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/elevation)\nfor a live demo. \n  \n\n# Elevations\nEach of the values below denote an elevation of a certain heigh, e.g., \n`e4` will cast a shadow indicating an elevation of 4dp. \n@docs e2, e3, e4, e6, e8, e16, e24\n@docs elevations\n\n# Transitions\n@docs transition\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "e16",
        "comment": "\n",
        "type": "Material.Options.Property a m"
      },
      {
        "name": "e2",
        "comment": "\n",
        "type": "Material.Options.Property a m"
      },
      {
        "name": "e24",
        "comment": "\n",
        "type": "Material.Options.Property a m"
      },
      {
        "name": "e3",
        "comment": "\n",
        "type": "Material.Options.Property a m"
      },
      {
        "name": "e4",
        "comment": "\n",
        "type": "Material.Options.Property a m"
      },
      {
        "name": "e6",
        "comment": "\n",
        "type": "Material.Options.Property a m"
      },
      {
        "name": "e8",
        "comment": "\n",
        "type": "Material.Options.Property a m"
      },
      {
        "name": "elevations",
        "comment": " List of all elevations and their depth in dp. \n",
        "type": "List ( Material.Options.Property a m, Int )"
      },
      {
        "name": "transition",
        "comment": " Add a CSS-transition to changes in elevation. Supply a transition\nduration in milliseconds as argument. \n\nNB! This Property a m is dictated by neither MDL nor the Material Design\nSpecification. \n",
        "type": "Float -> Material.Options.Property a m"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Progress",
    "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#loading-section):\n\n> The Material Design Lite (MDL) progress component is a visual indicator of\n> background activity in a web page or application. A progress indicator\n> consists of a (typically) horizontal bar containing some animation that\n> conveys a sense of motion. While some progress devices indicate an\n> approximate or specific percentage of completion, the MDL progress component\n> simply communicates the fact that an activity is ongoing and is not yet\n> complete.\n\n> Progress indicators are an established but non-standardized feature in user\n> interfaces, and provide users with a visual clue to an application's status.\n> Their design and use is therefore an important factor in the overall user\n> experience. See the progress component's Material Design specifications page\n> for details.\n\nRefer to\n[this site](https://debois.github.io/elm-mdl/#/loading)\nfor a live demo.\n\n# Render\n@docs indeterminate, progress, buffered\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "buffered",
        "comment": " A buffered progress bar. First argument is completion in percentage, second\nargument indicates buffering in percentage.\n",
        "type": "Float -> Float -> Html.Html m"
      },
      {
        "name": "indeterminate",
        "comment": " An indeterminate progress bar.\n",
        "type": "Html.Html m"
      },
      {
        "name": "progress",
        "comment": " A progress bar. First argument is completion in percentage.\n",
        "type": "Float -> Html.Html m"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Textfield",
    "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#textfields-section):\n\n> The Material Design Lite (MDL) text field component is an enhanced version of\n> the standard HTML `<input type=\"text\">` and `<input type=\"textarea\">` elements.\n> A text field consists of a horizontal line indicating where keyboard input\n> can occur and, typically, text that clearly communicates the intended\n> contents of the text field. The MDL text field component provides various\n> types of text fields, and allows you to add both display and click effects.\n>\n> Text fields are a common feature of most user interfaces, regardless of a\n> site's content or function. Their design and use is therefore an important\n> factor in the overall user experience. See the text field component's\n> [Material  Design specifications page](https://www.google.com/design/spec/components/text-fields.html)\n> for details.\n>\n> The enhanced text field component has a more vivid visual look than a standard\n> text field, and may be initially or programmatically disabled. There are three\n> main types of text fields in the text field component, each with its own basic\n> coding requirements. The types are single-line, multi-line, and expandable.\n\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/textfields)\nfor a live demo.\n \nThis implementation provides only single-line and password.\n\n# Component render\n@docs render\n\n# Options\n@docs Property, value\n  \n# Appearance\n@docs label, floatingLabel, error, disabled, rows, cols\n\n# Type \n@docs password, textarea, text', onInput\n\n# Elm Architecture\n@docs Msg, Model, defaultModel, update, view\n\n",
    "aliases": [
      {
        "name": "Model",
        "comment": " Model. The textfield is in its error-container if `error` is not `Nothing`.\nThe contents of the field is `value`.\n",
        "args": [],
        "type": "{ isFocused : Bool, value : String }"
      },
      {
        "name": "Property",
        "comment": "\n  TODO\n",
        "args": [
          "m"
        ],
        "type": "Material.Options.Property (Material.Textfield.Config m) m"
      }
    ],
    "types": [
      {
        "name": "Msg",
        "comment": " Component actions. `Input` carries the new value of the field.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "cols",
        "comment": "\n  TODO\n",
        "type": "Int -> Material.Textfield.Property m"
      },
      {
        "name": "defaultModel",
        "comment": " Default model. No label, error, or value.\n",
        "type": "Material.Textfield.Model"
      },
      {
        "name": "disabled",
        "comment": " \n  TODO\n",
        "type": "Material.Textfield.Property m"
      },
      {
        "name": "error",
        "comment": "\n  TODO\n",
        "type": "String -> Material.Textfield.Property m"
      },
      {
        "name": "floatingLabel",
        "comment": " \n  TODO\n",
        "type": "Material.Textfield.Property m"
      },
      {
        "name": "label",
        "comment": "\n  TODO\n",
        "type": "String -> Material.Textfield.Property m"
      },
      {
        "name": "onInput",
        "comment": "\n  TODO\n",
        "type": "(String -> m) -> Material.Textfield.Property m"
      },
      {
        "name": "password",
        "comment": " Sets the type of input to 'password'.\n",
        "type": "Material.Textfield.Property m"
      },
      {
        "name": "render",
        "comment": " Component render. Below is an example, assuming boilerplate setup as indicated \n  in `Material`, and a user message `ChangeAgeMsg Int`.\n\n    Textfield.render Mdl [0] model.mdl\n      [ Textfield.label \"Your age?\"\n      , Textfield.floatingLabel\n      , Textfield.value model.age\n      , Textfield.onInput (String.toInt >> ChangeAgeMsg)\n      ]\n",
        "type": "(Parts.Msg (Material.Textfield.Container c) -> m) -> Parts.Index -> Material.Textfield.Container c -> List (Material.Textfield.Property m) -> Html.Html m"
      },
      {
        "name": "rows",
        "comment": "\n  TODO\n",
        "type": "Int -> Material.Textfield.Property m"
      },
      {
        "name": "text'",
        "comment": " Sets the type of input to 'text'. (Name chosen to avoid clashing with Html.text)\n",
        "type": "Material.Textfield.Property m"
      },
      {
        "name": "textarea",
        "comment": " Creates a multiline textarea using 'textarea' element\n",
        "type": "Material.Textfield.Property m"
      },
      {
        "name": "update",
        "comment": " Component update.\n",
        "type": "Material.Textfield.Msg -> Material.Textfield.Model -> Material.Textfield.Model"
      },
      {
        "name": "value",
        "comment": " \n  TODO\n",
        "type": "String -> Material.Textfield.Property m"
      },
      {
        "name": "view",
        "comment": "\n",
        "type": "Material.Textfield.Model -> List (Material.Textfield.Property Material.Textfield.Msg) -> Html.Html Material.Textfield.Msg"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Spinner",
    "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#loading-section/spinner):\n\n> The Material Design Lite (MDL) spinner component is an enhanced replacement\n> for the classic \"wait cursor\" (which varies significantly among hardware and\n> software versions) and indicates that there is an ongoing process, the\n> results of which are not yet available. A spinner consists of an open circle\n> that changes colors as it animates in a clockwise direction, and clearly\n> communicates that a process has been started but not completed.\n\n> A spinner performs no action itself, either by its display nor when the user\n> clicks or touches it, and does not indicate a process's specific progress or\n> degree of completion. The MDL spinner component provides various types of\n> spinners, and allows you to add display effects.\n\n> Spinners are a fairly new feature of most user interfaces, and provide users\n> with a consistent visual cue about ongoing activity, regardless of hardware\n> device, operating system, or browser environment. Their design and use is an\n> important factor in the overall user experience.\n\nRefer to\n[this site](https://debois.github.io/elm-mdl/#/loading)\nfor a live demo.\n\n@docs spinner, active, singleColor\n@docs Property, Config, defaultConfig\n\n",
    "aliases": [
      {
        "name": "Config",
        "comment": " Spinner config\n",
        "args": [],
        "type": "{ active : Bool, singleColor : Bool }"
      },
      {
        "name": "Property",
        "comment": " A spinner's property.\n",
        "args": [
          "m"
        ],
        "type": "Material.Options.Property Material.Spinner.Config m"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "active",
        "comment": " Make a spinner visible\n",
        "type": "Bool -> Material.Spinner.Property m"
      },
      {
        "name": "defaultConfig",
        "comment": " Spinner default config is not `active`, not `singleColor`.\n",
        "type": "Material.Spinner.Config"
      },
      {
        "name": "singleColor",
        "comment": " Make a spinner a single color (the active color) of the stylesheet.\n",
        "type": "Bool -> Material.Spinner.Property m"
      },
      {
        "name": "spinner",
        "comment": " A spinner is a loading indicator that by default changes color and is invisible.\n\n    spinner [ active ] []\n",
        "type": "List (Material.Spinner.Property m) -> Html.Html m"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Color",
    "comment": " Material Design color palette.\n\n# Palette\n\nFrom the\n[Material Design Specification](https://www.google.com/design/spec/style/color.html#color-color-palette):\n\n> The color palette starts with primary colors and fills in the spectrum to\n> create a complete and usable palette for Android, Web, and iOS. Google suggests\n> using the 500 colors as the primary colors in your app and the other colors as\n> accents colors.\n\n@docs Color, white, black, Hue, Shade, color\n\n# Color Schemes\n\nFrom the\n[Material Design Specification](https://www.google.com/design/spec/style/color.html#color-color-palette):\n\n> [The Material Design] palette comprises primary and accent colors that can be\n> used for illustration or to develop your brand colors. They’ve been designed\n> to work harmoniously with each other.  [...] Apps that don’t have existing\n> color schemes may select colors from the material design color palette. Limit\n> your selection of colors to three hues from the primary palette and one\n> accent color from the secondary palette.\n\nThe Material Design Lite CSS supports this selection; you choose your primary\nand accent colors when loading MDL css; see\n`Material.top`. Many components can be instructed to take on one of the four hues\nmentioned above; below you'll find `Options` for constructing these scheme-dependent\ncolors.\n\n@docs primary, primaryDark, primaryContrast, accent, accentContrast\n\n# Options\n@docs background, text\n\n# Misc\n@docs hues, accentHues, shades, scheme\n",
    "aliases": [],
    "types": [
      {
        "name": "Color",
        "comment": " Type of colors.\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Hue",
        "comment": " Color palette.\n",
        "args": [],
        "cases": [
          [
            "Indigo",
            []
          ],
          [
            "Blue",
            []
          ],
          [
            "LightBlue",
            []
          ],
          [
            "Cyan",
            []
          ],
          [
            "Teal",
            []
          ],
          [
            "Green",
            []
          ],
          [
            "LightGreen",
            []
          ],
          [
            "Lime",
            []
          ],
          [
            "Yellow",
            []
          ],
          [
            "Amber",
            []
          ],
          [
            "Orange",
            []
          ],
          [
            "Brown",
            []
          ],
          [
            "BlueGrey",
            []
          ],
          [
            "Grey",
            []
          ],
          [
            "DeepOrange",
            []
          ],
          [
            "Red",
            []
          ],
          [
            "Pink",
            []
          ],
          [
            "Purple",
            []
          ],
          [
            "DeepPurple",
            []
          ]
        ]
      },
      {
        "name": "Shade",
        "comment": "\n",
        "args": [],
        "cases": [
          [
            "S50",
            []
          ],
          [
            "S100",
            []
          ],
          [
            "S200",
            []
          ],
          [
            "S300",
            []
          ],
          [
            "S400",
            []
          ],
          [
            "S500",
            []
          ],
          [
            "S600",
            []
          ],
          [
            "S700",
            []
          ],
          [
            "S800",
            []
          ],
          [
            "S900",
            []
          ],
          [
            "A100",
            []
          ],
          [
            "A200",
            []
          ],
          [
            "A400",
            []
          ],
          [
            "A700",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "accent",
        "comment": " Accent color.\n",
        "type": "Material.Color.Color"
      },
      {
        "name": "accentContrast",
        "comment": " Accent color, contrast variant.\n",
        "type": "Material.Color.Color"
      },
      {
        "name": "accentHues",
        "comment": " Primary hues as array. Mostly useful for demos.\n",
        "type": "Array.Array Material.Color.Hue"
      },
      {
        "name": "background",
        "comment": " Background color.\n",
        "type": "Material.Color.Color -> Material.Options.Property c m"
      },
      {
        "name": "black",
        "comment": " Black color.\n",
        "type": "Material.Color.Color"
      },
      {
        "name": "color",
        "comment": " Construct a specific color given a palette base hue and a shade.\n",
        "type": "Material.Color.Hue -> Material.Color.Shade -> Material.Color.Color"
      },
      {
        "name": "hues",
        "comment": " Hues as array. Mostly useful for demos.\n",
        "type": "Array.Array Material.Color.Hue"
      },
      {
        "name": "primary",
        "comment": " Primary color of the theme.\n",
        "type": "Material.Color.Color"
      },
      {
        "name": "primaryContrast",
        "comment": " Primary color, contrast variant.\n",
        "type": "Material.Color.Color"
      },
      {
        "name": "primaryDark",
        "comment": " Primary color, dark variant.\n",
        "type": "Material.Color.Color"
      },
      {
        "name": "scheme",
        "comment": " Given primary and accent base colors, compute name of appropriate MDL .css-file.\n(You are not likely to need to call this function.)\n",
        "type": "Material.Color.Hue -> Material.Color.Hue -> String"
      },
      {
        "name": "shades",
        "comment": " Shades as array. Mostly useful for demos.\n",
        "type": "Array.Array Material.Color.Shade"
      },
      {
        "name": "text",
        "comment": " Text or foreground color.\n",
        "type": "Material.Color.Color -> Material.Options.Property c m"
      },
      {
        "name": "white",
        "comment": " White color.\n",
        "type": "Material.Color.Color"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Badge",
    "comment": " From the [Material Design Lite documentation](http://www.getmdl.io/components/#badges-section):\n\n> The Material Design Lite (MDL) badge component is an onscreen notification element.\n> A badge consists of a small circle, typically containing a number or other characters,\n> that appears in proximity to another object. A badge can be both a notifier that there\n> are additional items associated with an object and an indicator of how many items there are.\n>\n> You can use a badge to unobtrusively draw the user's attention to items they might not\n> otherwise notice, or to emphasize that items may need their attention. For example:\n>\n> A \"New messages\" notification might be followed by a badge containing the number of unread messages.\n> A \"You have unpurchased items in your shopping cart\" reminder might include a badge\n> showing the number of items in the cart.\n> A \"Join the discussion!\" button might have an accompanying badge indicating the number of\n> users currently participating in the discussion.\n> A badge is almost always positioned near a link so that the user has a convenient way to access \n> the additional information indicated by the badge. However, depending on the intent, the \n> badge itself may or may not be part of the link.\n>\n> Badges are a new feature in user interfaces, and provide users with a visual clue to help them\n> discover additional relevant content. Their design and use is therefore an important\n> factor in the overall user experience.\n\nRefer to \n[this site](https://debois.github.io/elm-mdl/#/badges) \nfor a live demo. \n\n@docs add, noBackground, overlap\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "add",
        "comment": " Add a badge to the containing element.\n",
        "type": "String -> Material.Options.Property c m"
      },
      {
        "name": "noBackground",
        "comment": " No background for badge.\n",
        "type": "Material.Options.Property c m"
      },
      {
        "name": "overlap",
        "comment": " Badge overlaps text/contents. \n",
        "type": "Material.Options.Property c m"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Icon",
    "comment": " Convenience functions for producing Material Design Icons. Refer to\n[the Material Design Icons page](https://google.github.io/material-design-icons),\nor skip straight to the [Material Icons Library](https://design.google.com/icons/).\n\nThis implementation assumes that you have\n\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n      rel=\"stylesheet\">\n\nor an equivalent means of loading the icons in your HTML header. \n(`Material.top` will do this for you.)\n\n@docs i, view, size18, size24, size36, size48, onClick\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "i",
        "comment": " Render a default-sized icon with no behaviour. The\n`String` argument must be the name of a [Material Icon](https://design.google.com/icons/)\n(replace spaces with underscores).\n\nI.e., to produce a default size (24xp) \"trending flat\" icon:\n\n    import Material.Icon as Icon\n\n    icon : Html m\n    icon = Icon.i \"trending_flat\"\n",
        "type": "String -> Html.Html m"
      },
      {
        "name": "onClick",
        "comment": " Add an `on \"click\"` handler to an Icon. (You may want to use a `Button`\nwith `Button.icon` instead.)\n",
        "type": "m -> Material.Icon.Property m"
      },
      {
        "name": "size18",
        "comment": " Set icon to have size 18px. \n",
        "type": "Material.Icon.Property m"
      },
      {
        "name": "size24",
        "comment": " Set icon to have size 24px. \n",
        "type": "Material.Icon.Property m"
      },
      {
        "name": "size36",
        "comment": " Set icon to have size 36px. \n",
        "type": "Material.Icon.Property m"
      },
      {
        "name": "size48",
        "comment": " Set icon to have size 48px. \n",
        "type": "Material.Icon.Property m"
      },
      {
        "name": "view",
        "comment": " View function for icons. Supply the\n[Material Icons Library](https://design.google.com/icons/) name as\nthe first argument (replace spaces with underscores). Set the size of the\nicon with the `size..` Styles (default is 24px).  Do not use this function to\nproduce clickable icons; use icon buttons in Material.Button.icon for that.\n\n    import Material.Icon as Icon\n\n    icon : Html m\n    icon = Icon.view \"trending_flat\" [Icon.size48] []\n",
        "type": "String -> List (Material.Icon.Property m) -> Html.Html m"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Helpers",
    "comment": " Convenience functions. These are mostly trivial functions that are used\ninternally in the library; you might\nfind some of them useful. \n\n# HTML & Events\n@docs filter, blurOn, noAttr\n\n# Cmd\n@docs pure, effect, delay, fx, cssTransitionStep\n\n# Tuples\n@docs map1st, map2nd\n\n# Elm architecture\n@docs Update, Update', lift, lift'\n",
    "aliases": [
      {
        "name": "Update",
        "comment": " Standard EA update function type. \n",
        "args": [
          "model",
          "action"
        ],
        "type": "Material.Helpers.Update' model action action"
      },
      {
        "name": "Update'",
        "comment": " Variant of EA update function type, where effects may be \nlifted to a different type. \n",
        "args": [
          "model",
          "action",
          "action'"
        ],
        "type": "action -> model -> ( model, Platform.Cmd.Cmd action' )"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "blurOn",
        "comment": " Attribute which causes element to blur on given event. Example use\n\n    myButton : Html\n    myButton = \n      button \n        [ blurOn \"mouseleave\" ]\n        [ text \"Click me!\" ]\n",
        "type": "String -> Html.Attribute m"
      },
      {
        "name": "cssTransitionStep",
        "comment": " Delay a command sufficiently that you can count on triggering CSS\ntransitions.\n",
        "type": "a -> Platform.Cmd.Cmd a"
      },
      {
        "name": "delay",
        "comment": " Produce a delayed effect. Suppose you want `MyMsg` to happen 200ms after\na button is clicked:\n\n    button \n      [ onClick (delay 0.2 MyMsg) ] \n      [ text \"Click me!\" ]\n",
        "type": "Time.Time -> a -> Platform.Cmd.Cmd a"
      },
      {
        "name": "effect",
        "comment": " Add an effect to a value. Example use (supposing you have an \naction `MyMsg`): \n\n    model |> effect MyMsg\n",
        "type": "Platform.Cmd.Cmd b -> a -> ( a, Platform.Cmd.Cmd b )"
      },
      {
        "name": "filter",
        "comment": " Convert a Html element from taking a list of sub-elements to a list of\n  Maybe Html. This is convenient if you want to include certain sub-elements\n",
        "type": "(a -> List b -> c) -> a -> List (Maybe.Maybe b) -> c"
      },
      {
        "name": "fx",
        "comment": "\n  TODO\n",
        "type": "msg -> Platform.Cmd.Cmd msg"
      },
      {
        "name": "lift",
        "comment": " Convenience function for writing update-function boilerplate. Example use:\n\n  case action of \n    ...\n    ButtonsMsg a -> \n      lift .buttons (\\m x->{m|buttons=x}) ButtonsMsg Demo.Buttons.update a model\n\nThis is equivalent to the more verbose\n\n  case action of \n    ...\n    ButtonsMsg a -> \n      let \n        (buttons', fx) = \n          Demo.Buttons.update a model.buttons\n      in \n        ( { model | buttons = buttons'}\n        , Cmd.map ButtonsMsg fx\n        )\n",
        "type": "(model -> submodel) -> (model -> submodel -> model) -> (subaction -> action) -> Material.Helpers.Update submodel subaction -> subaction -> model -> ( model, Platform.Cmd.Cmd action )"
      },
      {
        "name": "lift'",
        "comment": " Variant of `lift` for effect-free components. \n",
        "type": "(model -> submodel) -> (model -> submodel -> model) -> (subaction -> submodel -> submodel) -> subaction -> model -> ( model, Platform.Cmd.Cmd action )"
      },
      {
        "name": "map1st",
        "comment": " Map the first element of a tuple. \n\n    map1st ((+) 1) (1, \"foo\") == (2, \"foo\")\n",
        "type": "(a -> c) -> ( a, b ) -> ( c, b )"
      },
      {
        "name": "map2nd",
        "comment": " Map the second element of a tuple\n\n    map2nd ((+) 1) (\"bar\", 3) == (\"bar\", 4)\n",
        "type": "(b -> c) -> ( a, b ) -> ( a, c )"
      },
      {
        "name": "noAttr",
        "comment": " Fake attribute with no effect. Useful to conditionally add attributes, e.g.,\n\n    button \n      [ if model.shouldReact then \n          onClick ReactToClick\n        else\n          noAttr\n      ]\n      [ text \"Click me!\" ]\n",
        "type": "Html.Attribute a"
      },
      {
        "name": "pure",
        "comment": " Add the trivial effect to a value. Example use:\n    \n    model |> pure\n",
        "type": "a -> ( a, Platform.Cmd.Cmd b )"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Material.Options",
    "comment": " Setting options for Material components. Refer to the `Material` module\nfor intended use. \n\n@docs Property\n\n# Constructors\n@docs cs, css, data, many, nop, when\n\n# Html\n@docs Style, styled, styled', div, span, onHover\n\n# Convenience\n@docs stylesheet\n\n# Internal\nThe following types and values are used internally in the library. \n@docs Summary, apply, collect, set\n\n",
    "aliases": [
      {
        "name": "Property",
        "comment": " Type of elm-mdl properties. (Do not confuse these with Html properties or\n`Html.Attributes.property`.)\nThe type variable `c` identifies the component the property is for. You never have to set it yourself. The type variable `d` by the type of your `Msg`s; you should \nset this yourself. \n",
        "args": [
          "c",
          "m"
        ],
        "type": "Material.Options.Internal.Property c m"
      },
      {
        "name": "Style",
        "comment": " Options for situations where there is no configuration, i.e., \nstyling a `div`.\n",
        "args": [
          "m"
        ],
        "type": "Material.Options.Property () m"
      },
      {
        "name": "Summary",
        "comment": " Contents of a `Property c m`.\n",
        "args": [
          "c",
          "m"
        ],
        "type": "{ classes : List String , css : List ( String, String ) , attrs : List (Html.Attribute m) , config : c }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "apply",
        "comment": " Apply a `Summary m`, extra properties, and optional attributes \nto a standard Html node. \n",
        "type": "Material.Options.Summary c m -> (List (Html.Attribute m) -> a) -> List (Material.Options.Property c m) -> List (Maybe.Maybe (Html.Attribute m)) -> a"
      },
      {
        "name": "collect",
        "comment": " Flatten a `Property a` into  a `Summary a`. Operates as `fold`\nover options; first two arguments are folding function and initial value. \n",
        "type": "c -> List (Material.Options.Property c m) -> Material.Options.Summary c m"
      },
      {
        "name": "cs",
        "comment": " Add an HTML class to a component. (Name chosen to avoid clashing with\nHtml.Attributes.class.)\n",
        "type": "String -> Material.Options.Property c m"
      },
      {
        "name": "css",
        "comment": " Add a CSS style to a component. \n",
        "type": "String -> String -> Material.Options.Property c m"
      },
      {
        "name": "data",
        "comment": " HTML data-* attributes. \n",
        "type": "String -> String -> Material.Options.Property c m"
      },
      {
        "name": "div",
        "comment": " Convenience function for the ultra-common case of apply elm-mdl styling to a\n`div` element. Use like this: \n\n    myDiv : Html m\n    myDiv = \n      Options.div\n        [ Color.background Color.primary\n        , Color.text Color.accentContrast\n        ]\n        [ text \"I'm in color!\" ]\n\n",
        "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
      },
      {
        "name": "many",
        "comment": " Multiple options.\n",
        "type": "List (Material.Options.Property c m) -> Material.Options.Property c m"
      },
      {
        "name": "nop",
        "comment": " Do nothing. Convenient when the absence or \npresence of Options depends dynamically on other values, e.g., \n\n    div \n      [ if model.isActive then css \"active\" else nop ]\n      [ ... ]\n",
        "type": "Material.Options.Property c m"
      },
      {
        "name": "onHover",
        "comment": " Option adding an `on \"mouseover\"` event handler to an element. \nApplicable only to `Style m`, not general Properties. \n",
        "type": "m -> Material.Options.Style m"
      },
      {
        "name": "set",
        "comment": " Set a configuration value. \n",
        "type": "(c -> c) -> Material.Options.Property c m"
      },
      {
        "name": "span",
        "comment": " Convenience function for the reasonably common case of setting attributes\nof a span element. See also `div`. \n",
        "type": "List (Material.Options.Property c m) -> List (Html.Html m) -> Html.Html m"
      },
      {
        "name": "styled",
        "comment": " Apply properties to a standard Html element. \n",
        "type": "(List (Html.Attribute m) -> a) -> List (Material.Options.Property c m) -> a"
      },
      {
        "name": "styled'",
        "comment": " Apply properties and attributes to a standard Html element.\n",
        "type": "(List (Html.Attribute m) -> a) -> List (Material.Options.Property c m) -> List (Html.Attribute m) -> a"
      },
      {
        "name": "stylesheet",
        "comment": " Construct an Html element contributing to the global stylesheet.\nThe resulting Html is a `<style>` element.  Remember to insert the resulting Html\nsomewhere. \n",
        "type": "String -> Html.Html m"
      },
      {
        "name": "when",
        "comment": " Conditional option. When the guard evaluates to `true`, the option is\napplied; otherwise it is ignored. Use like this: \n\n    Button.disabled `when` not model.isRunning\n",
        "type": "Material.Options.Property c m -> Bool -> Material.Options.Property c m"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  }
]