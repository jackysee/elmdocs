[
  {
    "name": "Select",
    "comment": " Select input with auto-complete\n\n\n# Types\n\n@docs Config, State, Msg\n\n\n# Configuration\n\n@docs newConfig, withCutoff, withOnQuery\n\n\n# Configure the clear button\n\n@docs withClearClass, withClearStyles, withClearSvgClass\n\n\n# Configure the input\n\n@docs withInputId, withInputClass, withInputStyles, withInputWrapperClass, withInputWrapperStyles\n\n\n# Configure an underline element under the input\n\n@docs withUnderlineClass, withUnderlineStyles\n\n\n# Configure the items\n\n@docs withItemClass, withItemStyles, withHighlightedItemClass, withHighlightedItemStyles\n\n\n# Configure the menu\n\n@docs withMenuClass, withMenuStyles\n\n\n# Configure the not found message\n\n@docs withNotFound, withNotFoundClass, withNotFoundShown, withNotFoundStyles\n\n\n# Configure the prompt\n\n@docs withPrompt, withPromptClass, withPromptStyles\n\n\n# Configure the Fuzzy search\n\n@docs withTransformQuery, withScoreThreshold, withFuzzySearchAddPenalty, withFuzzySearchMovePenalty, withFuzzySearchRemovePenalty, withFuzzySearchInsertPenalty, withFuzzySearchSeparators\n\n\n# State\n\n@docs newState\n\n\n# view\n\n@docs view\n\n\n# Update\n\n@docs update\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Config",
        "comment": " Opaque type that holds the configuration\n",
        "args": [
          "msg",
          "item"
        ],
        "cases": []
      },
      {
        "name": "Msg",
        "comment": " Opaque type for internal library messages\n",
        "args": [
          "item"
        ],
        "cases": []
      },
      {
        "name": "State",
        "comment": " Opaque type that holds the current state\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "newConfig",
        "comment": " Create a new configuration. This takes:\n\n  - A message to trigger when an item is selected\n\n  - A function to get a label to display from an item\n\n    Select.newConfig OnSelect .label\n\n",
        "type": "(Maybe.Maybe item -> msg) -> (item -> String) -> Select.Config msg item"
      },
      {
        "name": "newState",
        "comment": " Create a new state. You must pass a unique identifier for each select component.\n\n    {\n        ...\n        selectState = Select.newState \"select1\"\n    }\n\n",
        "type": "String -> Select.State"
      },
      {
        "name": "update",
        "comment": " Update the component state\n\n    SelectMsg subMsg ->\n        let\n            ( updated, cmd ) =\n                Select.update selectConfig subMsg model.selectState\n        in\n            ( { model | selectState = updated }, cmd )\n\n",
        "type": "Select.Config msg item -> Select.Msg item -> Select.State -> ( Select.State, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "view",
        "comment": " Render the view\n\n    Html.map SelectMsg (Select.view selectConfig model.selectState model.items selectedItem)\n\n",
        "type": "Select.Config msg item -> Select.State -> List item -> Maybe.Maybe item -> Html.Html (Select.Msg item)"
      },
      {
        "name": "withClearClass",
        "comment": " Add classes to the clear button\n\n    Select.withClearClass \"clear\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withClearStyles",
        "comment": " Add styles to the clear button\n\n    Select.withClearStyles [(\"width\", \"2rem\")] config\n\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withClearSvgClass",
        "comment": " Add classes to the clear SVG icon\n\n    Select.withClearSvgClass \"clear\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withCutoff",
        "comment": " Set the maxium number of items to show\n\n    Select.withCutoff 6 config\n\n",
        "type": "Int -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withFuzzySearchAddPenalty",
        "comment": " Add fuzzy search add penalty\n\n    Select.withFuzzySearchAddPenalty 1 config\n\n",
        "type": "Int -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withFuzzySearchInsertPenalty",
        "comment": " Add fuzzy search insert penalty\n\n    Select.withFuzzySearchInsertPenalty 1 config\n\n",
        "type": "Int -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withFuzzySearchMovePenalty",
        "comment": " Add fuzzy search move penalty\n\n    Select.withFuzzySearchMovePenalty 1000 config\n\n",
        "type": "Int -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withFuzzySearchRemovePenalty",
        "comment": " Add fuzzy search add penalty\n\n    Select.withFuzzySearchRemovePenalty 100 config\n\n",
        "type": "Int -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withFuzzySearchSeparators",
        "comment": " Add fuzzy search separators\n\n    Select.withFuzzySearchSeparators [\"|\", \" \"] config\n\n",
        "type": "List String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withHighlightedItemClass",
        "comment": " Class for the hightlighted tem\n\n    Select.withHighlightedItemClass \"red\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withHighlightedItemStyles",
        "comment": " Styles for the highlighted item\n\n    Select.withHighlightedItemStyles [(\"padding\", \"1rem\")] config\n\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withInputClass",
        "comment": " Add classes to the input\n\n    Select.withInputClass \"col-12\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withInputId",
        "comment": " Set the ID of the input\n\n    Select.withInputId \"input-id\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withInputStyles",
        "comment": " Add styles to the input\n\n    Select.withInputStyles [(\"color\", \"red\")] config\n\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withInputWrapperClass",
        "comment": " Add classes to the input wrapper (element that wraps the input and the clear button)\n\n    Select.withInputWrapperClass \"col-12\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withInputWrapperStyles",
        "comment": " Add styles to the input wrapper\n\n    Select.withInputWrapperStyles [(\"color\", \"red\")] config\n\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withItemClass",
        "comment": " Add classes to the items\n\n    Select.withItemClass \"border-bottom\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withItemStyles",
        "comment": " Add styles to the items\n\n    Select.withItemStyles [(\"color\", \"peru\")] config\n\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withMenuClass",
        "comment": " Add classes to the menu\n\n    Select.withMenuClass \"bg-white\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withMenuStyles",
        "comment": " Add styles to the menu\n\n    Select.withMenuStyles [(\"padding\", \"1rem\")] config\n\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withNotFound",
        "comment": " Text that will appear when no matches are found\n\n    Select.withNotFound \"No matches\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withNotFoundClass",
        "comment": " Class for the not found message\n\n    Select.withNotFoundClass \"red\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withNotFoundShown",
        "comment": " Hide menu when no matches found\n\n    Select.withNotFoundShown False config\n\n",
        "type": "Bool -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withNotFoundStyles",
        "comment": " Styles for the not found message\n\n    Select.withNotFoundStyles [(\"padding\", \"1rem\")] config\n\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withOnQuery",
        "comment": " Add a callback for when the query changes\n\n    Select.withOnQuery OnQuery\n\n",
        "type": "(String -> msg) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withPrompt",
        "comment": " Add a prompt text to be displayed when no element is selected\n\n    Select.withPrompt \"Select a movie\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withPromptClass",
        "comment": " Add classes to the prompt text (When no item is selected)\nSelect.withPromptClass \"prompt\" config\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withPromptStyles",
        "comment": " Add styles to prompt text\n\n    Select.withPromptStyles [(\"color\", \"red\")] config\n\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withScoreThreshold",
        "comment": " Change the threshold used for filtering matches out.\nA higher threshold will keep more matches.\nDefault is 500.\n\n    Select.withScoreThreshold 1000 config\n\n",
        "type": "Int -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withTransformQuery",
        "comment": " Transform the input query before performing the search\nReturn Nothing to prevent searching\n\n    transform : String -> Maybe String\n    transform query =\n        if String.length query < 4 then\n            Nothing\n        else\n            Just query\n\n    Select.withTransformQuery transform config\n\n",
        "type": "(String -> Maybe.Maybe String) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withUnderlineClass",
        "comment": " Add classes to the underline div\n\n    Select.withUnderlineClass \"underline\" config\n\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withUnderlineStyles",
        "comment": " Add styles to the underline div\n\n    Select.withUnderlineStyles [(\"width\", \"2rem\")] config\n\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]