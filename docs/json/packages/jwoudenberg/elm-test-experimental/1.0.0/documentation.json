[
  {
    "name": "Fuzz.Msg",
    "comment": "\n\n\n## Fuzzing Msg\n\n@docs randomWalk, from, step, end\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "end",
        "comment": " Like `step`, but instead of transitioning to a new state this ends the random walk.\n",
        "type": "Float -> Fuzz.Msg.TransitionTo state msg"
      },
      {
        "name": "from",
        "comment": " A group of transitions starting from a common state.\n",
        "type": "state -> List (Fuzz.Msg.TransitionTo state msg) -> Fuzz.Msg.StateMachine state msg"
      },
      {
        "name": "randomWalk",
        "comment": " Create a fuzzer for lists of messages.\n\nFirst define a type representing the different states your application can be in.\nThen describe how the Msg's in your application can take you from one state to another.\n\nWe've now defined a finite-state machine, a graph we can walk have a fuzzer walk across randomly.\nEach `List Msg` generated by the returned fuzzer represents one such walk.\n\nRandom walks always start in the state passed to the first `from` and end when hitting an `end`.\nIt is important that each state has a way of reaching an `end` entry, or the random walk might have no end!\n\n    type StateName\n        = Start\n        | LoggingIn\n        | Done\n\n    {-| This is the actual Msg type of your application. It is included here for the purpose of this example but would ordinarily be imported from your non-test code.\n    -}\n    type Msg\n        = OpenLogIn\n        | Input String\n        | Cancel\n        | Submit\n        | LogOut\n\n    messages : Fuzzer (List Msg)\n    messages =\n        randomWalk\n            [ from Start\n                [ step 1 OpenLogIn LoggingIn\n                ]\n            , from LoggingIn\n                [ step 0.8 (Input \"tom\") LoggingIn\n                , step 0.1 Cancel Start\n                , step 0.1 Submit Done\n                ]\n            , from Done\n                [ step 0.1 LogOut Start\n                , end 0.9\n                ]\n            ]\n\n",
        "type": "List (Fuzz.Msg.StateMachine state msg) -> Fuzz.Fuzzer (List msg)"
      },
      {
        "name": "step",
        "comment": " A transition towards a new state.\nA transition has a certain likelyhood of occuring, a Msg triggering it, and an end state.\n",
        "type": "Float -> msg -> state -> Fuzz.Msg.TransitionTo state msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]