[
  {
    "name": "Slime.Engine",
    "comment": " Engine provides a simple way to manage a growing game. To do so, it needs to be provided with a few values:\n\n    -- An entity deletor. This is composed via Slime.deleteEntity and Slime.(&->). (Entity creation is handled more lazily and therefor does not require a matching value)\n    -- A list of Systems. These are explained further later, but they basically conform to the usual ECS model.\n    -- A list of Listeners. These allow the world to be updated based on TEA messages.\n\n\n# The Engine\n@docs Engine, initEngine, engineSubs, engineUpdate, Message\n\n# System and listener options\n@docs timed, untimed, noOptions, cmds, deletes, cmdsAndDeletes\n\n# Systems\n@docs System, untimedSystem, timedSystem, systemWith, systemMap\n\n# Listeners\n@docs Listener, listener, listenerWith, listenerMap\n\n# Manual methods\n@docs applyListeners, applySystems\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Engine",
        "comment": " The Engine type is used as the first argument of applySystems and applyListeners.\n\nWith the engine, update functions can be massively simplified, in a true ECS fashion.\n",
        "args": [
          "world",
          "msg"
        ],
        "cases": []
      },
      {
        "name": "Listener",
        "comment": " A Listener constructed in a similar way to Systems with a different purpose:\naccepting messages through TEA. It has the same options as System, except Time.\n",
        "args": [
          "world",
          "msg"
        ],
        "cases": []
      },
      {
        "name": "Message",
        "comment": " Wraps messages and ticks.\n",
        "args": [
          "msg"
        ],
        "cases": [
          [
            "Tick",
            [
              "Float"
            ]
          ],
          [
            "Msg",
            [
              "msg"
            ]
          ]
        ]
      },
      {
        "name": "System",
        "comment": " A System constructed in this way will be used by Engine to update the world\nwith control over side effects (deleting entities and sending commands).\n\nEach of the types has a different function signature for different options:\n * Time: Accepts deltaTime as its first argument.\n * Commands: The return value includes messages. The extra value is included as part of a tuple.\n * Deletes: The return value includes EntityIDs which should be deleted. The extra value is included as part of a tuple.\n\nThere is also a Basic, which has no options.\n",
        "args": [
          "world",
          "msg"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "applyListeners",
        "comment": " Useful if you write your own update method. Uses listeners as defined in the\nprovided engine.\n",
        "type": "Slime.Engine.Engine world msg -> world -> msg -> ( world, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "applySystems",
        "comment": " Useful if you write your own update method. Uses systems as defined in the\nprovided engine.\n",
        "type": "Slime.Engine.Engine world msg -> world -> Float -> ( world, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "cmds",
        "comment": " Use in systemWith/listenerWith to define a system or listener with commands.\n",
        "type": "( world, Platform.Cmd.Cmd msg ) -> Slime.Engine.SystemStep world msg"
      },
      {
        "name": "cmdsAndDeletes",
        "comment": " Use in systemWith/listenerWith to define a system or listener with commands and deletes.\n",
        "type": "( world, Platform.Cmd.Cmd msg, List Slime.EntityID ) -> Slime.Engine.SystemStep world msg"
      },
      {
        "name": "deletes",
        "comment": " Use in systemWith/listenerWith to define a system or listener with deletes.\n",
        "type": "( world, List Slime.EntityID ) -> Slime.Engine.SystemStep world msg"
      },
      {
        "name": "engineSubs",
        "comment": " Takes the subscriptions for your app and wraps them for the engine. Time messages are provided by the engine.\n\nFor use with engineUpdate.\n\nExample:\n    Sub.batch [ ... ]\n        |> engineSubs\n",
        "type": "Platform.Sub.Sub msg -> Platform.Sub.Sub (Slime.Engine.Message msg)"
      },
      {
        "name": "engineUpdate",
        "comment": " Wraps up the engine in such a way that you can use it as your entire update function, if desired. Requires use of engineSubs.\n",
        "type": "Slime.Engine.Engine world msg -> Slime.Engine.Message msg -> world -> ( world, Platform.Cmd.Cmd (Slime.Engine.Message msg) )"
      },
      {
        "name": "initEngine",
        "comment": " Initializes an Engine with a deletor, a list of systems, and a list of listeners.\n",
        "type": "Slime.EntityDeletor world -> List (Slime.Engine.System world msg) -> List (Slime.Engine.Listener world msg) -> Slime.Engine.Engine world msg"
      },
      {
        "name": "listener",
        "comment": " Creates a listener with no options (no commands are created and no deletes).\n",
        "type": "(msg -> world -> world) -> Slime.Engine.Listener world msg"
      },
      {
        "name": "listenerMap",
        "comment": " Maps a listener of one message type to another.\n",
        "type": "(msg -> subMsg) -> (subMsg -> msg) -> Slime.Engine.Listener world subMsg -> Slime.Engine.Listener world msg"
      },
      {
        "name": "listenerWith",
        "comment": " Creates a listener with the given options (e.g. cmds, deletes, cmdsAndDeletes)\n",
        "type": "{ options : stepType -> Slime.Engine.SystemStep world msg } -> (msg -> world -> stepType) -> Slime.Engine.Listener world msg"
      },
      {
        "name": "noOptions",
        "comment": " Use in systemWith/listenerWith to define a system or listener with no commands or deletes.\n",
        "type": "world -> Slime.Engine.SystemStep world msg"
      },
      {
        "name": "systemMap",
        "comment": " Maps a listener of one message type to another.\n",
        "type": "(originalMsg -> msg) -> Slime.Engine.System world originalMsg -> Slime.Engine.System world msg"
      },
      {
        "name": "systemWith",
        "comment": " Creates a system with particular timing (timed or untimed) and options (e.g.\ncmds, deletes, cmdsAndDeletes).\n",
        "type": "{ timing : baseSystem -> Float -> world -> stepType , options : stepType -> Slime.Engine.SystemStep world msg } -> baseSystem -> Slime.Engine.System world msg"
      },
      {
        "name": "timed",
        "comment": " Use in systemWith to define a timed system.\n",
        "type": "(Float -> world -> step) -> Float -> world -> step"
      },
      {
        "name": "timedSystem",
        "comment": " Creates a system that accepts deltas, creates no commands or deletes.\n",
        "type": "(Float -> world -> world) -> Slime.Engine.System world msg"
      },
      {
        "name": "untimed",
        "comment": " Use in systemWith to define an untimed system.\n",
        "type": "(world -> step) -> Float -> world -> step"
      },
      {
        "name": "untimedSystem",
        "comment": " Creates a system that does not accept deltas, creates no commands or deletes.\n",
        "type": "(world -> world) -> Slime.Engine.System world msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Slime",
    "comment": " Experimental\n\nThis library provides an easy way to construct entity-component-system style\ncodeflow in Elm. It achieves this mostly by leveraging currying and getter/setters. For example:\n\n    type alias World =\n        EntitySet\n            { transforms : ComponentSet Rect\n            , balls : ComponentSet Ball\n            }\n\n    transforms : ComponentSpec Rect World\n    transforms =\n        { getter: .transforms,\n        , setter: (\\comps world -> {world | transforms = comps})\n        }\n\n\n    balls : ComponentSpec Ball World\n    balls =\n        { getter: .balls,\n        , setter: (\\comps world -> {world | balls = comps})\n        }\n\n    moveBalls : Float -> World -> World\n    moveBalls delta =\n        -- ...\n          stepEntities (entities2 balls transforms) (\\ent2 -> { ent2 | b = addVelocity ent2.a ent2.b delta })\n\nstepEntities goes through all the balls (any entity with a ball component and transform component)\nin this example and updates their location based on their velocity and the time elapsed.\n\nBecause moveBalls' type signature has no concept of the components involved, these systems can easily be\ncomposed to operate in sequence to create an ECS Engine.\n\n# Types\n@docs EntityID, EntitySet, ComponentSpec, EntitySpec, ComponentSet, EntityDeletor, Entity, Entity2, Entity3\n\n# Entity specs\n@docs entities, entities2, entities3\n\n# Updates and Maps\n@docs map, stepEntities, stepEntitiesWith\n\n# Initialization\n@docs initComponents, initIdSource\n\n# Deletion\n@docs deleteEntity, (&->)\n\n# Retrieval\n@docs getEntities, getEntities2, getEntities3, (&.), getEntityByUid, getEntity2ByUid, getEntity3ByUid, getComponentById, getComponent, hasComponent\n\n# Entity management\n@docs entityExistsByUid, getUidFromId, getIdFromUid\n\n# Updates\n@docs setEntity, setEntity2, setEntity3, forEntityById, forEntityByUid, (&=>), (&~>)\n\n# Creation\n@docs spawnEmpty, spawnEntity, spawnEntity2, spawnEntities, spawnEntities2, forNewEntity\n",
    "aliases": [
      {
        "name": "ComponentSet",
        "comment": " Include as a field in your world and initialize with `.initComponents`\n",
        "args": [
          "a"
        ],
        "type": "{ contents : Array.Array (Maybe.Maybe a) }"
      },
      {
        "name": "ComponentSpec",
        "comment": " A simple {getter, setter} record which is used as a building block for complex functions on `world`\n",
        "args": [
          "a",
          "world"
        ],
        "type": "{ getter : world -> Slime.ComponentSet a , setter : Slime.ComponentSet a -> world -> world }"
      },
      {
        "name": "Entity",
        "comment": " ",
        "args": [
          "a"
        ],
        "type": "Slime.Tagged { a : a }"
      },
      {
        "name": "Entity2",
        "comment": " ",
        "args": [
          "a",
          "b"
        ],
        "type": "Slime.Tagged { a : a, b : b }"
      },
      {
        "name": "Entity3",
        "comment": " ",
        "args": [
          "a",
          "b",
          "c"
        ],
        "type": "Slime.Tagged { a : a, b : b, c : c }"
      },
      {
        "name": "EntityDeletor",
        "comment": " ",
        "args": [
          "world"
        ],
        "type": "Slime.EntityID -> world -> world"
      },
      {
        "name": "EntityID",
        "comment": " ",
        "args": [],
        "type": "Int"
      },
      {
        "name": "EntitySet",
        "comment": " Your world should be an EntitySet. Include an `.idSource` initialized with `initIdSource`\n",
        "args": [
          "world"
        ],
        "type": "{ world | idSource : Slime.IDSource }"
      },
      {
        "name": "EntitySpec",
        "comment": " ",
        "args": [
          "ent",
          "world"
        ],
        "type": "{ getter : world -> List (Slime.Tagged ent) , setter : List (Slime.Tagged ent) -> world -> world }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "&->",
        "comment": " ",
        "type": "Slime.EntityDeletor (Slime.EntitySet world) -> Slime.ComponentSpec b (Slime.EntitySet world) -> Slime.EntityDeletor (Slime.EntitySet world)",
        "associativity": "left",
        "precedence": 1
      },
      {
        "name": "&.",
        "comment": " Convenience notation for retrieving based on an EntitySpec\n",
        "type": "world -> Slime.EntitySpec ent world -> List (Slime.Tagged ent)"
      },
      {
        "name": "&=>",
        "comment": " Sets a particular entity's component. Used with forEntityById and forEntityByUid.\nExample:\n    (_, updatedWorld) =\n        forEntityById id world\n            &=> (locations, (0, 0))\n            &=> (sizes, (2, 6))\n\n",
        "type": "( Maybe.Maybe Slime.EntityID, world ) -> ( Slime.ComponentSpec a world, a ) -> ( Maybe.Maybe Slime.EntityID, world )"
      },
      {
        "name": "&~>",
        "comment": " Updates a particular entity's component. Used with forEntityById and forEntityByUid.\n    (_, updatedWorld) =\n        forEntityById id world\n            &=> (locations, moveMe)\n            &=> (sizes, shrinkMe)\n\n",
        "type": "( Maybe.Maybe Slime.EntityID, Slime.EntitySet world ) -> ( Slime.ComponentSpec a (Slime.EntitySet world) , Maybe.Maybe a -> Maybe.Maybe a ) -> ( Maybe.Maybe Slime.EntityID, Slime.EntitySet world )"
      },
      {
        "name": "deleteEntity",
        "comment": " Use as the start of a deletion block:\n\n    deletor = deleteEntity transformSpec\n        &-> massSpec\n        &-> anotherSpec\n\nThe resulting deletor takes an EntityID and a world and clears the world of that Entity.\n",
        "type": "Slime.ComponentSpec a (Slime.EntitySet world) -> Slime.EntityDeletor (Slime.EntitySet world)"
      },
      {
        "name": "entities",
        "comment": " Defines an entity spec based on one component. These are all entities which have that component.\n",
        "type": "Slime.ComponentSpec a world -> Slime.EntitySpec { a : a } world"
      },
      {
        "name": "entities2",
        "comment": " Defines an entity spec based on two components.\nThese are all entities which have both component.\n",
        "type": "Slime.ComponentSpec a world -> Slime.ComponentSpec b world -> Slime.EntitySpec { a : a, b : b } world"
      },
      {
        "name": "entities3",
        "comment": " Defines an entity spec based on three components.\nThese are all entities which have all component.\n",
        "type": "Slime.ComponentSpec a world -> Slime.ComponentSpec b world -> Slime.ComponentSpec c world -> Slime.EntitySpec { a : a, b : b, c : c } world"
      },
      {
        "name": "entityExistsByUid",
        "comment": "\n",
        "type": "Slime.EntitySet world -> Slime.EntityID -> Bool"
      },
      {
        "name": "forEntityById",
        "comment": " Begin a chain of sets for a particular entity id.\n",
        "type": "Slime.EntityID -> world -> ( Maybe.Maybe Slime.EntityID, world )"
      },
      {
        "name": "forEntityByUid",
        "comment": " Begin a chain of sets for a particular entity id.\n",
        "type": "Slime.EntityID -> Slime.EntitySet world -> ( Maybe.Maybe Slime.EntityID, Slime.EntitySet world )"
      },
      {
        "name": "forNewEntity",
        "comment": " Begins a chain of sets for a new entity. Useful for complex entity spawning.\nExample:\n\n    (_, updatedWorld) =\n        forNewEntity world\n            &=> (locations (0, 0))\n            &=> (place (2, 6))\n",
        "type": "Slime.EntitySet world -> ( Maybe.Maybe Slime.EntityID, Slime.EntitySet world )"
      },
      {
        "name": "getComponent",
        "comment": " Simple retrieval from a component set.\n",
        "type": "Slime.ComponentSet a -> Slime.EntityID -> Maybe.Maybe a"
      },
      {
        "name": "getComponentById",
        "comment": " Try to prefer getEntity(#)ByUid where appropriate. This is useful for filters, however.\n",
        "type": "Slime.ComponentSpec a world -> Slime.EntityID -> world -> Maybe.Maybe a"
      },
      {
        "name": "getEntities",
        "comment": " Simple entity retrieval.\n",
        "type": "Slime.ComponentSpec a world -> world -> List (Slime.Entity a)"
      },
      {
        "name": "getEntities2",
        "comment": " Simple entity retrieval. An entity is only included if both components provided exist for that entity.\n",
        "type": "Slime.ComponentSpec a world -> Slime.ComponentSpec b world -> world -> List (Slime.Entity2 a b)"
      },
      {
        "name": "getEntities3",
        "comment": " Simple entity retrieval. An entity is only included if all components provided exist for that entity.\n",
        "type": "Slime.ComponentSpec a world -> Slime.ComponentSpec b world -> Slime.ComponentSpec c world -> world -> List (Slime.Entity3 a b c)"
      },
      {
        "name": "getEntity2ByUid",
        "comment": " Returns an entity from a permanent UID.\n",
        "type": "Slime.ComponentSpec a (Slime.EntitySet world) -> Slime.ComponentSpec b (Slime.EntitySet world) -> Slime.EntitySet world -> Slime.EntityID -> Maybe.Maybe (Slime.Entity2 (Maybe.Maybe a) (Maybe.Maybe b))"
      },
      {
        "name": "getEntity3ByUid",
        "comment": " Returns an entity from a permanent UID.\n",
        "type": "Slime.ComponentSpec a (Slime.EntitySet world) -> Slime.ComponentSpec b (Slime.EntitySet world) -> Slime.ComponentSpec c (Slime.EntitySet world) -> Slime.EntitySet world -> Slime.EntityID -> Maybe.Maybe (Slime.Entity3 (Maybe.Maybe a) (Maybe.Maybe b) (Maybe.Maybe c))"
      },
      {
        "name": "getEntityByUid",
        "comment": " Returns an entity from a permanent UID.\n",
        "type": "Slime.ComponentSpec a (Slime.EntitySet world) -> Slime.EntitySet world -> Slime.EntityID -> Maybe.Maybe (Slime.Entity (Maybe.Maybe a))"
      },
      {
        "name": "getIdFromUid",
        "comment": " Retrieves a permanent UID from an entity ID.\n",
        "type": "Slime.EntitySet world -> Slime.EntityID -> Maybe.Maybe Slime.EntityID"
      },
      {
        "name": "getUidFromId",
        "comment": " Retrieves an entity ID based on a permanent UID.\n",
        "type": "Slime.EntitySet world -> Slime.EntityID -> Maybe.Maybe Slime.EntityID"
      },
      {
        "name": "hasComponent",
        "comment": " Filter or helper function to check if a component exists for a given entity\n",
        "type": "Slime.ComponentSpec a world -> Slime.Tagged x -> world -> Bool"
      },
      {
        "name": "initComponents",
        "comment": " Use to create component sets.\n",
        "type": "Slime.ComponentSet a"
      },
      {
        "name": "initIdSource",
        "comment": " Use to create an ID source for an EntitySet.\n",
        "type": "Slime.IDSource"
      },
      {
        "name": "map",
        "comment": " Creates a list of something for each existing component of a given type.\n",
        "type": "Slime.ComponentSpec a world -> (a -> b) -> world -> List b"
      },
      {
        "name": "setEntity",
        "comment": " Sets the world with an entity's component updated.\n",
        "type": "Slime.ComponentSpec a world -> Slime.Entity a -> world -> world"
      },
      {
        "name": "setEntity2",
        "comment": " Sets the world with an entity's component updated.\n",
        "type": "Slime.ComponentSpec a world -> Slime.ComponentSpec b world -> Slime.Entity2 a b -> world -> world"
      },
      {
        "name": "setEntity3",
        "comment": " Sets the world with an entity's component updated.\n",
        "type": "Slime.ComponentSpec a world -> Slime.ComponentSpec b world -> Slime.ComponentSpec c world -> Slime.Entity3 a b c -> world -> world"
      },
      {
        "name": "spawnEmpty",
        "comment": " Spawns an empty Entity. Useful if you just need an Entity ID and want to\nset the components manually.\n",
        "type": "Slime.EntitySet world -> ( Slime.EntitySet world, Slime.EntityID, Slime.EntityID )"
      },
      {
        "name": "spawnEntities",
        "comment": " A convenience method to spawn multiple entities, provided as a list.\n",
        "type": "Slime.ComponentSpec a (Slime.EntitySet world) -> Slime.EntitySet world -> List { a : a } -> ( Slime.EntitySet world , List Slime.EntityID , List Slime.EntityID )"
      },
      {
        "name": "spawnEntities2",
        "comment": " A convenience method to spawn multiple entities, provided as a list.\n",
        "type": "Slime.ComponentSpec a (Slime.EntitySet world) -> Slime.ComponentSpec b (Slime.EntitySet world) -> Slime.EntitySet world -> List { a : a, b : b } -> ( Slime.EntitySet world , List Slime.EntityID , List Slime.EntityID )"
      },
      {
        "name": "spawnEntity",
        "comment": " Spawns an Entity with one component.\n",
        "type": "Slime.ComponentSpec a (Slime.EntitySet world) -> Slime.EntitySet world -> { a : a } -> ( Slime.EntitySet world, Slime.EntityID, Slime.EntityID )"
      },
      {
        "name": "spawnEntity2",
        "comment": " Spawns an Entity with two components.\n",
        "type": "Slime.ComponentSpec a (Slime.EntitySet world) -> Slime.ComponentSpec b (Slime.EntitySet world) -> Slime.EntitySet world -> { a : a, b : b } -> ( Slime.EntitySet world, Slime.EntityID, Slime.EntityID )"
      },
      {
        "name": "stepEntities",
        "comment": " Steps the entities in a world based on the entity spec and update function provided.\n",
        "type": "Slime.EntitySpec ent world -> (Slime.Tagged ent -> Slime.Tagged ent) -> world -> world"
      },
      {
        "name": "stepEntitiesWith",
        "comment": " Step entities with an extra parameter. Useful for passing through an accumulator\n(e.g. a counter or a random number generator).\n",
        "type": "Slime.EntitySpec ent world -> (( Slime.Tagged ent, x ) -> ( Slime.Tagged ent, x )) -> ( world, x ) -> ( world, x )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]