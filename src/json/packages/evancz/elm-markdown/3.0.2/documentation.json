[
  {
    "name": "Markdown",
    "comment": " A library for markdown parsing. This is just an Elm API built on top of the\n[marked](https://github.com/chjj/marked) project which focuses on speed.\n\n# Parsing Markdown\n@docs toHtml\n\n# Parsing with Custom Options\n@docs Options, defaultOptions, toHtmlWith\n",
    "aliases": [
      {
        "name": "Options",
        "comment": " Some parser options so you can tweak things for your particular case.\n\n  * `githubFlavored` &mdash; overall reasonable improvements on the original\n    markdown parser as described [here][gfm]. This includes stuff like [fenced\n    code blocks][fenced]. There are some odd parts though, such as [tables][]\n    and a setting to turn all newlines into newlines in the resulting output,\n    so there are settings to turn those on or off based on your preference.\n\n  * `defaultHighlighting` &mdash; a default language to use for code blocks that do\n    not have a language tag. So setting this to `Just \"elm\"` will treat all\n    unlabeled code blocks as Elm code. (This relies on [highlight.js][highlight]\n    as explained in the README [here](../#code-blocks).)\n\n  * `sanitize` &mdash; this determines if all HTML should be escaped. If you\n    are parsing user markdown or user input can somehow reach the markdown\n    parser, you should almost certainly turn on sanitation. If it is just you\n    writing markdown, turning sanitation off is a nice way to do some HTML\n    tricks if it is needed.\n\n  * `smartypants` &mdash; This will automatically upgrade quotes to the\n    prettier versions and turn dashes into [em dashes or en dashes][dash]\n\n\n[gfm]: https://help.github.com/articles/github-flavored-markdown/\n[fenced]: https://help.github.com/articles/github-flavored-markdown/#fenced-code-blocks\n[tables]: https://help.github.com/articles/github-flavored-markdown/#tables\n[highlight]: https://highlightjs.org/\n[dash]: http://en.wikipedia.org/wiki/Dash\n",
        "args": [],
        "type": "{ githubFlavored : Maybe.Maybe { tables : Bool, breaks : Bool } , defaultHighlighting : Maybe.Maybe String , sanitize : Bool , smartypants : Bool }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "defaultOptions",
        "comment": " The `Options` used by the `toElement` and `toHtml` functions.\n\n    { githubFlavored = Just { tables = False, breaks = False }\n    , defaultHighlighting = Nothing\n    , sanitize = False\n    , smartypants = False\n    }\n",
        "type": "Markdown.Options"
      },
      {
        "name": "toHtml",
        "comment": " Turn a markdown string into an HTML element, using the `defaultOptions`.\n\n    recipe : Html msg\n    recipe =\n       Markdown.toHtml [class \"recipe\"] \"\"\"\n\n    # Apple Pie Recipe\n\n    First, invent the universe. Then bake an apple pie.\n\n    \"\"\"\n",
        "type": "List (Html.Attribute msg) -> String -> Html.Html msg"
      },
      {
        "name": "toHtmlWith",
        "comment": " Maybe you want to parse user input into markdown. To stop them from adding\n`<script>` tags, you can use modified parsing options.\n\n    options : Options\n    options =\n        { defaultOptions | sanitize = True }\n\n    toMarkdown : String -> Html\n    toMarkdown userInput =\n        Markdown.toHtmlWith options [] userInput\n",
        "type": "Markdown.Options -> List (Html.Attribute msg) -> String -> Html.Html msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]