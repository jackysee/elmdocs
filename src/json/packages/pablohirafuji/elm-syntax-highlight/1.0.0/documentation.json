[
  {
    "name": "SyntaxHighlight",
    "comment": " Syntax highlighting in Elm.\n\n@docs toBlockHtml, toInlineHtml\n\n\n## Languages\n\n@docs elm, xml, javascript\n\n\n## Themes\n\n@docs Theme, useTheme, monokai, github\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Theme",
        "comment": " A theme defines the background and syntax colors.\n",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "elm",
        "comment": " Parse Elm syntax.\n",
        "type": "String -> Result.Result Parser.Error (List SyntaxHighlight.Line.Line)"
      },
      {
        "name": "github",
        "comment": " GitHub inspired theme.\n",
        "type": "SyntaxHighlight.Theme"
      },
      {
        "name": "javascript",
        "comment": " Parse Javascript syntax.\n",
        "type": "String -> Result.Result Parser.Error (List SyntaxHighlight.Line.Line)"
      },
      {
        "name": "monokai",
        "comment": " Monokai inspired theme.\n",
        "type": "SyntaxHighlight.Theme"
      },
      {
        "name": "toBlockHtml",
        "comment": " Transform a list of lines into a Html block. The `Maybe Int`\nargument is for showing or not line count and, if so, starting\nfrom what number.\n",
        "type": "Maybe.Maybe Int -> List SyntaxHighlight.Line.Line -> Html.Html msg"
      },
      {
        "name": "toInlineHtml",
        "comment": " Transform a list of lines into inline Html.\n",
        "type": "List SyntaxHighlight.Line.Line -> Html.Html msg"
      },
      {
        "name": "useTheme",
        "comment": " Transform a theme into Html. Any highlighted code\nwill be themed according to the chosen `Theme`.\nIf you prefer to use CSS external stylesheet, you do **not** need this,\njust copy the theme CSS into your stylesheet.\nAll themes can be found [here](https://github.com/pablohirafuji/elm-syntax-highlight/blob/master/themes.md).\n",
        "type": "SyntaxHighlight.Theme -> Html.Html msg"
      },
      {
        "name": "xml",
        "comment": " Parse XML syntax.\n",
        "type": "String -> Result.Result Parser.Error (List SyntaxHighlight.Line.Line)"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "SyntaxHighlight.Line",
    "comment": " A parsed highlighted line.\n\n@docs Line, Fragment, Color, Highlight\n\n\n## Helpers\n\n@docs highlightLines\n\n",
    "aliases": [
      {
        "name": "Fragment",
        "comment": " A fragment.\n",
        "args": [],
        "type": "{ text : String , color : SyntaxHighlight.Line.Color , isEmphasis : Bool , isStrong : Bool }"
      },
      {
        "name": "Line",
        "comment": " A line.\n",
        "args": [],
        "type": "{ fragments : List SyntaxHighlight.Line.Fragment , highlight : Maybe.Maybe SyntaxHighlight.Line.Highlight }"
      }
    ],
    "types": [
      {
        "name": "Color",
        "comment": " Possible colors.\n\nThe common uses of the color are the following:\n\n  - Default: Default color\n  - Color1: Comment\n  - Color2: Literal string, attribute value\n  - Color3: Keyword, tag, operator symbol (=+-*/...)\n  - Color4: Keyword, type signature, group symbol ({}(),)\n  - Color5: Function, attribute name\n  - Color6: Literal keyword\n  - Color7: Argument, parameter\n\n",
        "args": [],
        "cases": [
          [
            "Default",
            []
          ],
          [
            "Color1",
            []
          ],
          [
            "Color2",
            []
          ],
          [
            "Color3",
            []
          ],
          [
            "Color4",
            []
          ],
          [
            "Color5",
            []
          ],
          [
            "Color6",
            []
          ],
          [
            "Color7",
            []
          ]
        ]
      },
      {
        "name": "Highlight",
        "comment": " Highlight type.\n",
        "args": [],
        "cases": [
          [
            "Normal",
            []
          ],
          [
            "Add",
            []
          ],
          [
            "Delete",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "highlightLines",
        "comment": " Highlight lines given a highlight type, start and end index.\nIf no highlight type is given (`Nothing`), it will remove any\nhighlight from that lines.\nNegative indexes are taken starting from the *end* of the list.\n",
        "type": "Maybe.Maybe SyntaxHighlight.Line.Highlight -> Int -> Int -> List SyntaxHighlight.Line.Line -> List SyntaxHighlight.Line.Line"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]