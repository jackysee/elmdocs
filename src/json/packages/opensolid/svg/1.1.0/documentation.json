[
  {
    "name": "OpenSolid.Svg",
    "comment": " Various OpenSolid-related SVG functionality:\n\n  - [Draw](#geometry) OpenSolid 2D geometry as SVG elements\n  - [Transform](#transformations) arbitrary SVG elements using standard\n    OpenSolid transformation functions\n  - [Convert](#coordinate-transformations) SVG between different coordinate\n    systems\n\n\n## Reading this documentation\n\nFor the examples, assume that the following imports are present:\n\n    import Svg exposing (Svg)\n    import Svg.Attributes as Attributes\n    import OpenSolid.Svg as Svg\n    import OpenSolid.Geometry.Types exposing (..)\n\nAlso assume that any necessary OpenSolid modules have been imported using the\nfollowing format:\n\n    import OpenSolid.Point2d as Point2d\n\nAll examples use a Y-up coordinate system instead of SVG's Y-down (window)\ncoordinate system; they were all rendered with a final [`render2d`](#render2d)\ncall to flip the example 'upside down' for display.\n\n\n# Rendering\n\n@docs render2d\n\n\n# Primitives\n\nThe basic primitive types (points, directions, vectors) don't have an obvious\nmapping to SVG, but the functions in this section attempt to provide a simple\ndefault way to draw each of them. If you want more customization, you will\nlikely need to write your own custom helper functions (perhaps using other\nfunctions from this package); for example, a 'crosshair' style point might be\nformed from a combination of `circle2d` and `lineSegment2d` calls.\n\n@docs VectorOptions, vector2d, DirectionOptions, direction2d, PointOptions, point2d\n\n\n# Geometry\n\nThese functions turn OpenSolid values into SVG elements with geometric\nattributes such as `points` and `transform` set appropriately. Each function\nalso accepts a list of additional SVG attributes such as `fill` or `stroke` that\nshould be added to the resulting element.\n\n@docs lineSegment2d, triangle2d, polyline2d, polygon2d, arc2d, circle2d, quadraticSpline2d, cubicSpline2d\n\n\n# Text\n\n@docs text2d\n\n\n# Transformations\n\nThese functions allow you to use all the normal OpenSolid 2D transformations on\narbitrary fragments of SVG. For example,\n\n    Svg.mirrorAcross Axis2d.x\n        (Svg.lineSegment2d [] lineSegment)\n\ndraws a line segment as SVG and then mirrors that SVG fragment. This is visually\nthe same as\n\n    Svg.lineSegment2d []\n        (LineSegment2d.mirrorAcross Axis2d.x lineSegment)\n\nwhich instead mirrors the line segment first and then draws the mirrored line\nsegment as SVG.\n\nIn the above example only a single SVG element was transformed, but all of these\ntransformation functions work equally well on arbitrarily complex fragments of\nSVG such as nested groups of elements of different types:\n\n    Svg.rotateAround Point2d.origin (degrees 30)\n        (Svg.g [ Attributes.stroke \"blue\" ]\n            [ Svg.lineSegment2d [] lineSegment\n            , Svg.circle2d [] someCircle\n            , Svg.g [ Attributes.fill \"orange\" ]\n                [ Svg.triangle2d [] firstTriangle\n                , Svg.triangle2d [] secondTriangle\n                ]\n            ]\n        )\n\nIf the transformation changes frequently (an animated rotation angle, for\nexample) while the geometry itself remains constant, using an SVG transformation\ncan be more efficient since the geometry itself does not have to be recreated\n(the SVG virtual DOM only has to update a transformation matrix).\n\n@docs scaleAbout, rotateAround, translateBy, mirrorAcross\n\n\n# Coordinate transformations\n\nSimilar to the above transformations, these functions allow OpenSolid coordinate\nconversion transformations to be applied to arbitrary SVG elements.\n\n@docs relativeTo, placeIn\n\n",
    "aliases": [
      {
        "name": "DirectionOptions",
        "comment": " Options type used by the `direction2d` function.\n",
        "args": [
          "msg"
        ],
        "type": "{ length : Float , tipWidth : Float , tipLength : Float , stemAttributes : List (Svg.Attribute msg) , tipAttributes : List (Svg.Attribute msg) , groupAttributes : List (Svg.Attribute msg) }"
      },
      {
        "name": "PointOptions",
        "comment": " Options type used in the `point2d` function.\n",
        "args": [
          "msg"
        ],
        "type": "{ radius : Float, attributes : List (Svg.Attribute msg) }"
      },
      {
        "name": "VectorOptions",
        "comment": " Options type used by the `vector2d` function.\n",
        "args": [
          "msg"
        ],
        "type": "{ tipWidth : Float , tipLength : Float , stemAttributes : List (Svg.Attribute msg) , tipAttributes : List (Svg.Attribute msg) , groupAttributes : List (Svg.Attribute msg) }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "arc2d",
        "comment": " Draw an `Arc2d` as an SVG `<path>` with the given attributes.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#arc\" style=\"width: 100px; height: 110px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#arc>\n\n    arcSvg : Svg Never\n    arcSvg =\n        Svg.arc2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.strokeWidth \"5\"\n            ]\n            (Arc2d\n                { centerPoint = Point2d ( 100, 100 )\n                , startPoint = Point2d ( 150, 50 )\n                , sweptAngle = degrees 90\n                }\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> OpenSolid.Geometry.Types.Arc2d -> Svg.Svg msg"
      },
      {
        "name": "circle2d",
        "comment": " Draw a `Circle2d` as an SVG `<circle>` with the given attributes.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#circle\" style=\"width: 40px; height: 40px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#circle>\n\n    circleSvg : Svg Never\n    circleSvg =\n        Svg.circle2d\n            [ Attributes.fill \"orange\"\n            , Attributes.stroke \"blue\"\n            , Attributes.strokeWidth \"2\"\n            ]\n            (Circle2d\n                { centerPoint = Point2d ( 150, 150 )\n                , radius = 10\n                }\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> OpenSolid.Geometry.Types.Circle2d -> Svg.Svg msg"
      },
      {
        "name": "cubicSpline2d",
        "comment": " Draw a cubic spline as an SVG `<path>` with the given attributes.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#cubicSpline\" style=\"width: 190px; height: 165px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#cubicSpline>\n\n    cubicSplineSvg : Svg Never\n    cubicSplineSvg =\n        let\n            spline =\n                CubicSpline2d\n                    ( Point2d ( 50, 50 )\n                    , Point2d ( 100, 150 )\n                    , Point2d ( 150, 25 )\n                    , Point2d ( 200, 125 )\n                    )\n\n            ( p1, p2, p3, p4 ) =\n                CubicSpline2d.controlPoints spline\n\n            points =\n                [ p1, p2, p3, p4 ]\n        in\n            Svg.g [ Attributes.stroke \"blue\" ]\n                [ Svg.cubicSpline2d\n                    [ Attributes.strokeWidth \"3\"\n                    , Attributes.strokeLinecap \"round\"\n                    , Attributes.fill \"none\"\n                    ]\n                    spline\n                , Svg.polyline2d\n                    [ Attributes.strokeWidth \"1\"\n                    , Attributes.fill \"none\"\n                    , Attributes.strokeDasharray \"3 3\"\n                    ]\n                    (Polyline2d points)\n                , Svg.g [ Attributes.fill \"white\" ]\n                    (List.map (Svg.point2d { radius = 3, attributes = [] }) points)\n                ]\n\n",
        "type": "List (Svg.Attribute msg) -> OpenSolid.Geometry.Types.CubicSpline2d -> Svg.Svg msg"
      },
      {
        "name": "direction2d",
        "comment": " Draw a direction with the given options, starting from the given base point.\nOptions are the same as for `vector2d`, with the addition of `length` which\ncontrols the length of the displayed arrow (since directions have no length of\ntheir own).\n\nThe intent is that for simple cases, you can partially apply this function to\ncreate a helper function with your preferred display options 'baked in':\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#direction\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#direction>\n\n    drawDirection : Point2d -> Direction2d -> Svg Never\n    drawDirection =\n        Svg.direction2d\n            { length = 50\n            , tipLength = 7\n            , tipWidth = 7\n            , tipAttributes = [ Attributes.fill \"orange\" ]\n            , stemAttributes = []\n            , groupAttributes = [ Attributes.stroke \"blue\" ]\n            }\n\n    directionSvg : Svg Never\n    directionSvg =\n        let\n            basePoint =\n                Point2d ( 100, 100 )\n\n            directions =\n                [ 0, 15, 30, 45, 60, 75, 90 ]\n                    |> List.map degrees\n                    |> List.map Direction2d.fromAngle\n        in\n            Svg.g [] (List.map (drawDirection basePoint) directions)\n\n",
        "type": "OpenSolid.Svg.DirectionOptions msg -> OpenSolid.Geometry.Types.Point2d -> OpenSolid.Geometry.Types.Direction2d -> Svg.Svg msg"
      },
      {
        "name": "lineSegment2d",
        "comment": " Draw a `LineSegment2d` as an SVG `<polyline>` with the given attributes.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#lineSegment\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#lineSegment>\n\n    lineSegmentSvg : Svg Never\n    lineSegmentSvg =\n        Svg.lineSegment2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.strokeWidth \"5\"\n            ]\n            (LineSegment2d\n                ( Point2d ( 100, 100 )\n                , Point2d ( 200, 200 )\n                )\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> OpenSolid.Geometry.Types.LineSegment2d -> Svg.Svg msg"
      },
      {
        "name": "mirrorAcross",
        "comment": " Mirror arbitrary SVG across a given axis.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#mirrored\" style=\"width: 230px; height: 280px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#mirrored>\n\n    mirroredSvg : Svg Never\n    mirroredSvg =\n        let\n            horizontalAxis =\n                Axis2d\n                    { originPoint = Point2d ( 0, 220 )\n                    , direction = Direction2d.x\n                    }\n\n            horizontalAxisSegment =\n                LineSegment2d.along horizontalAxis 50 250\n\n            angledAxis =\n                Axis2d\n                    { originPoint = Point2d ( 0, 150 )\n                    , direction = Direction2d.fromAngle (degrees -10)\n                    }\n\n            angledAxisSegment =\n                LineSegment2d.along angledAxis 50 250\n        in\n            Svg.g []\n                [ polygonSvg\n                , Svg.mirrorAcross horizontalAxis polygonSvg\n                , Svg.mirrorAcross angledAxis polygonSvg\n                , Svg.g\n                    [ Attributes.strokeWidth \"0.5\"\n                    , Attributes.stroke \"black\"\n                    , Attributes.strokeDasharray \"3 3\"\n                    ]\n                    [ Svg.lineSegment2d [] horizontalAxisSegment\n                    , Svg.lineSegment2d [] angledAxisSegment\n                    ]\n                ]\n\n",
        "type": "OpenSolid.Geometry.Types.Axis2d -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "placeIn",
        "comment": " Take SVG defined in local coordinates relative to a given reference frame,\nand return that SVG expressed in global coordinates.\n\nThis can be useful for taking a chunk of SVG and 'stamping' it in different\npositions with different orientations:\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#placed\" style=\"width: 225px; height: 180px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#placed>\n\n    placedSvg : Svg Never\n    placedSvg =\n        let\n            stampSvg =\n                Svg.polygon2d\n                    [ Attributes.fill \"orange\"\n                    , Attributes.stroke \"blue\"\n                    , Attributes.strokeWidth \"2\"\n                    ]\n                    (Polygon2d\n                        [ Point2d.origin\n                        , Point2d ( 40, 0 )\n                        , Point2d ( 50, 25 )\n                        , Point2d ( 10, 25 )\n                        ]\n                    )\n\n            frames =\n                [ Frame2d.at (Point2d ( 25, 25 ))\n                , Frame2d.at (Point2d ( 100, 25 ))\n                , Frame2d.at (Point2d ( 175, 25 ))\n                    |> Frame2d.rotateBy (degrees 20)\n                , Frame2d.at (Point2d ( 25, 150 ))\n                , Frame2d.at (Point2d ( 100, 100 ))\n                    |> Frame2d.rotateBy (degrees 20)\n                , Frame2d.at (Point2d ( 150, 150 ))\n                    |> Frame2d.rotateBy (degrees -30)\n                ]\n        in\n            Svg.g [] (List.map (\\frame -> Svg.placeIn frame stampSvg) frames)\n\n",
        "type": "OpenSolid.Geometry.Types.Frame2d -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "point2d",
        "comment": " Draw a point as a circle with the given options.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#point\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#point>\n\n    drawPoint : Point2d -> Svg Never\n    drawPoint =\n        Svg.point2d\n            { radius = 3\n            , attributes =\n                [ Attributes.stroke \"blue\"\n                , Attributes.fill \"orange\"\n                ]\n            }\n\n    pointSvg : Svg Never\n    pointSvg =\n        let\n            points =\n                [ Point2d ( 100, 100 )\n                , Point2d ( 200, 200 )\n                , Point2d ( 110, 130 )\n                , Point2d ( 140, 180 )\n                , Point2d ( 170, 110 )\n                , Point2d ( 180, 150 )\n                , Point2d ( 110, 190 )\n                ]\n        in\n            Svg.g [] (List.map drawPoint points)\n\n",
        "type": "OpenSolid.Svg.PointOptions msg -> OpenSolid.Geometry.Types.Point2d -> Svg.Svg msg"
      },
      {
        "name": "polygon2d",
        "comment": " Draw a `Polygon2d` as an SVG `<polygon>` with the given attributes.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#polygon\" style=\"width: 120px; height: 70px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#polygon>\n\n    polygonSvg : Svg Never\n    polygonSvg =\n        Svg.polygon2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.fill \"orange\"\n            , Attributes.strokeWidth \"5\"\n            ]\n            (Polygon2d\n                [ Point2d ( 100, 200 )\n                , Point2d ( 120, 150 )\n                , Point2d ( 180, 150 )\n                , Point2d ( 200, 200 )\n                ]\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> OpenSolid.Geometry.Types.Polygon2d -> Svg.Svg msg"
      },
      {
        "name": "polyline2d",
        "comment": " Draw a `Polyline2d` as an SVG `<polyline>` with the given attributes.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#polyline\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#polyline>\n\n    polylineSvg : Svg Never\n    polylineSvg =\n        Svg.polyline2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.fill \"none\"\n            , Attributes.strokeWidth \"5\"\n            , Attributes.strokeLinecap \"round\"\n            , Attributes.strokeLinejoin \"round\"\n            ]\n            (Polyline2d\n                [ Point2d ( 100, 100 )\n                , Point2d ( 120, 200 )\n                , Point2d ( 140, 100 )\n                , Point2d ( 160, 200 )\n                , Point2d ( 180, 100 )\n                , Point2d ( 200, 200 )\n                ]\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> OpenSolid.Geometry.Types.Polyline2d -> Svg.Svg msg"
      },
      {
        "name": "quadraticSpline2d",
        "comment": " Draw a quadratic spline as an SVG `<path>` with the given attributes.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#quadraticSpline\" style=\"width: 130px; height: 130px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#quadraticSpline>\n\n    quadraticSplineSvg : Svg Never\n    quadraticSplineSvg =\n        let\n            spline =\n                QuadraticSpline2d\n                    ( Point2d ( 50, 50 )\n                    , Point2d ( 100, 150 )\n                    , Point2d ( 150, 100 )\n                    )\n\n            ( p1, p2, p3 ) =\n                QuadraticSpline2d.controlPoints spline\n\n            points =\n                [ p1, p2, p3 ]\n        in\n            Svg.g [ Attributes.stroke \"blue\" ]\n                [ Svg.quadraticSpline2d\n                    [ Attributes.strokeWidth \"3\"\n                    , Attributes.strokeLinecap \"round\"\n                    , Attributes.fill \"none\"\n                    ]\n                    spline\n                , Svg.polyline2d\n                    [ Attributes.strokeWidth \"1\"\n                    , Attributes.fill \"none\"\n                    , Attributes.strokeDasharray \"3 3\"\n                    ]\n                    (Polyline2d points)\n                , Svg.g [ Attributes.fill \"white\" ]\n                    (List.map (Svg.point2d { radius = 3, attributes = [] }) points)\n                ]\n\n",
        "type": "List (Svg.Attribute msg) -> OpenSolid.Geometry.Types.QuadraticSpline2d -> Svg.Svg msg"
      },
      {
        "name": "relativeTo",
        "comment": " Convert SVG expressed in global coordinates to SVG expressed in coordinates\nrelative to a given reference frame. Using `relativeTo` can be useful for\ntransforming between model space and screen space - SVG coordinates start in the\ntop left, so positive Y is down, while in mathematical/geometric contexts\npositive Y is usually up.\n\nFor example, you might develop an SVG scene in a coordinate system where X and Y\neach range from 0 to 300 and positive Y is up. To turn this into a 300x300 SVG\ndrawing, first define the top-left SVG frame (coordinate system) in terms of\nthe model coordinate system:\n\n    topLeftFrame =\n        Frame2d\n            { originPoint = Point2d ( 0, 300 )\n            , xDirection = Direction2d.positiveX\n            , yDirection = Direction2d.negativeY\n            }\n\n(As expressed in the model frame, the top-left SVG frame is at the point\n(0, 300) and its Y direction is equal to the global negative Y direction.) If\n`scene` is an SVG element representing your scene, you could then transform it\ninto top-left SVG window coordinates and render the result to HTML with\n\n    Svg.svg [ Attributes.width \"300\", Attributes.height \"300\" ]\n        [ Svg.relativeTo topLeftFrame scene ]\n\n",
        "type": "OpenSolid.Geometry.Types.Frame2d -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "render2d",
        "comment": " Render some SVG to an HTML `<svg>` element, clipping to the given bounding\nbox. It is assumed that the SVG is already in pixel units, so the bounding box\nis also used to set the width and height of the resulting `<svg>` element.\n\nIn addition, it is assumed that the SVG has been drawn in a coordinate system\nwith positive X to the right and positive Y up, so this function will flip the\ncoordinate system so that coordinates start at the top-left corner as required.\n\n",
        "type": "OpenSolid.Geometry.Types.BoundingBox2d -> Svg.Svg msg -> Html.Html msg"
      },
      {
        "name": "rotateAround",
        "comment": " Rotate arbitrary SVG around a given point by a given angle.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#rotated\" style=\"width: 140px; height: 140px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#rotated>\n\n    rotatedSvg : Svg Never\n    rotatedSvg =\n        let\n            angles =\n                List.range 0 9\n                    |> List.map (\\n -> degrees 30 * toFloat n)\n\n            referencePoint =\n                Point2d ( 200, 150 )\n\n            referencePointSvg =\n                Svg.circle2d [ Attributes.fill \"black\" ]\n                    (Circle2d { centerPoint = referencePoint, radius = 3 })\n\n            rotatedCircle : Float -> Svg Never\n            rotatedCircle angle =\n                Svg.rotateAround referencePoint angle circleSvg\n        in\n            Svg.g [] (referencePointSvg :: List.map rotatedCircle angles)\n\n",
        "type": "OpenSolid.Geometry.Types.Point2d -> Float -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "scaleAbout",
        "comment": " Scale arbitrary SVG around a given point by a given scale.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#scaled\" style=\"width: 160px; height: 160px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#scaled>\n\n    scaledSvg : Svg Never\n    scaledSvg =\n        let\n            scales =\n                [ 1.0, 1.5, 2.25 ]\n\n            referencePoint =\n                Point2d ( 100, 100 )\n\n            referencePointSvg =\n                Svg.circle2d [ Attributes.fill \"black\" ]\n                    (Circle2d { centerPoint = referencePoint, radius = 3 })\n\n            scaledCircle : Float -> Svg Never\n            scaledCircle scale =\n                Svg.scaleAbout referencePoint scale circleSvg\n        in\n            Svg.g [] (referencePointSvg :: List.map scaledCircle scales)\n\nNote how *everything* is scaled, including the stroke width of the circles. This\nmay or may not be what you want; if you wanted the same stroke width on all\ncircles, you could instead scale the `Circle2d` values themselves using\n`Circle2d.scaleAbout` and then draw the scaled circles with a specific stroke\nwidth using `Svg.circle2d`.\n\n",
        "type": "OpenSolid.Geometry.Types.Point2d -> Float -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "text2d",
        "comment": " Draw a string of text with the given attributes at the given point. You can\nuse the SVG [`textAnchor`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/text-anchor)\nand [`alignmentBaseline`](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/alignment-baseline)\nattributes to align the text relative to the given point as desired.\n\nThe wrinkle is that this function assumes that you are constructing your diagram\nin a coordinate system where positive X is to the right and positive Y is up. As\na result, it will actually draw the text *upside down*, assuming that you will\neventually flip your entire diagram upside down again to convert it to the\nY-down coordinate system used by SVG (perhaps by using `render2d`).\n\nNote that you can apply all the usual transformations to SVG text just like any\nother SVG element!\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#text\" style=\"width: 220px; height: 170px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#text>\n\n    drawText : Point2d -> String -> String -> String -> Svg Never\n    drawText point tag anchor baseline =\n        Svg.g []\n            [ Svg.point2d\n                { radius = 2\n                , attributes = [ Attributes.fill \"orange\" ]\n                }\n                point\n            , Svg.text2d\n                [ Attributes.textAnchor anchor\n                , Attributes.alignmentBaseline baseline\n                , Attributes.fill \"blue\"\n                ]\n                point\n                (tag ++ \": \" ++ anchor ++ \"/\" ++ baseline)\n            ]\n\n    textSvg : Svg Never\n    textSvg =\n        let\n            p1 =\n                Point2d ( 100, 100 )\n\n            p2 =\n                Point2d ( 300, 145 )\n\n            p3 =\n                Point2d ( 175, 190 )\n\n            p4 =\n                Point2d ( 300, 250 )\n        in\n            Svg.g []\n                [ drawText p1 \"p1\" \"start\" \"baseline\"\n                , drawText p2 \"p2\" \"end\" \"middle\"\n                    |> Svg.scaleAbout p2 1.33\n                , drawText p3 \"p3\" \"middle\" \"baseline\"\n                    |> Svg.mirrorAcross\n                        (Axis2d\n                            { originPoint = p3\n                            , direction = Direction2d.x\n                            }\n                        )\n                , drawText p4 \"p4\" \"end\" \"hanging\"\n                    |> Svg.rotateAround p4 (degrees 10)\n                ]\n\n",
        "type": "List (Svg.Attribute msg) -> OpenSolid.Geometry.Types.Point2d -> String -> Svg.Svg msg"
      },
      {
        "name": "translateBy",
        "comment": " Translate arbitrary SVG by a given displacement.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#translated\" style=\"width: 128px; height: 230px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#translated>\n\n    translatedSvg : Svg Never\n    translatedSvg =\n        Svg.g []\n            [ polylineSvg\n            , Svg.translateBy (Vector2d ( 0, 40 )) polylineSvg\n            , Svg.translateBy (Vector2d ( 5, -60 )) polylineSvg\n            ]\n\n",
        "type": "OpenSolid.Geometry.Types.Vector2d -> Svg.Svg msg -> Svg.Svg msg"
      },
      {
        "name": "triangle2d",
        "comment": " Draw a `Triangle2d` as an SVG `<polygon>` with the given attributes.\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#triangle\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#triangle>\n\n    triangleSvg : Svg Never\n    triangleSvg =\n        Svg.triangle2d\n            [ Attributes.stroke \"blue\"\n            , Attributes.strokeWidth \"10\"\n            , Attributes.strokeLinejoin \"round\"\n            , Attributes.fill \"orange\"\n            ]\n            (Triangle2d\n                ( Point2d ( 100, 100 )\n                , Point2d ( 200, 100 )\n                , Point2d ( 100, 200 )\n                )\n            )\n\n",
        "type": "List (Svg.Attribute msg) -> OpenSolid.Geometry.Types.Triangle2d -> Svg.Svg msg"
      },
      {
        "name": "vector2d",
        "comment": " Draw a vector with the given options, starting from the given base point.\nNothing will be drawn if the vector length is zero. Vectors are drawn as an\narrow with a stem line and a tip triangle and have the following options:\n\n  - `tipWidth` is the width of the tip triangle\n  - `tipLength` is the length of the tip triangle\n  - `stemAttributes` are applied to the stem line\n  - `tipAttributes` are applied to the tip triangle\n  - `groupAttributes` are applied to the group formed by the stem line and\n    tip triangle (the entire arrow)\n\n<iframe src=\"https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#vector\" style=\"width: 120px; height: 120px\" scrolling=no frameborder=0></iframe>\n<https://opensolid.github.io/images/svg/1.1/DocumentationExamples.html#vector>\n\n    vectorSvg : Svg Never\n    vectorSvg =\n        Svg.vector2d\n            { tipLength = 30\n            , tipWidth = 15\n            , tipAttributes =\n                [ Attributes.fill \"orange\"\n                , Attributes.stroke \"blue\"\n                , Attributes.strokeWidth \"2\"\n                ]\n            , stemAttributes =\n                [ Attributes.stroke \"blue\"\n                , Attributes.strokeWidth \"3\"\n                , Attributes.strokeDasharray \"3 3\"\n                ]\n            , groupAttributes = []\n            }\n            (Point2d ( 100, 100 ))\n            (Vector2d ( 100, 100 ))\n\n",
        "type": "OpenSolid.Svg.VectorOptions msg -> OpenSolid.Geometry.Types.Point2d -> OpenSolid.Geometry.Types.Vector2d -> Svg.Svg msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]