[
  {
    "name": "GenericSet",
    "comment": " A set of unique values. The values can be any type. The builder functions\ntake a comparer function that takes two values and returns an Order.\n\nInsert, remove, and query operations all take *O(log n)* time. GenericSet equality with\n`(==)` is unreliable and should not be used.\n\n# Sets\n@docs GenericSet\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
    "aliases": [],
    "types": [
      {
        "name": "GenericSet",
        "comment": " Represents a set of unique values. So `(GenericSet Int)` is a set of integers and\n`(GenericSet String)` is a set of strings.\n",
        "args": [
          "t"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "diff",
        "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set. Keeps the comparer from the first set.\n",
        "type": "GenericSet.GenericSet a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
      },
      {
        "name": "empty",
        "comment": " Create an empty set using the given comparer.\n",
        "type": "(a -> a -> Basics.Order) -> GenericSet.GenericSet a"
      },
      {
        "name": "filter",
        "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
        "type": "(a -> Bool) -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
      },
      {
        "name": "foldl",
        "comment": " Fold over the values in a set, in order from lowest to highest (by the\ncomparer).\n",
        "type": "(a -> b -> b) -> b -> GenericSet.GenericSet a -> b"
      },
      {
        "name": "foldr",
        "comment": " Fold over the values in a set, in order from highest to lowest (by the\ncomparer).\n",
        "type": "(a -> b -> b) -> b -> GenericSet.GenericSet a -> b"
      },
      {
        "name": "fromList",
        "comment": " Convert a list into a set, removing any duplicates, using the given\ncomparer.\n",
        "type": "(a -> a -> Basics.Order) -> List a -> GenericSet.GenericSet a"
      },
      {
        "name": "insert",
        "comment": " Insert a value into a set.\n",
        "type": "a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
      },
      {
        "name": "intersect",
        "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\nKeeps the comparer from the first set.\n",
        "type": "GenericSet.GenericSet a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
      },
      {
        "name": "isEmpty",
        "comment": " Determine if a set is empty.\n",
        "type": "GenericSet.GenericSet a -> Bool"
      },
      {
        "name": "map",
        "comment": " Map a function onto a set, creating a new set with no duplicates and a new\ncomparer.\n",
        "type": "(b -> b -> Basics.Order) -> (a -> b) -> GenericSet.GenericSet a -> GenericSet.GenericSet b"
      },
      {
        "name": "member",
        "comment": " Determine if a value is in a set.\n",
        "type": "a -> GenericSet.GenericSet a -> Bool"
      },
      {
        "name": "partition",
        "comment": " Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n",
        "type": "(a -> Bool) -> GenericSet.GenericSet a -> ( GenericSet.GenericSet a, GenericSet.GenericSet a )"
      },
      {
        "name": "remove",
        "comment": " Remove a value from a set. If the value is not found, no changes are made.\n",
        "type": "a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
      },
      {
        "name": "singleton",
        "comment": " Create a set with one value using the given comparer.\n",
        "type": "(a -> a -> Basics.Order) -> a -> GenericSet.GenericSet a"
      },
      {
        "name": "size",
        "comment": " Determine the number of elements in a set.\n",
        "type": "GenericSet.GenericSet a -> Int"
      },
      {
        "name": "toList",
        "comment": " Convert a set into a list, sorted by the comparer.\n",
        "type": "GenericSet.GenericSet a -> List a"
      },
      {
        "name": "union",
        "comment": " Get the union of two sets. Keep all values. Keep the comparer from the\nfirst set.\n",
        "type": "GenericSet.GenericSet a -> GenericSet.GenericSet a -> GenericSet.GenericSet a"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "GenericDict",
    "comment": " A dictionary mapping unique keys to values. The keys can be any type. The\nbuilder functions take a comparer function that takes two keys and returns an\nOrder.\n\nInsert, remove, and query operations all take *O(log n)* time. Dictionary\nequality with `(==)` is unreliable and should not be used.\n\n# Dictionaries\n@docs GenericDict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n",
    "aliases": [],
    "types": [
      {
        "name": "GenericDict",
        "comment": " A dictionary of keys and values. So a `(GenericDict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n",
        "args": [
          "k",
          "v"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "diff",
        "comment": " Keep a key-value pair when its key does not appear in the second\ndictionary. Keep the comparer from the first dictionary.\n",
        "type": "GenericDict.GenericDict k v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
      },
      {
        "name": "empty",
        "comment": " Create an empty dictionary using the given comparer.\n",
        "type": "(k -> k -> Basics.Order) -> GenericDict.GenericDict k v"
      },
      {
        "name": "filter",
        "comment": " Keep a key-value pair when it satisfies a predicate.\n",
        "type": "(k -> v -> Bool) -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
      },
      {
        "name": "foldl",
        "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key (by the comparer).\n",
        "type": "(k -> v -> b -> b) -> b -> GenericDict.GenericDict k v -> b"
      },
      {
        "name": "foldr",
        "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key (by the comparer).\n",
        "type": "(k -> v -> b -> b) -> b -> GenericDict.GenericDict k v -> b"
      },
      {
        "name": "fromList",
        "comment": " Convert an association list into a dictionary using the given comparer.\n",
        "type": "(k -> k -> Basics.Order) -> List ( k, v ) -> GenericDict.GenericDict k v"
      },
      {
        "name": "get",
        "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList compare [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\n",
        "type": "k -> GenericDict.GenericDict k v -> Maybe.Maybe v"
      },
      {
        "name": "insert",
        "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision.\n",
        "type": "k -> v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
      },
      {
        "name": "intersect",
        "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary. Keep the comparer from\nthe first dictionary.\n",
        "type": "GenericDict.GenericDict k v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
      },
      {
        "name": "isEmpty",
        "comment": " Determine if a dictionary is empty.\n\n    isEmpty (empty compare) == True\n",
        "type": "GenericDict.GenericDict k v -> Bool"
      },
      {
        "name": "keys",
        "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    keys (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [0,1]\n",
        "type": "GenericDict.GenericDict k v -> List k"
      },
      {
        "name": "map",
        "comment": " Apply a function to all values in a dictionary.\n",
        "type": "(k -> a -> b) -> GenericDict.GenericDict k a -> GenericDict.GenericDict k b"
      },
      {
        "name": "member",
        "comment": " Determine if a key is in a dictionary.\n",
        "type": "k -> GenericDict.GenericDict k v -> Bool"
      },
      {
        "name": "partition",
        "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
        "type": "(k -> v -> Bool) -> GenericDict.GenericDict k v -> ( GenericDict.GenericDict k v, GenericDict.GenericDict k v )"
      },
      {
        "name": "remove",
        "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made.\n",
        "type": "k -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
      },
      {
        "name": "singleton",
        "comment": " Create a dictionary with one key-value pair, using the given comparer.\n",
        "type": "(k -> k -> Basics.Order) -> k -> v -> GenericDict.GenericDict k v"
      },
      {
        "name": "size",
        "comment": " Determine the number of key-value pairs in the dictionary.\n",
        "type": "GenericDict.GenericDict k v -> Int"
      },
      {
        "name": "toList",
        "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys.\n",
        "type": "GenericDict.GenericDict k v -> List ( k, v )"
      },
      {
        "name": "union",
        "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary. Keep the comparer from the first dictionary.\n",
        "type": "GenericDict.GenericDict k v -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
      },
      {
        "name": "update",
        "comment": " Update the value of a dictionary for a specific key with a given function.\n",
        "type": "k -> (Maybe.Maybe v -> Maybe.Maybe v) -> GenericDict.GenericDict k v -> GenericDict.GenericDict k v"
      },
      {
        "name": "values",
        "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    values (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [\"Alice\", \"Bob\"]\n",
        "type": "GenericDict.GenericDict k v -> List v"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]