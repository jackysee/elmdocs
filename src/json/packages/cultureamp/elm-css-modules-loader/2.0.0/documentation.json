[
  {
    "name": "CssModules",
    "comment": " This library lets you reference classes defined in CSS modules in your Elm\nviews, and then have the actual class names injected into your Elm modules by\nWebpack at build time.\n\n@docs css\n@docs Helpers\n",
    "aliases": [
      {
        "name": "Helpers",
        "comment": " A set of functions for accessing the class names in a CSS module.\n\n`class` and `classList` are drop-in replacements for their counterparts in\n`Html.Attributes`, except they take a record accessor to specify a class name\nfrom your CSS module (e.g. `.someClass`).\n\n    view =\n        div\n            [ classList\n                [ (.someClass, True)\n                , (.anotherClass, False)\n                ]\n            ]\n\n`toString` lets you obtain the raw `String` for a given class name, which you\nmight need if you're mixing CSS Module classes together with plain string class\nnames.\n\n",
        "args": [
          "classes",
          "msg"
        ],
        "type": "{ class : (classes -> String) -> Html.Attribute msg , classList : List ( classes -> String, Bool ) -> Html.Attribute msg , toString : (classes -> String) -> String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "css",
        "comment": " Use a CSS module in your Elm application.\n\n    { class, classList, toString } = css \"./styles.css\"\n        { someClass = \"\"\n        , anotherClass = \"\"\n        }\n\n    view =\n        div [ class .someClass ]\n\nThis function returns a record, containing functions for accessing the CSS\nmodule’s class names. See [`Helpers`](#Helpers) for a description of these\nfunctions.\n\nThe CSS filename’s path is relative to either 1) a Webpack module root\ndirectory, or 2) the JavaScript file in which your top-level Elm module is\nreferenced (in which case the path should begin with with `./`).\n\n**Important:** The CSS filename must be a literal string.\n\nEach of the classes in the list may be set to any string, but it’s probably\neasiest just to leave them as empty strings, since these will be replaced with\nthe actual class names by the Webpack loader at build time.\n\n**Warning:** Currently, if you list a class that is not defined in the CSS\nmodule, it will receive a value of `undefined` at runtime, which is likely to\nresult in `class=\"undefined\"`.\n\n",
        "type": "String -> classes -> CssModules.Helpers classes msg"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]