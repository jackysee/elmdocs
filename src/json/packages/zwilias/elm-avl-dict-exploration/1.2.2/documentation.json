[
  {
    "name": "Dict.AVL",
    "comment": " Dict.AVL is an alternative Dict implementation backed by an AVL tree rather\nthan a red black tree. It offers much better write performance at the cost of\nmarginally worse deletion performance and about on-par retrieval performance.\n\nIts API is exactly the same as that of the core Dict, with *one* difference:\nchecking for equality. With core's Dict, there is a special case in the `==`\noperator, which we can't use for our Dict. As such, we expose an `eq` function\nthat can be used to check for equality of 2 Dicts.\n\n---\n\nA dictionary mapping unique keys to values. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\nInsert, remove, and query operations all take *O(log n)* time.\n\n# Dictionaries\n@docs Dict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs isEmpty, member, get, size, eq\n\n# Lists\n@docs keys, values, toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n\n# Combine\n@docs union, intersect, diff, merge\n\n# Checks\n\nIn addition to the general API described here, we also expose two function that\ncan be used to check the internal consistency of the AVL tree backing the Dict.\nThese should *always* return True, which is what our test suite is testing.\n@docs isValidBst, isValidAvl\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Dict",
        "comment": " A dictionary of keys and values. So a `(Dict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n",
        "args": [
          "k",
          "v"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "diff",
        "comment": " Keep a key-value pair when its key does not appear in the second dictionary.\n\n    >>> diff\n    ...    (fromList [ ( 1, \"a\" ), ( 3, \"b\" ), ( 5, \"c\" ) ])\n    ...    (fromList [ ( 2, \"x\" ), ( 3, \"y\" ), ( 4, \"z\" ) ])\n    ... |> toList\n    [ ( 1, \"a\" )\n    , ( 5, \"c\" )\n    ]\n",
        "type": "Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v"
      },
      {
        "name": "empty",
        "comment": " Create an empty dictionary.\n\n    >>> empty |> toList\n    []\n\n    >>> insert 0 \"value\" empty |> toList\n    [ ( 0, \"value\" )]\n",
        "type": "Dict.AVL.Dict k v"
      },
      {
        "name": "eq",
        "comment": " Check if two dicts are equal.\n\nCore's Dict is special cased in the `==` operator. Since the only way to get\nthat same special casing is by using the exact same internal layout for the tree\n(so that it is compatible with `_elm_lang$core$Dict$toList`), it seems\npreferable to expose an `eq` function instead and *hope* people don't forget to\nuse it.\n\n    >>> fromList [ ( 1, 1 ), ( 2, 2 ) ]\n    ... |> eq (fromList [ ( 2, 2 ), ( 1, 1 ) ])\n    True\n\n\n    >>> fromList [ ( 1, 1 ), ( 2, 2 ) ]\n    ... |> eq empty\n    False\n\n",
        "type": "Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v -> Bool"
      },
      {
        "name": "filter",
        "comment": " Keep a key-value pair when it satisfies a predicate.\n\n    >>> fromList [ ( 1, \"first\" ), ( 2, \"second\" ) ]\n    ... |> filter (\\k v -> k > 1)\n    ... |> toList\n    [ ( 2, \"second\" ) ]\n",
        "type": "(comparable -> v -> Bool) -> Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v"
      },
      {
        "name": "foldl",
        "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key.\n\n    >>> fromList [ ( 1, \"first\" ), ( 2, \"second\" ) ]\n    ... |> foldl (\\key value acc -> (key, value) :: acc) []\n    [ ( 2, \"second\" )\n    , ( 1, \"first\" )\n    ]\n",
        "type": "(k -> v -> a -> a) -> a -> Dict.AVL.Dict k v -> a"
      },
      {
        "name": "foldr",
        "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key.\n\n    >>> fromList [ ( 1, \"first\" ), ( 2, \"second\" ) ]\n    ... |> foldr (\\key value acc -> (key, value) :: acc) []\n    [ ( 1, \"first\" )\n    , ( 2, \"second\" )\n    ]\n",
        "type": "(k -> v -> a -> a) -> a -> Dict.AVL.Dict k v -> a"
      },
      {
        "name": "fromList",
        "comment": " Convert an association list into a dictionary.\n\n    >>> fromList [ ( \"key\", \"value\" ) ]\n    ... |> eq (singleton \"key\" \"value\")\n    True\n",
        "type": "List ( comparable, v ) -> Dict.AVL.Dict comparable v"
      },
      {
        "name": "get",
        "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    >>> fromList [ ( \"Tom\", \"Cat\" ), ( \"Jerry\", \"Mouse\" ) ]\n    ... |> get \"Tom\"\n    Just \"Cat\"\n\n    >>> fromList [ ( \"Tom\", \"Cat\" ), ( \"Jerry\", \"Mouse\" ) ]\n    ... |> get \"Jerry\"\n    Just \"Mouse\"\n\n    >>> fromList [ ( \"Tom\", \"Cat\" ), ( \"Jerry\", \"Mouse\" ) ]\n    ... |> get \"Spike\"\n    Nothing\n\n",
        "type": "comparable -> Dict.AVL.Dict comparable v -> Maybe.Maybe v"
      },
      {
        "name": "insert",
        "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision.\n\n    >>> insert 1 \"val\" empty\n    ... |> toList\n    [ ( 1, \"val\" ) ]\n\n    >>> singleton 1 \"original\"\n    ... |> insert 1 \"updated\"\n    ... |> toList\n    [ ( 1, \"updated\" ) ]\n",
        "type": "comparable -> v -> Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v"
      },
      {
        "name": "intersect",
        "comment": " Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary.\n\n    >>> intersect\n    ...    (fromList [ ( 1, \"a\" ), ( 3, \"b\" ), ( 5, \"c\" ) ])\n    ...    (fromList [ ( 2, \"x\" ), ( 3, \"y\" ), ( 4, \"z\" ) ])\n    ... |> toList\n    [ ( 3, \"b\" ) ]\n",
        "type": "Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v"
      },
      {
        "name": "isEmpty",
        "comment": " Determine if a dictionary is empty.\n\n    >>> isEmpty empty\n    True\n\n    >>> singleton 1 \"value\"\n    ... |> isEmpty\n    False\n",
        "type": "Dict.AVL.Dict k v -> Bool"
      },
      {
        "name": "isValidAvl",
        "comment": " Checks whether a given Dict is a valid AVL tree internally. Should always\nbe true.\n\n    >>> isValidAvl <| fromList [ ( 1, () ), ( 2, () ), ( 0, () ) ]\n    True\n\n    >>> isValidAvl empty\n    True\n",
        "type": "Dict.AVL.Dict comparable v -> Bool"
      },
      {
        "name": "isValidBst",
        "comment": " Checks whether a given Dict is a valid binary search tree internally.\nShould always be true.\n\n    >>> isValidBst <| fromList [ ( 1, () ), ( 2, () ), ( 0, () ) ]\n    True\n\n    >>> isValidBst empty\n    True\n",
        "type": "Dict.AVL.Dict comparable v -> Bool"
      },
      {
        "name": "keys",
        "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    >>> fromList [ ( 0, \"Alice\" ), ( 1, \"Bob\" ) ]\n    ... |> keys\n    [ 0\n    , 1\n    ]\n",
        "type": "Dict.AVL.Dict comparable v -> List comparable"
      },
      {
        "name": "map",
        "comment": " Apply a function to all values in a dictionary.\n\n    >>> singleton \"key\" \"value\"\n    ... |> map (\\k v -> String.toUpper v)\n    ... |> toList\n    [ ( \"key\", \"VALUE\" ) ]\n",
        "type": "(comparable -> a -> b) -> Dict.AVL.Dict comparable a -> Dict.AVL.Dict comparable b"
      },
      {
        "name": "member",
        "comment": " Determine if a key is in a dictionary.\n\n    >>> fromList [ ( 1, 1 ), ( 2, 2 ) ]\n    ... |> member 1\n    True\n\n    >>> fromList [ ( 1, 1 ), ( 2, 2 ) ]\n    ... |> member 3\n    False\n",
        "type": "comparable -> Dict.AVL.Dict comparable v -> Bool"
      },
      {
        "name": "merge",
        "comment": " The most general way of combining two dictionaries. You provide three\naccumulators for when a given key appears:\n\n1. Only in the left dictionary.\n2. In both dictionaries.\n3. Only in the right dictionary.\n\nYou then traverse all the keys from lowest to highest, building up whatever\nyou want.\n\n    >>> merge\n    ...     (\\k v ( inLeft, inBoth, inRight ) ->\n    ...         ( ( k, v ) :: inLeft\n    ...         , inBoth\n    ...         , inRight) )\n    ...     (\\k vLeft vRight ( inLeft, inBoth, inRight ) ->\n    ...         ( inLeft\n    ...         , ( k, vLeft, vRight ) :: inBoth\n    ...         , inRight) )\n    ...     (\\k v ( inLeft, inBoth, inRight ) ->\n    ...         ( inLeft\n    ...         , inBoth\n    ...         , ( k, v ) :: inRight) )\n    ...     (fromList [ ( 1, \"a\" ), ( 3, \"b\" ), ( 5, \"c\" ) ])\n    ...     (fromList [ ( 2, \"x\" ), ( 3, \"y\" ), ( 4, \"z\" ) ])\n    ...     ( [], [], [] )\n    ( [ ( 5, \"c\" ), ( 1, \"a\" ) ]\n    , [ ( 3, \"b\", \"y\" ) ]\n    , [ ( 4, \"z\" ), ( 2, \"x\" ) ]\n    )\n",
        "type": "(comparable -> a -> result -> result) -> (comparable -> a -> b -> result -> result) -> (comparable -> b -> result -> result) -> Dict.AVL.Dict comparable a -> Dict.AVL.Dict comparable b -> result -> result"
      },
      {
        "name": "partition",
        "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n\n    >>> fromList [ (1, \"first\"), (2, \"second\") ]\n    ... |> partition (\\k v -> k < 2)\n    ... |> Tuple.mapFirst toList\n    ... |> Tuple.mapSecond toList\n    ( [ ( 1, \"first\" ) ]\n    , [ ( 2, \"second\" ) ]\n    )\n",
        "type": "(comparable -> v -> Bool) -> Dict.AVL.Dict comparable v -> ( Dict.AVL.Dict comparable v, Dict.AVL.Dict comparable v )"
      },
      {
        "name": "remove",
        "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made.\n\n    >>> singleton 1 \"value\"\n    ... |> remove 1\n    ... |> toList\n    []\n\n    >>> singleton 1 \"value\"\n    ... |> remove 2\n    ... |> toList\n    [ ( 1, \"value\" ) ]\n",
        "type": "comparable -> Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v"
      },
      {
        "name": "singleton",
        "comment": " Create a dictionary with one key-value pair.\n\n    >>> singleton 1 \"val\"\n    ... |> toList\n    [ (1, \"val\") ]\n\n    >>> fromList [ ( \"key\", \"val\" ) ]\n    ... |> eq (singleton \"key\" \"val\")\n    True\n",
        "type": "k -> v -> Dict.AVL.Dict k v"
      },
      {
        "name": "size",
        "comment": " Determine the number of key-value pairs in the dictionary.\n\n    >>> fromList [ ( 1, 1 ), ( 2, 2 ) ]\n    ... |> size\n    2\n\n    >>> size empty\n    0\n",
        "type": "Dict.AVL.Dict k v -> Int"
      },
      {
        "name": "toList",
        "comment": " Convert a dictionary into an association list of key-value pairs, sorted by\nkeys.\n\n    >>> fromList [ (1, \"Bob\"), (0, \"Alice\") ]\n    ... |> toList\n    [ (0, \"Alice\")\n    , (1, \"Bob\")\n    ]\n",
        "type": "Dict.AVL.Dict comparable v -> List ( comparable, v )"
      },
      {
        "name": "union",
        "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary.\n\n    >>> union\n    ...    (fromList [ ( 1, \"a\" ), ( 3, \"b\" ), ( 5, \"c\" ) ])\n    ...    (fromList [ ( 2, \"x\" ), ( 3, \"y\" ), ( 4, \"z\" ) ])\n    ... |> toList\n    [ ( 1, \"a\" )\n    , ( 2, \"x\" )\n    , ( 3, \"b\" )\n    , ( 4, \"z\" )\n    , ( 5, \"c\" )\n    ]\n",
        "type": "Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v"
      },
      {
        "name": "update",
        "comment": " Update the value of a dictionary for a specific key with a given function.\n\n    >>> singleton 1 \"original\"\n    ... |> update 1 (Maybe.map String.toUpper)\n    ... |> toList\n    [ ( 1, \"ORIGINAL\" ) ]\n\n    >>> update 1 (always <| Just \"value\") empty\n    ... |> toList\n    [ ( 1, \"value\" ) ]\n\n    >>> singleton 1 \"original\"\n    ... |> update 1 (always Nothing)\n    ... |> toList\n    []\n",
        "type": "comparable -> (Maybe.Maybe v -> Maybe.Maybe v) -> Dict.AVL.Dict comparable v -> Dict.AVL.Dict comparable v"
      },
      {
        "name": "values",
        "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    >>> values (fromList [ ( 0, \"Alice\" ), ( 1, \"Bob\" ) ])\n    [ \"Alice\"\n    , \"Bob\"\n    ]\n",
        "type": "Dict.AVL.Dict comparable v -> List v"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]