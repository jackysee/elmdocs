[
  {
    "name": "CsvDecode",
    "comment": " CSV Decoder.\n\n# Types\n@docs Decoder, Options\n\n# Primitives\n@docs succeed, fail, field, index, fieldsAfter, fieldsBetween\n\n# Conversion\n@docs int, float, string, optional\n\n# Transform\n@docs (|=), map, andThen\n\n# Run\n@docs run, runWithOptions, runAll, runAllWithOptions, defaultOptions\n",
    "aliases": [
      {
        "name": "Options",
        "comment": " You can pass options to `runWithOptions`.\n\n- `separator : String` is used to separate each line into string list. Default is `,`.\n- `noHeader : Bool` is used to indicate that csv has no header. Default is `False`.\n\n",
        "args": [],
        "type": "{ separator : String, noHeader : Bool }"
      }
    ],
    "types": [
      {
        "name": "Decoder",
        "comment": " Type of decoder. For example, `Decoder Int` decodes each line into integer value.\n",
        "args": [
          "a"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "andThen",
        "comment": " Enable to make a decoder that partially depends on its value.\n\nFor example, here is a list of users:\n\n```\ntype,userId,name\nguest,,\nadmin,1,Tom\n```\n\nThe fields \"userId\" and \"name\" is needed only when the field \"type\" is \"admin\". So you write like this:\n\n```\ntype User = Guest | Admin String String\n\nuserDecoder : Decoder User\nuserDecoder =\n    field \"type\"\n        |> andThen\n            (\\t ->\n                if t == \"guest\" then\n                    succeed Guest\n                else if t == \"admin\" then\n                    succeed Admin\n                        |= field \"userId\"\n                        |= field \"name\"\n                else\n                    fail (\"unknown type: \" ++ t)\n            )\n```\n\n",
        "type": "(a -> CsvDecode.Decoder b) -> CsvDecode.Decoder a -> CsvDecode.Decoder b"
      },
      {
        "name": "defaultOptions",
        "comment": " The default options are defined as below.\n\n```\ndefaultOptions =\n    { separator = \",\"\n    , noHeader = False\n    }\n```\n\n",
        "type": "CsvDecode.Options"
      },
      {
        "name": "fail",
        "comment": " Makea a decoder that always fails.\n\n```elm\n> Decode.run (fail \"ouch!\") \"a,b,c\\n1,2,3\"\nError \"ouch! in record[0]\"\n```\nThis is useful paired with `andThen`.\n\n",
        "type": "String -> CsvDecode.Decoder a"
      },
      {
        "name": "field",
        "comment": " Decode value for given column name.\n\n```elm\n> Decode.run (field \"b\") \"a,b,c\\n1,2,3\"\nOk [\"2\"]\n```\n\n**Note**: It succeeds only if the value is non-empty string. If you want to allow empty string, use `string`.\n\n",
        "type": "String -> CsvDecode.Decoder String"
      },
      {
        "name": "fieldsAfter",
        "comment": " Sometimes you don't fully know the name of columns, but you need to get key-value pairs.\n\n```\nkey1,key2,unknown1,unknown2\n1,2,a,b\n```\n\nIn this case, you can do like this:\n\n```elm\n> Decode.run (fieldsAfter \"key2\") source\nOk [ Dict.fromList [ (\"unknown1\", \"a\"), (\"unknown2\", \"b\") ] ]\n```\n\nSee also `fieldsBetween`.\n\n",
        "type": "String -> CsvDecode.Decoder (Dict.Dict String String)"
      },
      {
        "name": "fieldsBetween",
        "comment": " Sometimes you don't fully know the name of columns, but you need to get key-value pairs.\n\n```\nkey1,key2,unknown1,unknown2,key3,key4\n1,2,a,b,3,4\n```\n\nIn this case, you can do like this:\n\n```elm\n> Decode.run (fieldsBetween \"key2\" \"key3\") source\nOk [ Dict.fromList [ (\"unknown1\", \"a\"), (\"unknown2\", \"b\") ] ]\n```\n\nSee also `fieldsAfter`.\n\n",
        "type": "String -> String -> CsvDecode.Decoder (Dict.Dict String String)"
      },
      {
        "name": "float",
        "comment": " Convert String value into Float value.\n\n```elm\n> Decode.run (float (field \"b\")) \"a,b,c\\n1.5,2.5,3.5\"\nOk [2.5]\n```\n\n",
        "type": "CsvDecode.Decoder String -> CsvDecode.Decoder Float"
      },
      {
        "name": "index",
        "comment": " Decode value for given column index. If column names are available, use `field` instead.\n\n```elm\n> Decode.run (index 1) \"a,b,c\\n1,2,3\"\nOk [\"2\"]\n```\n\n**Note**: It succeeds only if the value is non-empty string. If you want to allow empty string, use `string`.\n\n",
        "type": "Int -> CsvDecode.Decoder String"
      },
      {
        "name": "int",
        "comment": " Convert String value into Int value.\n\n```elm\n> Decode.run (int (field \"b\")) \"a,b,c\\n1,2,3\"\nOk [2]\n```\n\n",
        "type": "CsvDecode.Decoder String -> CsvDecode.Decoder Int"
      },
      {
        "name": "map",
        "comment": " Convert the result to another type.\n\n```\n> Decode.run (map toUpper (field \"b\")) \"a,b,c\\nfoo,bar,baz\"\nOk [\"BAR\"]\n```\n\n",
        "type": "(a -> b) -> CsvDecode.Decoder a -> CsvDecode.Decoder b"
      },
      {
        "name": "optional",
        "comment": " If value exists, it will be wrapped with `Just`. If not, `Nothing` will be returned.\n\nThere are several situations where `Nothing` can be returned.\n\n```elm\n> Decode.run (optional (field \"b\")) \"a,b,c\\n1,2,3\"\nOk [ Just \"2\" ]\n\n-- column does not exist in *header*\n> Decode.run (optional (field \"b\")) \"a,b,c\\n1,,3\"\nOk [ Nothing ]\n\n-- column does not exist in *body*\n> Decode.run (optional (field \"b\")) \"a,b,c\\n1\"\nOk [ Nothing ]\n\n-- *value* is empty\n> Decode.run (optional (field \"b\")) \"a,b,c\\n1,,3\"\nOk [ Nothing ]\n```\n\n**Note**: Be careful if you use both `optional` and `string`.\nEmpty value will be regarded as existing string and never be `Nothing`.\n\n```elm\n> Decode.run (optional (string (field \"b\"))) \"a,b,c\\n1,,3\"\nOk [ Just \"\" ]\n```\n\n",
        "type": "CsvDecode.Decoder a -> CsvDecode.Decoder (Maybe.Maybe a)"
      },
      {
        "name": "run",
        "comment": " Run the decoder. The result is either list of items or error message.\n\n```elm\n> Decode.run (field \"b\") \"a,b,c\\n1,2,3\"\nOk [\"2\"]\n```\n\nThis parses the basic comma-separated CSV with header. For more advanced case, see `runWithOptions`.\n\n",
        "type": "CsvDecode.Decoder a -> String -> Result.Result String (List a)"
      },
      {
        "name": "runAll",
        "comment": " Similar to `run` but does not stop executing on error. All errors will be collected.\n",
        "type": "CsvDecode.Decoder a -> String -> ( List a, List String )"
      },
      {
        "name": "runAllWithOptions",
        "comment": " Execute `runAll` with options.\n",
        "type": "CsvDecode.Options -> CsvDecode.Decoder a -> String -> ( List a, List String )"
      },
      {
        "name": "runWithOptions",
        "comment": " Run decoder with options.\n\n```elm\n> Decode.runWithOptions { separator = \";\", noHeader = True } (index 1) \"a;b;c\"\nOk [\"b\"]\n```\n\n- `separator : String` is used to separate each line into string list. Default is `,`.\n- `noHeader : Bool` is used to indicate that csv has no header. Default is `False`.\n\n",
        "type": "CsvDecode.Options -> CsvDecode.Decoder a -> String -> Result.Result String (List a)"
      },
      {
        "name": "string",
        "comment": " Allow empty string. Without this, empty value causes failure.\n\n```elm\n> Decode.run (field \"b\") \"a,b,c\\n1,,3\"\nErr \"unexpected empty value in record[0]\"\n\n> Decode.run (string (field \"b\")) \"a,b,c\\n1,,3\"\nOk [\"\"]\n```\n\n",
        "type": "CsvDecode.Decoder String -> CsvDecode.Decoder String"
      },
      {
        "name": "succeed",
        "comment": " Make a decoder that always succeeds.\n\n```elm\n> Decode.run (succeed 100) \"a,b,c\\n1,2,3\"\nOk [100]\n```\n\nThis is useful paired with `(|=)` or `andThen`.\n\n",
        "type": "a -> CsvDecode.Decoder a"
      },
      {
        "name": "|=",
        "comment": " Make pipeline to get multiple values from a record.\n\nFor example, here is a user table:\n\n```\nid,name,age,mail\n1,John Smith,20,john@example.com\n2,Jane Smith,19,\n```\n\nYou can make decoder for it like this:\n\n```elm\ntype alias User =\n    { id : String\n    , name : String\n    , age : Int\n    , mail : Maybe String\n    }\n\n\nuserDecoder : Decoder User\nuserDecoder =\n    succeed User\n        |= field \"id\"\n        |= field \"name\"\n        |= int (field \"age\")\n        |= optional (field \"mail\")\n```\n\n",
        "type": "CsvDecode.Decoder (a -> b) -> CsvDecode.Decoder a -> CsvDecode.Decoder b",
        "associativity": "left",
        "precedence": 5
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]