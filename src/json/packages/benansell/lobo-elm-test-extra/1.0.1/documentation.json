[
  {
    "name": "ElmTest.Extra",
    "comment": " Additions to [elm-test](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\nfor use with the [lobo](https://www.npmjs.com/package/lobo) test runner.\n\n    skippedTest : Test\n    skippedTest =\n        skip \"ignore test\" <|\n            test \"skippedTest\" <|\n                \\() ->\n                    Expect.fail \"Never runs\"\n\n\n    focusTest : Test\n    focusTest =\n        focus <|\n            test \"Example passing test\" <|\n                \\() ->\n                    Expect.pass\n\n## Migration from elm-test\nTo use this package you will need to use lobo with the \"elm-test-extra\"\nframework, and replace:\n\n    import Test\n\nwith\n\n    import ElmTest.Extra\n\nFurther information on using lobo can be found [here](https://www.npmjs.com/package/lobo)\n\nThe following elm-test functions are not available in elm-test-extra:\n* concat -> instead use `describe`\n* filter -> instead use `skip`\n\n## Extra\n\n@docs focus, skip\n\n## elm-test\n\nlobo compatible declarations of the elm-test Test API. In the first instance\nplease see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n\n@docs Test, test\n\n### Organizing Tests\n\n@docs describe\n\n### Fuzz Testing\n\n@docs fuzz, fuzz2, fuzz3, fuzz4, fuzz5, fuzzWith\n\n",
    "aliases": [
      {
        "name": "Test",
        "comment": " A test which has yet to be evaluated.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
        "args": [],
        "type": "ElmTest.Runner.Test"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "describe",
        "comment": " Group a set of tests with a description.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
        "type": "String -> List ElmTest.Extra.Test -> ElmTest.Extra.Test"
      },
      {
        "name": "focus",
        "comment": " Restrict the running of tests to only those that have `focus`:\nunfocused tests.\n\n    focusTest : Test\n    focusTest =\n        focus <|\n            test \"Example passing test\" <|\n                \\() ->\n                    Expect.pass\n\nThis will cause the lobo runner to ignore all other tests that don't have focus\napplied. focus can be applied to the following:\n* test\n* describe\n* fuzz, fuzzWith, fuzz2, fuzz3, fuzz4, fuzz5\n\nFocus cannot be used to force a skipped test to run.\n",
        "type": "ElmTest.Extra.Test -> ElmTest.Extra.Test"
      },
      {
        "name": "fuzz",
        "comment": " Run a test with random input provided by the fuzzer.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
        "type": "Fuzz.Fuzzer a -> String -> (a -> Expect.Expectation) -> ElmTest.Extra.Test"
      },
      {
        "name": "fuzz2",
        "comment": " Run a test with 2 random inputs provided by the fuzzers.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
        "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> String -> (a -> b -> Expect.Expectation) -> ElmTest.Extra.Test"
      },
      {
        "name": "fuzz3",
        "comment": " Run a test with 3 random inputs provided by the fuzzers.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
        "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> String -> (a -> b -> c -> Expect.Expectation) -> ElmTest.Extra.Test"
      },
      {
        "name": "fuzz4",
        "comment": " Run a test with 4 random inputs provided by the fuzzers.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
        "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> String -> (a -> b -> c -> d -> Expect.Expectation) -> ElmTest.Extra.Test"
      },
      {
        "name": "fuzz5",
        "comment": " Run a test with 5 random inputs provided by the fuzzers.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
        "type": "Fuzz.Fuzzer a -> Fuzz.Fuzzer b -> Fuzz.Fuzzer c -> Fuzz.Fuzzer d -> Fuzz.Fuzzer e -> String -> (a -> b -> c -> d -> e -> Expect.Expectation) -> ElmTest.Extra.Test"
      },
      {
        "name": "fuzzWith",
        "comment": " Run a test with random input provide by a fuzzer using the supplied options.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
        "type": "Test.FuzzOptions -> Fuzz.Fuzzer a -> String -> (a -> Expect.Expectation) -> ElmTest.Extra.Test"
      },
      {
        "name": "skip",
        "comment": " Prevent the running of tests with a reason for them to be skipped.\n\n    skippedTest : Test\n    skippedTest =\n        skip \"ignore test\" <|\n            test \"skippedTest\" <|\n                \\() ->\n                    Expect.fail \"Never runs\"\n\nThis will cause the lobo runner to skip this test. skip can be applied to the\nfollowing:\n* test\n* describe, concat\n* fuzz, fuzzWith, fuzz2, fuzz3, fuzz4, fuzz5\n\n",
        "type": "String -> ElmTest.Extra.Test -> ElmTest.Extra.Test"
      },
      {
        "name": "test",
        "comment": " A test that evaluates an expectation.\nFor further help see the original [elm-test documentation](http://package.elm-lang.org/packages/elm-community/elm-test/latest)\n",
        "type": "String -> (() -> Expect.Expectation) -> ElmTest.Extra.Test"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "ElmTest.Runner",
    "comment": " Declarations required by lobo. Generally only of interest when\nextending lobo.\n\n@docs Test\n\n",
    "aliases": [],
    "types": [
      {
        "name": "Test",
        "comment": " Hierarchical representation of Tests\n",
        "args": [],
        "cases": [
          [
            "Test",
            [
              "Test.Test"
            ]
          ],
          [
            "Labeled",
            [
              "String",
              "ElmTest.Runner.Test"
            ]
          ],
          [
            "Batch",
            [
              "List ElmTest.Runner.Test"
            ]
          ],
          [
            "Skipped",
            [
              "String",
              "ElmTest.Runner.Test"
            ]
          ],
          [
            "Focus",
            [
              "ElmTest.Runner.Test"
            ]
          ]
        ]
      }
    ],
    "values": [],
    "generated-with-elm-version": "0.18.0"
  }
]