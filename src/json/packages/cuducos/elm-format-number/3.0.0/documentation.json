[
  {
    "name": "FormatNumber",
    "comment": " This simple package formats `float` numbers as pretty strings. It is\nflexible enough to deal with different number of decimals, different thousand\nseparators and diffetent decimal separator.\n\n@docs format\n\n\n## What about `Int` numbers?\n\n    >>> import Locales exposing (usLocale)\n    >>> format usLocale (toFloat 1234)\n    \"1,234.00\"\n\n    >>> import Locales exposing (usLocale)\n    >>> format { usLocale | decimals = 0 } <| toFloat 1234\n    \"1,234\"\n\n## Known bugs\n\nThere are [known](https://github.com/elm-lang/elm-compiler/issues/264)\n[bugs](https://github.com/elm-lang/elm-compiler/issues/1246) in how Elm handles\nlarge numbers. This library cannot work with large numbers (over `2 ^ 31`)\nuntil Elm itself is fixed:\n\n    >>> format usLocale 1e10\n    \"1,410,065,408.00\"\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "format",
        "comment": " Format a float number as a pretty string:\n\n    >>> format { decimals = 2, thousandSeparator = \".\", decimalSeparator = \",\" } 123456.789\n    \"123.456,79\"\n\n    >>> format { decimals = 2, thousandSeparator = \",\", decimalSeparator = \".\" } 1234.5567\n    \"1,234.56\"\n\n    >>> import Locales exposing (Locale)\n    >>> format (Locale 3 \".\" \",\") -7654.3210\n    \"−7.654,321\"\n\n    >>> import Locales exposing (Locale)\n    >>> format (Locale 1 \",\" \".\") -0.01\n    \"0.0\"\n\n    >>> import Locales exposing (Locale)\n    >>> format (Locale 2 \",\" \".\") 0.01\n    \"0.01\"\n\n    >>> import Locales exposing (Locale)\n    >>> format (Locale 0 \",\" \".\") 123.456\n    \"123\"\n\n    >>> import Locales exposing (Locale)\n    >>> format (Locale 0 \",\" \".\") 1e9\n    \"1,000,000,000\"\n\n    >>> import Locales exposing (Locale)\n    >>> format (Locale 5 \",\" \".\") 1.0\n    \"1.00000\"\n\n    >>> import Locales exposing (usLocale)\n    >>> format usLocale pi\n    \"3.14\"\n\n    >>> import Locales exposing (frenchLocale)\n    >>> format { frenchLocale | decimals = 4 } pi\n    \"3,1416\"\n\n    >>> import Locales exposing (frenchLocale)\n    >>> format frenchLocale 67295\n    \"67 295,000\"\n\n    >>> import Locales exposing (spanishLocale)\n    >>> format spanishLocale e\n    \"2,718\"\n\n    >>> import Locales exposing (spanishLocale)\n    >>> format spanishLocale 67295\n    \"67.295,000\"\n\n    >>> import Locales exposing (usLocale)\n    >>> format usLocale 67295\n    \"67,295.00\"\n\n",
        "type": "Locales.Locale -> Float -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Locales",
    "comment": "\n\nThese locales and its names are based on this\n[International Language Environments\nGuide](https://docs.oracle.com/cd/E19455-01/806-0169/overview-9/index.html)\n\n@docs Locale\n\n# Pre-defined locales\n\n@docs frenchLocale, spanishLocale, usLocale\n\n",
    "aliases": [
      {
        "name": "Locale",
        "comment": " This is the `Locale` type and constructor.\n",
        "args": [],
        "type": "{ decimals : Int , thousandSeparator : String , decimalSeparator : String }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "frenchLocale",
        "comment": " Locale used in France, Canada, Finland and Sweden. It has 3 decimals\ndigits, uses a thin space (`U+202F`) as thousand separator and a `,` as decimal\nseparator.\n",
        "type": "Locales.Locale"
      },
      {
        "name": "spanishLocale",
        "comment": " Locale used in Spain, Italy and Norway. It has 2 decimals digits, uses a\n`.` as thousand separator and a `,` as decimal separator.\n",
        "type": "Locales.Locale"
      },
      {
        "name": "usLocale",
        "comment": " Locale used in the United States, Great Britain and Thailand. It has 2\ndecimals digits, uses a `,` as thousand separator and a `.` as decimal\nseparator.\n",
        "type": "Locales.Locale"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]