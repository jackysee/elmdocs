[
  {
    "name": "Select",
    "comment": " Select input with auto-complete\n\n# Types\n@docs Config, Model, Msg\n\n# Configuration\n@docs newConfig\n\n# Styling\n@docs withInputClass, withInputStyles, withMenuClass, withMenuStyles, withItemClass, withItemStyles, withCutoff\n\n# State\n@docs newState\n\n# view\n@docs view\n\n# Update\n@docs update\n",
    "aliases": [],
    "types": [
      {
        "name": "Config",
        "comment": "\nOpaque type that holds the configuration\n",
        "args": [
          "msg",
          "item"
        ],
        "cases": []
      },
      {
        "name": "Model",
        "comment": "\nOpaque type that holds the current state\n",
        "args": [],
        "cases": []
      },
      {
        "name": "Msg",
        "comment": "\nOpaque type for internal library messages\n",
        "args": [
          "item"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "newConfig",
        "comment": "\nCreate a new configuration. This takes:\n\n- A message to trigger when an item is selected\n- A function to get a label to display from an item\n\n\n    Select.newConfig OnSelect .label\n",
        "type": "(item -> msg) -> (item -> String) -> Select.Config msg item"
      },
      {
        "name": "newState",
        "comment": "\nCreate a new state. You must pass a unique identifier for each select component.\n\n    {\n        ...\n        selectState = Select.newState \"select1\"\n    }\n",
        "type": "String -> Select.Model"
      },
      {
        "name": "update",
        "comment": "\nUpdate the component state\n\n    SelectMsg subMsg ->\n        let\n            ( updated, cmd ) =\n                Select.update selectConfig subMsg model.selectState\n        in\n            ( { model | selectState = updated }, cmd )\n",
        "type": "Select.Config msg item -> Select.Msg item -> Select.Model -> ( Select.Model, Platform.Cmd.Cmd msg )"
      },
      {
        "name": "view",
        "comment": "\nRender the view\n\n    Html.map SelectMsg (Select.view selectConfig model.selectState model.items selectedItem)\n",
        "type": "Select.Config msg item -> Select.Model -> List item -> Maybe.Maybe item -> Html.Html (Select.Msg item)"
      },
      {
        "name": "withCutoff",
        "comment": "\nSet the maxium number of items to show\n\n    Select.withCutoff 6 config\n",
        "type": "Int -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withInputClass",
        "comment": "\nAdd classes to the input\n\n    Select.withInputClass \"col-12\" config\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withInputStyles",
        "comment": "\nAdd styles to the input\n\n    Select.withInputStyles [(\"color\", \"red\")] config\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withItemClass",
        "comment": "\nAdd classes to the items\n\n    Select.withItemClass \"border-bottom\" config\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withItemStyles",
        "comment": "\nAdd styles to the items\n\n    Select.withItemStyles [(\"color\", \"peru\")] config\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withMenuClass",
        "comment": "\nAdd classes to the menu\n\n    Select.withMenuClass \"bg-white\" config\n",
        "type": "String -> Select.Config msg item -> Select.Config msg item"
      },
      {
        "name": "withMenuStyles",
        "comment": "\nAdd styles to the menu\n\n    Select.withMenuStyles [(\"padding\", \"1rem\")] config\n",
        "type": "List ( String, String ) -> Select.Config msg item -> Select.Config msg item"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]