[
  {
    "name": "NonZero",
    "comment": "\nNonZero numbers are numbers excluding zero.\nBecause the constructor for `NonZero` is not exported, you can be\nconfident that if you are using a `NonZero`, then its `NonZero`.\n\n@docs NonZero, fromNum, toNum\n",
    "aliases": [],
    "types": [
      {
        "name": "NonZero",
        "comment": " ",
        "args": [
          "number"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "fromNum",
        "comment": " ",
        "type": "number -> Maybe.Maybe (NonZero.NonZero number)"
      },
      {
        "name": "toNum",
        "comment": " ",
        "type": "NonZero.NonZero number -> number"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Positive",
    "comment": "\nPositive numbers exclude zero.\nBecause the constructor for `Positive` is not exported, you can be\nconfident that if you are using a `Positive`, then its `Positive`.\n\n@docs Positive, fromNum, toNum\n",
    "aliases": [],
    "types": [
      {
        "name": "Positive",
        "comment": " ",
        "args": [
          "number"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "fromNum",
        "comment": " ",
        "type": "number -> Maybe.Maybe (Positive.Positive number)"
      },
      {
        "name": "toNum",
        "comment": " ",
        "type": "Positive.Positive number -> number"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Even",
    "comment": "\nBecause the constructor for `Even` is not exported, you can be\nconfident that if you are using a `Even`, then its `Even`.\n\n@docs Even, fromInt, toInt\n",
    "aliases": [],
    "types": [
      {
        "name": "Even",
        "comment": " ",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "fromInt",
        "comment": " ",
        "type": "Int -> Maybe.Maybe Even.Even"
      },
      {
        "name": "toInt",
        "comment": " ",
        "type": "Even.Even -> Int"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Odd",
    "comment": "\nBecause the constructor for `Odd` is not exported, you can be\nconfident that if you are using a `Odd`, then its `Odd`.\n\n@docs Odd, fromInt, toInt\n",
    "aliases": [],
    "types": [
      {
        "name": "Odd",
        "comment": " ",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "fromInt",
        "comment": " ",
        "type": "Int -> Maybe.Maybe Odd.Odd"
      },
      {
        "name": "toInt",
        "comment": " ",
        "type": "Odd.Odd -> Int"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Negative",
    "comment": "\nNegative numbers exclude zero.\nBecause the constructor for `Negative` is not exported, you can be\nconfident that if you are using a `Negative`, then its `Negative`.\n\n@docs Negative, fromNum, toNum\n",
    "aliases": [],
    "types": [
      {
        "name": "Negative",
        "comment": " ",
        "args": [
          "number"
        ],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "fromNum",
        "comment": " ",
        "type": "number -> Maybe.Maybe (Negative.Negative number)"
      },
      {
        "name": "toNum",
        "comment": " ",
        "type": "Negative.Negative number -> number"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  },
  {
    "name": "Natural",
    "comment": "\nNatural numbers are positive whole numbers excluding zero.\nBecause the constructor for `Natural` is not exported, you can be\nconfident that if you are using a `Natural`, then its `Natural`.\n\n@docs Natural, fromInt, toInt\n",
    "aliases": [],
    "types": [
      {
        "name": "Natural",
        "comment": " ",
        "args": [],
        "cases": []
      }
    ],
    "values": [
      {
        "name": "fromInt",
        "comment": " ",
        "type": "Int -> Maybe.Maybe Natural.Natural"
      },
      {
        "name": "toInt",
        "comment": " ",
        "type": "Natural.Natural -> Int"
      }
    ],
    "generated-with-elm-version": "0.17.0"
  }
]