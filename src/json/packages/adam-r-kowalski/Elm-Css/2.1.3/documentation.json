[
  {
    "name": "Css.Border",
    "comment": " Sets the border properties for all four sides at the same time.\nYou can set the color, style, width, and border radius\n\n#Functions\n@docs color, style, width, radius\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "color",
        "comment": " Sets the color of all four borders\n\n    -- Sets all border colors to red\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-color\", \"rgba(255, 0, 0, 1)\")\n       , (\"border-left-color\", \"rgba(255, 0, 0, 1)\")\n       , (\"border-right-color\", \"rgba(255, 0, 0, 1)\")\n       , (\"border-top-color\", \"rgba(255, 0, 0, 1)\")\n       ]\n    -}\n    Border.color (rgba 255 0 0 1) []\n",
        "type": "Color.Color -> Css.Styles -> Css.Styles"
      },
      {
        "name": "radius",
        "comment": " Sets the radius of the\ntop left, top right, bottom right, and bottom left.\n\n    -- Sets the radius of all four sides to 25 pixels\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-left-radius\", \"25px\")\n       , (\"border-bottom-right-radius\", \"25px\")\n       , (\"border-top-left-radius\", \"25px\")\n       , (\"border-top-right-radius\", \"25px\")\n       ]\n    -}\n    Border.radius 25 25 25 25 []\n",
        "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "style",
        "comment": " Sets the style of all four borders\n\n    -- Sets the border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-style\", \"dashed\")\n       , (\"border-left-style\", \"dashed\")\n       , (\"border-right-style\", \"dashed\")\n       , (\"border-top-style\", \"dashed\")\n       ]\n    -}\n    Border.style BorderStyle.Dashed []\n",
        "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
      },
      {
        "name": "width",
        "comment": " Sets the width of all four borders\n\n    -- Sets the border width to 5 pixels\n    import Css.Border as Border\n\n    {- [ (\"border-bottom-width\", \"5px\")\n       , (\"border-left-width\", \"5px\")\n       , (\"border-right-width\", \"5px\")\n       , (\"border-top-width\", \"5px\")\n       ]\n    -}\n    Border.width 5 []\n",
        "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Util",
    "comment": " Utility functions provided to make viewing the css generated by\nyour functions possible. I am still not quite sure just how useful this is,\nbut it is quite interesting to see.\n\n#Functions\n@docs toCss\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "toCss",
        "comment": " This function takes a class name and a list of styles.\nIt will then generate a block of code that shows how the equivalent styles\nwould look in css.\n\nThis is really useful if you start to have really complex styles, which no\nlonger resemble the base abstractions that were made, yet you still want to\nsee how they transform to css.\n",
        "type": "String -> Css.Styles -> Html.Html"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Border.Bottom",
    "comment": " This library allows you to set the bottom border of any html element.\nYou can set the color, style, width, and radius of the bottom border.\n\n# Functions\n@docs color, style, width, rightRadius, leftRadius\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "color",
        "comment": " Sets the color of the bottom border\n\n    -- Sets the bottom border color to red\n    import Css.Border.Bottom as BorderBottom\n\n\n    -- [ (\"border-bottom-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderBottom.color (rgba 255 0 0 1) []\n",
        "type": "Color.Color -> Css.Styles -> Css.Styles"
      },
      {
        "name": "leftRadius",
        "comment": " Set the bottom left border radius\n    -- Set the bottom left border radius to 25 pixels\n    import Css.Border.Bottom as BorderBottom\n\n    -- [ (\"border-bottom-left-radius, \"25px\") ]\n    BorderBottom.leftRadius 25 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "rightRadius",
        "comment": " Set the bottom right border radius\n\n    -- Set the bottom right border radius to 25 pixels\n    import Css.Border.Bottom as BorderBottom\n\n\n    -- [ (\"border-bottom-right-radius, \"25px\") ]\n    BorderBottom.rightRadius 25 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "style",
        "comment": " Sets the style of the bottom border\n\n    -- Sets the bottom border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Bottom as BorderBottom\n\n\n    -- [ (\"border-bottom-style, \"dashed\") ]\n    BorderBottom.style BorderStyle.Dashed []\n",
        "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
      },
      {
        "name": "width",
        "comment": " Sets the width of the bottom border\n\n    -- Sets the bottom border width to 5 pixels\n    import Css.Border.Bottom as BorderBottom\n\n    -- [ (\"border-bottom-width, \"5px\") ]\n    BorderBottom.width 5 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Border.Left",
    "comment": " This library allows you to set the left border of any html element.\nYou can set the color, style, and width.\n\n# Functions\n@docs color, style, width\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "color",
        "comment": " Set the color of the left border\n\n    -- Set the left border color to red\n    import Css.Border.Left as BorderLeft\n\n\n    -- [ (\"border-left-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderLeft.color (rgba 255 0 0 1) []\n",
        "type": "Color.Color -> Css.Styles -> Css.Styles"
      },
      {
        "name": "style",
        "comment": " Set the style of the left border\n\n    -- Set the left border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Left as BorderLeft\n\n\n    -- [ (\"border-left-style, \"dashed\") ]\n    BorderLeft.style BorderStyle.Dashed []\n",
        "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
      },
      {
        "name": "width",
        "comment": " Set the width of the left border\n\n    -- Set the left border width to 5 pixels\n    import Css.Border.Left as BorderLeft\n\n\n    -- [ (\"border-left-width, \"5px\") ]\n    BorderLeft.width 5 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Border.Right",
    "comment": " This library allows you to set the right border of any html element.\nYou can set the color, style, and width.\n\n# Functions\n@docs color, style, width\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "color",
        "comment": " Set the color of the right border\n\n    -- Set the right border color to red\n    import Css.Border.Right as BorderRight\n\n    -- [ (\"border-right-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderRight.color (rgba 255 0 0 1) []\n",
        "type": "Color.Color -> Css.Styles -> Css.Styles"
      },
      {
        "name": "style",
        "comment": " Set the style of the right border\n\n    -- Set the right border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Right as BorderRight\n\n    -- [ (\"border-right-style, \"dashed\") ]\n    BorderRight.style BorderStyle.Dashed []\n",
        "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
      },
      {
        "name": "width",
        "comment": " Set the width of the right border\n\n    -- Set the right border width to 5 pixels\n    import Css.Border.Right as BorderRight\n\n    -- [ (\"border-right-width, \"5px\") ]\n    BorderRight.width 5 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Border.Top",
    "comment": " This library allows you to set the top border of any html element.\nYou can set the color, style, width, and radius of the top border.\n\n# Functions\n@docs color, style, width, rightRadius, leftRadius\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "color",
        "comment": " Set the color of the top border\n\n    -- Set the top border color to red\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-color\", \"rgba(255, 0, 0, 1)\") ]\n    BorderTop.color (rgba 255 0 0 1) []\n",
        "type": "Color.Color -> Css.Styles -> Css.Styles"
      },
      {
        "name": "leftRadius",
        "comment": " Set the top left border radius\n    -- Set the top left border radius to 25 pixels\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-left-radius, \"25px\") ]\n    BorderTop.leftRadius 25 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "rightRadius",
        "comment": " Set the top right border radius\n\n    -- Set the top right border radius to 25 pixels\n    import Css.Border.Top as BorderTop\n\n\n    -- [ (\"border-top-right-radius, \"25px\") ]\n    BorderTop.rightRadius 25 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "style",
        "comment": " Set the style of the top border\n\n    -- Set the top border style to dashed\n    import Css.Border.Style as BorderStyle\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-style, \"dashed\") ]\n    BorderTop.style BorderStyle.Dashed []\n",
        "type": "Css.Border.Style.Style -> Css.Styles -> Css.Styles"
      },
      {
        "name": "width",
        "comment": " Set the width of the top border\n\n    -- Set the top border width to 5 pixels\n    import Css.Border.Top as BorderTop\n\n    -- [ (\"border-top-width, \"5px\") ]\n    BorderTop.width 5 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Background",
    "comment": " Sets the background properties for the element.\nYou can set the color, image, position, size, repeat, and attachment.\n\n#Definitions\n@docs Repeat, Attachment\n\n#Strings\n@docs repeatString, attachmentString, pointString\n\n#Functions\n@docs color, image, position, size, repeat, attachment\n",
    "aliases": [],
    "types": [
      {
        "name": "Attachment",
        "comment": " Represent whether the background image is fixed or scrolls\nwith the rest of the page.\n\nScroll -\n  The background scrolls along with the element.\n\nFixed -\n  The background is fixed with regard to the viewport.\n\nLocal -\n  The background scrolls along with the element's contents\n",
        "args": [],
        "cases": [
          [
            "Scroll",
            []
          ],
          [
            "Fixed",
            []
          ],
          [
            "Local",
            []
          ]
        ]
      },
      {
        "name": "Repeat",
        "comment": " Represent how to repeat the background image\n\nRepeat -\n  The background image will be repeated both vertically and horizontally.\n\nRepeatX -\n  The background image will be repeated only horizontally.\n  This is really useful to repeat a gradient or some other thin\n  background to save on storage space, and decrease loading time.\n\nRepeatY -\n  The background image will be repeated only vertically.\n\nNoRepeat -\n  The background image will not be repeated.\n",
        "args": [],
        "cases": [
          [
            "Repeat",
            []
          ],
          [
            "RepeatX",
            []
          ],
          [
            "RepeatY",
            []
          ],
          [
            "NoRepeat",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "attachment",
        "comment": " Set whether a background image is fixed\nor scrolls with the rest of the page.\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"w3css.gif\\\")\")\n       , (\"background-repeat\", \"no-repeat\")\n       , (\"background-attachment\", \"fixed\")\n       ] --}\n    Background.image \"img_flwr.gif\"\n    <| Background.repeat Background.NoRepeat\n    <| Background.attachment Background.Fixed []\n",
        "type": "Css.Background.Attachment -> Css.Styles -> Css.Styles"
      },
      {
        "name": "attachmentString",
        "comment": " Convert the attachment type to the string form so it works with css.\n\n    import Css.Background as Background\n\n    Background.attachmentString Background.Scroll -- \"scroll\"\n",
        "type": "Css.Background.Attachment -> String"
      },
      {
        "name": "color",
        "comment": " Set the background color.\n\n    import Css.Background as Background\n\n    -- [ (\"background-color\", \"rgba(255, 0, 0, 1)\") ]\n    Background.color (rgba 255 0 0 1) []\n",
        "type": "Color.Color -> Css.Styles -> Css.Styles"
      },
      {
        "name": "image",
        "comment": " Set the background image.\n\n    import Css.Background as Background\n\n    -- [ (\"background-image\", \"url(\\\"paper.gif\\\")\") ]\n    Background.image \"paper.gif\" []\n",
        "type": "String -> Css.Styles -> Css.Styles"
      },
      {
        "name": "pointString",
        "comment": " Take two integers and append \"px\" so it works with css.\n\n    import Css.Background as Background\n\n    Background.pointString 5 10 -- \"5px 10px\"\n",
        "type": "number -> number -> String"
      },
      {
        "name": "position",
        "comment": " Set the starting position of the background image.\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"smiley.gif\\\")\")\n       , (\"background-position\", \"50px 100px\")\n       ] --}\n    Background.image \"smiley.gif\"\n    <| Background.position 50 100 []\n",
        "type": "number -> number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "repeat",
        "comment": " Set how the background repeats\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"img_flwr.gif\\\")\")\n       , (\"background-size\", \"80px 60px\")\n       , (\"background-repeat\", \"no-repeat\")\n       ] --}\n    Background.image \"img_flwr.gif\"\n    <| Background.size 80 60\n    <| Background.repeat Background.NoRepeat []\n",
        "type": "Css.Background.Repeat -> Css.Styles -> Css.Styles"
      },
      {
        "name": "repeatString",
        "comment": " Convert a repeat type to the string form so it works with css.\n\n    import Css.Background as Background\n\n    Background.repeatString Background.Repeat -- \"repeat\"\n",
        "type": "Css.Background.Repeat -> String"
      },
      {
        "name": "size",
        "comment": " Set the size of the background image\n\n    import Css.Background as Background\n\n    {-- [ (\"background-image\", \"url(\\\"img_flwr.gif\\\")\")\n       , (\"background-size\", \"80px 60px\")\n       ] --}\n    Background.image \"img_flwr.gif\"\n    <| Background.size 80 60 []\n",
        "type": "number -> number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Cursor",
    "comment": " Change the cursor to be displayed when pointing on an element.\n\n#Definition\n@docs Cursor\n\n#String\n@docs string\n\n#Function\n@docs cursor\n",
    "aliases": [],
    "types": [
      {
        "name": "Cursor",
        "comment": " Represent the type of cursor to be displayed when pointing on an element.\n\nAlias -\n  The cursor indicates an alias of something is to be created.\n\nAllScroll -\n  The cursor indicates that something can be scrolled in any direction.\n\nAuto -\n  The browser sets a cursor.\n\nCell -\n  The cursor indicates that a cell (or set of cells) may be selected.\n\nContextMenu -\n  The cursor indicates that a context-menu is available.\n\nColResize -\n  The cursor indicates that the column can be resized horizontally.\n\nCopy -\n  The cursor indicates something is to be copied.\n\nCrosshair -\n  The cursor render as a crosshair.\n\nDefault -\n  The default cursor.\n\nEResize -\n  The cursor indicates that an edge of a box is to be moved right (east).\n\nEwResize -\n  Indicates a bidirectional resize cursor.\n\nGrab -\n  The cursor indicates that something can be grabbed.\n\nGrabbing -\n  The cursor indicates that something can be grabbed.\n\nHelp -\n  The cursor indicates that help is available.\n\nMove -\n  The cursor indicates something is to be moved.\n\nNResize -\n  The cursor indicates that an edge of a box is to be moved up (north).\n\nNeResize -\n  The cursor indicates that an edge of a box is to be moved up\n  and right (north/east).\n\nNeswResize -\n  Indicates a bidirectional resize cursor.\n\nNsResize -\n  Indicates a bidirectional resize cursor.\n\nNwResize -\n  The cursor indicates that an edge of a box is to be moved up\n  and left (north/west).\n\nNwseResize -\n  Indicates a bidirectional resize cursor.\n\nNoDrop -\n  The cursor indicates that the dragged item cannot be dropped here.\n\nNone -\n  No cursor is rendered for the element.\n\nNotAllowed -\n  The cursor indicates that the requested action will not be executed.\n\nPointer -\n  The cursor is a pointer and indicates a link.\n\nProgress -\n  The cursor indicates that the program is busy (in progress).\n\nRowResize -\n  The cursor indicates that the row can be resized vertically.\n\nSResize -\n  The cursor indicates that an edge of a box is to be moved down (south).\n\nSeResize -\n  The cursor indicates that an edge of a box is to be moved down\n  and right (south/east).\n\nSwResize -\n  The cursor indicates that an edge of a box is to be moved down\n  and left (south/west).\n\nText -\n  The cursor indicates text that may be selected.\n\nUrl String -\n  A comma separated list of URLs to custom cursors.\n  Note: Always specify a generic cursor at the end of the list,\n  in case none of the URL-defined cursors can be used.\n\nVerticalText -\n  The cursor indicates vertical-text that may be selected.\n\nWResize -\n  The cursor indicates that an edge of a box is to be moved left (west).\n\nWait -\n  The cursor indicates that the program is busy.\n\nZoomIn -\n  The cursor indicates that something can be zoomed in.\n\nZoomOut -\n  The cursor indicates that something can be zoomed out.\n",
        "args": [],
        "cases": [
          [
            "Alias",
            []
          ],
          [
            "AllScroll",
            []
          ],
          [
            "Auto",
            []
          ],
          [
            "Cell",
            []
          ],
          [
            "ContextMenu",
            []
          ],
          [
            "ColResize",
            []
          ],
          [
            "Copy",
            []
          ],
          [
            "Crosshair",
            []
          ],
          [
            "Default",
            []
          ],
          [
            "EResize",
            []
          ],
          [
            "EwResize",
            []
          ],
          [
            "Grab",
            []
          ],
          [
            "Grabbing",
            []
          ],
          [
            "Help",
            []
          ],
          [
            "Move",
            []
          ],
          [
            "NResize",
            []
          ],
          [
            "NeResize",
            []
          ],
          [
            "NeswResize",
            []
          ],
          [
            "NsResize",
            []
          ],
          [
            "NwResize",
            []
          ],
          [
            "NwseResize",
            []
          ],
          [
            "NoDrop",
            []
          ],
          [
            "None",
            []
          ],
          [
            "NotAllowed",
            []
          ],
          [
            "Pointer",
            []
          ],
          [
            "Progress",
            []
          ],
          [
            "RowResize",
            []
          ],
          [
            "SResize",
            []
          ],
          [
            "SeResize",
            []
          ],
          [
            "SwResize",
            []
          ],
          [
            "Text",
            []
          ],
          [
            "Url",
            [
              "String"
            ]
          ],
          [
            "VerticalText",
            []
          ],
          [
            "WResize",
            []
          ],
          [
            "Wait",
            []
          ],
          [
            "ZoomIn",
            []
          ],
          [
            "ZoomOut",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "cursor",
        "comment": " Set the type of cursor to be displayed.\n\n    import Css.Cursor as Cursor exposing (cursor)\n\n    -- [ (\"cursor\", \"crosshair\") ]\n    cursor Cursor.CrossHair []\n",
        "type": "Css.Cursor.Cursor -> Css.Styles -> Css.Styles"
      },
      {
        "name": "string",
        "comment": " Convert a cursor type to string form so it works with css.\n\n    import Css.Cursor as Cursor\n\n    Cursor.string Cursor.Cell -- \"cell\"\n",
        "type": "Css.Cursor.Cursor -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Dimension",
    "comment": " Set the different dimensions an element can have.\nYou can set the height, maxHeight, maxWidth, minHeight, minWidth, and width.\n\n#Height\n@docs height, maxHeight, minHeight\n\n#Width\n@docs width, maxWidth, minWidth\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "height",
        "comment": " Set the height of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"height\", \"100px\") ]\n    Dimension.height 100 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "maxHeight",
        "comment": " Set the max height of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"max-height\", \"50px\") ]\n    Dimension.maxHeight 50 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "maxWidth",
        "comment": " Set the max width of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"max-width\", \"50px\") ]\n    Dimension.maxWidth 50 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "minHeight",
        "comment": " Set the min height of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"min-height\", \"50px\") ]\n    Dimension.minHeight 50 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "minWidth",
        "comment": " Set the min width of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"min-width\", \"50px\") ]\n    Dimension.minWidth 50 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "width",
        "comment": " Set the width of an element.\n\n    import Css.Dimension as Dimension\n\n    -- [ (\"width\", \"50px\") ]\n    Dimension.width 50 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Display",
    "comment": " Set how an element is displayed, and whether it is hidden or visible.\n\n#Definition\n@docs Display\n\n#String\n@docs string\n\n#Function\n@docs display\n",
    "aliases": [],
    "types": [
      {
        "name": "Display",
        "comment": " Represent the display types an element can have.\n\nInline -\n  Displays an element as an inline element (like <span>).\n\nBlock -\n  Displays an element as a block element (like <p>).\n\nFlex -\n  Displays an element as an block-level flex container.\n\nInlineBlock -\n  Displays an element as an inline-level block container.\n  The inside of this block is formatted as block-level box,\n  and the element itself is formatted as an inline-level box\n\nInlineFlex -\n  Displays an element as an inline-level flex container.\n\nInlineTable -\n  The element is displayed as an inline-level table.\n\nListItem -\n  Let the element behave like a <li> element.\n\nRunIn -\n  Displays an element as either block or inline, depending on context.\n\nTable -\n  Let the element behave like a <table> element.\n\nTableCaption -\n  Let the element behave like a <caption> element.\n\nTableColumnGroup -\n  Let the element behave like a <colgroup> element.\n\nTableHeaderGroup -\n  Let the element behave like a <thead> element.\n\nTableFooterGroup -\n  Let the element behave like a <tfoot> element.\n\nTableRowGroup -\n  Let the element behave like a <tbody> element.\n\nTableCell -\n  Let the element behave like a <td> element.\n\nTableColumn -\n  Let the element behave like a <col> element.\n\nTableRow -\n  Let the element behave like a <tr> element.\n\nNone -\n  The element will not be displayed at all (has no effect on layout).\n",
        "args": [],
        "cases": [
          [
            "Inline",
            []
          ],
          [
            "Block",
            []
          ],
          [
            "Flex",
            []
          ],
          [
            "InlineBlock",
            []
          ],
          [
            "InlineFlex",
            []
          ],
          [
            "InlineTable",
            []
          ],
          [
            "ListItem",
            []
          ],
          [
            "RunIn",
            []
          ],
          [
            "Table",
            []
          ],
          [
            "TableCaption",
            []
          ],
          [
            "TableColumnGroup",
            []
          ],
          [
            "TableHeaderGroup",
            []
          ],
          [
            "TableFooterGroup",
            []
          ],
          [
            "TableRowGroup",
            []
          ],
          [
            "TableCell",
            []
          ],
          [
            "TableColumn",
            []
          ],
          [
            "TableRow",
            []
          ],
          [
            "None",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "display",
        "comment": " Sets the display type of an element\n\n    import Css.Display as Display exposing (display)\n\n    -- [ (\"display\", \"flex\") ]\n    display Display.Flex []\n",
        "type": "Css.Display.Display -> Css.Styles -> Css.Styles"
      },
      {
        "name": "string",
        "comment": " Convert a display type to string form so it works with css.\n\n    import Css.Display as Display\n\n    Display.string Display.Inline -- \"inline\"\n",
        "type": "Css.Display.Display -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Flex",
    "comment": " Set the layout of your elements using the flex layout system.\n\n#Definitions\n@docs Direction, Wrap, JustifyContent, AlignItem, AlignContent\n\n#Strings\n@docs directionString, wrapString, justifyContentString, alignItemString, alignContentString\n\n#Direction and Wrap\n@docs direction, wrap, flow\n\n#Alignment\n@docs justifyContent, alignItems, alignContent\n\n#Child Properties\n@docs order, grow, shrink, basis, alignSelf\n",
    "aliases": [],
    "types": [
      {
        "name": "AlignContent",
        "comment": " Represent how to align the flex container's lines within when\nthere is extra space in the cross axis.\n\nACStart -\n  Lines packed to the start of the container.\n\nACEnd -\n  Lines packed to the end of the container.\n\nACCenter -\n  Lines packed to the center of the container.\n\nACStretch -\n  Lines stretch to take up the remaining space.\n\nACBetween -\n  Lines evenly distributed; the first line is at the start of the\n  container while the last one is at the end.\n\nACAround -\n  Lines evenly distributed with equal space around each line.\n",
        "args": [],
        "cases": [
          [
            "ACStart",
            []
          ],
          [
            "ACEnd",
            []
          ],
          [
            "ACCenter",
            []
          ],
          [
            "ACStretch",
            []
          ],
          [
            "ACBetween",
            []
          ],
          [
            "ACAround",
            []
          ]
        ]
      },
      {
        "name": "AlignItem",
        "comment": " Represent how the flex item is laid out along the\ncross axis on the current line.\n\nAIStart -\n  Cross start margin edge of the items is placed on the cross start line.\n\nAIEnd -\n  Cross end margin edge of the items is placed on the cross end line.\n\nAICenter -\n  Items are centered in the cross axis.\n\nAIStretch -\n  Stretch to fill the container (still respect min and max width).\n\nAIBaseline -\n  Items are aligned such as their baselines align.\n",
        "args": [],
        "cases": [
          [
            "AIStart",
            []
          ],
          [
            "AIEnd",
            []
          ],
          [
            "AICenter",
            []
          ],
          [
            "AIStretch",
            []
          ],
          [
            "AIBaseline",
            []
          ]
        ]
      },
      {
        "name": "Direction",
        "comment": " Represent the main-axis, thus defining the direction\nflex items are placed in the flex container.\n\nRow -\n  Left to right in ltr; right to left in rtl.\n\nRowReverse -\n  Right to left in ltr; left to right in rtl.\n\nColumn -\n  Same as row but top to bottom.\n\nColumnReverse -\n  Same as row-reverse but bottom to top.\n",
        "args": [],
        "cases": [
          [
            "Row",
            []
          ],
          [
            "RowReverse",
            []
          ],
          [
            "Column",
            []
          ],
          [
            "ColumnReverse",
            []
          ]
        ]
      },
      {
        "name": "JustifyContent",
        "comment": " Represent the alignment along the main axis.\n\nJCStart -\n  Items are packed toward the start line.\n\nJCEnd -\n  Items are packed toward the end line.\n\nJCCenter -\n  Items are centered along the line.\n\nJCBetween -\n  Items are evenly distributed in the line;\n  first item is on the start line, last item on the end line.\n\nJCAround -\n  Items are evenly distributed in the line with\n  equal space around them.\n",
        "args": [],
        "cases": [
          [
            "JCStart",
            []
          ],
          [
            "JCEnd",
            []
          ],
          [
            "JCCenter",
            []
          ],
          [
            "JCBetween",
            []
          ],
          [
            "JCAround",
            []
          ]
        ]
      },
      {
        "name": "Wrap",
        "comment": " Represent the wrap behavior of flex items.\n\nNoWrap -\n  Single line / left to right in ltr; right to left in rtl.\n\nWrap -\n  Multi-line / left to right in ltr; right to left in rtl.\n\nWrapReverse -\n  Multi-line / right to left in ltr; left to right in rtl.\n",
        "args": [],
        "cases": [
          [
            "NoWrap",
            []
          ],
          [
            "Wrap",
            []
          ],
          [
            "WrapReverse",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "alignContent",
        "comment": " else if Set how to align the flex container's lines within when\nthere is extra space in the cross axis.\n\n    import Css.Flex as Flex\n\n    -- [ (\"align-content\", \"flex-start\") ]\n    Flex.alignContent Flex.ACStart []\n",
        "type": "Css.Flex.AlignContent -> Css.Styles -> Css.Styles"
      },
      {
        "name": "alignContentString",
        "comment": " Convert a align content type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.alignContentString Flex.ACStart -- \"flex-start\"\n",
        "type": "Css.Flex.AlignContent -> String"
      },
      {
        "name": "alignItemString",
        "comment": " Convert a align item type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.alignItemString Flex.AIStart -- \"flex-start\"\n",
        "type": "Css.Flex.AlignItem -> String"
      },
      {
        "name": "alignItems",
        "comment": " else if Set how the flex items are laid out along the\ncross axis on the current line. Think of it as the justifyContent version\nfor the cross axis (perpendicular to the main axis).\n\n    import Css.Flex as Flex\n\n    -- [ (\"align-items\", \"flex-start\") ]\n    Flex.alignItems Flex.AIStart []\n",
        "type": "Css.Flex.AlignItem -> Css.Styles -> Css.Styles"
      },
      {
        "name": "alignSelf",
        "comment": " else if Set the default alignment (or the one specified by align-items)\nto be overridden for individual flex items.\n\n    import Css.Flex as Flex\n\n    -- [ (\"align-self\", \"flex-start\") ]\n    Flex.alignSelf Flex.AIStart []\n",
        "type": "Css.Flex.AlignItem -> Css.Styles -> Css.Styles"
      },
      {
        "name": "basis",
        "comment": " else if Set the default size of an element before the remaining space is distributed.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-basis\", \"1\") ]\n    Flex.basis 1 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "direction",
        "comment": " Set the main-axis, thus defining the direction flex items\nare placed in the flex container.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-direction\", \"row\") ]\n    Flex.direction Flex.Row []\n",
        "type": "Css.Flex.Direction -> Css.Styles -> Css.Styles"
      },
      {
        "name": "directionString",
        "comment": " Convert a direction type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.directionString Flex.Row -- \"row\"\n",
        "type": "Css.Flex.Direction -> String"
      },
      {
        "name": "flow",
        "comment": " Set the direction and the wrap together.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-direction\", \"row\")\n       , (\"flex-wrap\", \"nowrap\")\n       ]\n    Flex.flow Flex.Row Flex.NoWrap []\n",
        "type": "Css.Flex.Direction -> Css.Flex.Wrap -> Css.Styles -> Css.Styles"
      },
      {
        "name": "grow",
        "comment": " else if Set the ability for a flex item to grow if necessary.\nIt accepts a unitless value that serves as a proportion.\nIt dictates what amount of the available space inside the\nflex container the item should take up. Negative numbers\nare invalid.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-grow\", \"1\") ]\n    Flex.grow 1 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "justifyContent",
        "comment": " Set the alignment along the main axis.\n\n    import Css.Flex as Flex\n\n    -- [ (\"justify-content\", \"flex-start\") ]\n    Flex.justifyContent Flex.JCStart []\n",
        "type": "Css.Flex.JustifyContent -> Css.Styles -> Css.Styles"
      },
      {
        "name": "justifyContentString",
        "comment": " Convert a justify content type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.justifyContentString Flex.JCStart -- \"flex-start\"\n",
        "type": "Css.Flex.JustifyContent -> String"
      },
      {
        "name": "order",
        "comment": " else if Set the order in which items appear in the flex container.\n\n    import Css.Flex as Flex\n\n    -- [ (\"order\", \"1\") ]\n    Flex.order 1 []\n",
        "type": "Int -> Css.Styles -> Css.Styles"
      },
      {
        "name": "shrink",
        "comment": " else if Set the ability for a flex item to shrink if necessary.\nNegative numbers are invalid.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-shrink\", \"1\") ]\n    Flex.shrink 1 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "wrap",
        "comment": " Set the wrap behavior of flex items.\n\n    import Css.Flex as Flex\n\n    -- [ (\"flex-wrap\", \"nowrap\") ]\n    Flex.wrap Flex.NoWrap []\n",
        "type": "Css.Flex.Wrap -> Css.Styles -> Css.Styles"
      },
      {
        "name": "wrapString",
        "comment": " Convert a wrap type to string form so it works with css.\n\n    import Css.Flex as Flex\n\n    Flex.wrapString Flex.NoWrap -- \"nowrap\"\n",
        "type": "Css.Flex.Wrap -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Float",
    "comment": " Float can be used to push elements left or right,\nallowing other elements to wrap around it.\n\n#Definitions\n@docs Clear, FloatType\n\n#Strings\n@docs clearString, floatString\n\n#Functions\n@docs clear, float\n",
    "aliases": [],
    "types": [
      {
        "name": "Clear",
        "comment": " Represent the sides of an element where\nfloating elements are not allowed to float.\n\nClearLeft -\n  No floating elements allowed on the left side.\n\nClearRight -\n  No floating elements allowed on the right side.\n\nClearBoth -\n  No floating elements allowed on either the left or right side.\n\nClearNone -\n  Allows floating elements on both sides.\n",
        "args": [],
        "cases": [
          [
            "ClearLeft",
            []
          ],
          [
            "ClearRight",
            []
          ],
          [
            "ClearBoth",
            []
          ],
          [
            "ClearNone",
            []
          ]
        ]
      },
      {
        "name": "FloatType",
        "comment": " Represent whether or not an element should float.\n\nLeft -\n  The element floats to the left.\n\nRight -\n  The element floats to the right.\n\nNone -\n  The element is not floated, and will be displayed\n  just where it occurs in the text.\n",
        "args": [],
        "cases": [
          [
            "Left",
            []
          ],
          [
            "Right",
            []
          ],
          [
            "None",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "clear",
        "comment": " Set the sides of an element where\nfloating elements are not allowed to float.\n\n    import Css.Float as CssFloat\n\n    -- [ (\"clear\", \"left\") ]\n    CssFloat.clear CssFloat.ClearLeft []\n",
        "type": "Css.Float.Clear -> Css.Styles -> Css.Styles"
      },
      {
        "name": "clearString",
        "comment": " Convert a clear type to string form so it works in css.\n\n    import Css.Float as CssFloat\n\n    CssFloat.clearString CssFloat.ClearBoth -- \"both\"\n",
        "type": "Css.Float.Clear -> String"
      },
      {
        "name": "float",
        "comment": " Set whether or not an element should float.\n\n    import Css.Float as CssFloat exposing (float)\n\n    -- [ (\"float\", \"left\") ]\n    float CssFloat.Left []\n",
        "type": "Css.Float.FloatType -> Css.Styles -> Css.Styles"
      },
      {
        "name": "floatString",
        "comment": " Convert a float type to string form so it works in css.\n\n    import Css.Float as CssFloat\n\n    CssFloat.floatString CssFloat.Left -- \"left\"\n",
        "type": "Css.Float.FloatType -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Font",
    "comment": " Font properties define the font family, boldness, size,\nand the style of a text.\n\nSerif -\n  Serif fonts have small lines at the ends on some characters.\n\nSans-Serif -\n  \"Sans\" means without - these fonts do not have the lines at\n  the ends of characters.\n\nMonospace -\n  All monospace characters have the same width.\n\n#Definition\n@docs Style, Variant\n\n#Strings\n@docs styleString, variantString\n\n#Functions\n@docs family, size, style, variant, weight\n",
    "aliases": [],
    "types": [
      {
        "name": "Style",
        "comment": " Represent the style of the font.\n\nNormalStyle -\n  The text is shown normally.\n\nItalic -\n  The text is shown in italics.\n\nOblique -\n  The text is \"leaning\" (oblique is very similar to\n  italic, but less supported).\n",
        "args": [],
        "cases": [
          [
            "NormalStyle",
            []
          ],
          [
            "Italic",
            []
          ],
          [
            "Oblique",
            []
          ]
        ]
      },
      {
        "name": "Variant",
        "comment": " Represent whether the font is small caps or normal.\n\nNormal -\n  The browser displays a normal font.\n\nSmallCaps -\n  The browser displays a small-caps font.\n",
        "args": [],
        "cases": [
          [
            "NormalVariant",
            []
          ],
          [
            "SmallCaps",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "family",
        "comment": " Set the font family for text.\n\n    import Css.Font as Font\n\n    -- [ (\"font-family\", \"\\\"Times New Roman\\\", Georgia, Serif\") ]\n    Font.family \"\\\"Times New Roman\\\", Georgia, Serif\" []\n",
        "type": "String -> Css.Styles -> Css.Styles"
      },
      {
        "name": "size",
        "comment": " Set the font size of text.\n\n    import Css.Font as Font\n\n    -- [ (\"font-size\", \"24px\") ]\n    Font.size 24 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "style",
        "comment": " Set the font style for text.\n\n    import Css.Font as Font\n\n    -- [ (\"font-style\", \"italic\") ]\n    Font.style Font.Italic []\n",
        "type": "Css.Font.Style -> Css.Styles -> Css.Styles"
      },
      {
        "name": "styleString",
        "comment": " Convert a style type to string form so it works in css.\n\n    import Css.Font as Font\n\n    Font.styleString Font.Italic -- \"italic\"\n",
        "type": "Css.Font.Style -> String"
      },
      {
        "name": "variant",
        "comment": " Set whether or not a text should be displayed in a small-caps font.\n\n    import Css.Font as Font\n\n    -- [ (\"font-variant\", \"small-caps\") ]\n    Font.variant Font.SmallCaps []\n",
        "type": "Css.Font.Variant -> Css.Styles -> Css.Styles"
      },
      {
        "name": "variantString",
        "comment": " Convert a variant type to string form so it works in css.\n\n    import Css.Font as Font\n\n    Font.variantString Font.SmallCaps -- \"small-caps\"\n",
        "type": "Css.Font.Variant -> String"
      },
      {
        "name": "weight",
        "comment": " Set the weight of the font. (Only values 1-9 have any significance)\n\n    import Css.Font as Font\n\n    -- [ (\"font-weight\", \"900\") ]\n    Font.weight 9 []\n",
        "type": "Int -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Gradient",
    "comment": " Gradients let you display smooth transitions between\ntwo or more specified colors.\n\n#Definitions\n@docs linear, radial\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "linear",
        "comment": " To create a linear gradient you must define at least two color stops.\nColor stops are the colors you want to render smooth transitions among.\nYou must also set the angle along with the gradient effect.\n\n    import Css.Gradient as Gradient\n\n    -- [ (\"background\", \"linear-gradient(90deg, rgba(255, 0, 0, 1), rgba(0, 255, 0, 1))\") ]\n    Gradient.linear 90 [ rgba 255 0 0 1, rgba 0 255 0 1 ] []\n",
        "type": "number -> List Color.Color -> Css.Styles -> Css.Styles"
      },
      {
        "name": "radial",
        "comment": " A radial gradient is defined by its center. To create a radial gradient\nyou must also define at least two color stops.\n\n    import Css.Gradient as Gradient\n\n    -- [ (\"background\", \"radial-gradient(rgba(255, 0, 0, 1), rgba(0, 255, 0, 1))\") ]\n    Gradient.radial [ rgba 255 0 0 1, rgba 0 255 0 1 ] []\n",
        "type": "List Color.Color -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.ListStyle",
    "comment": " ListStyle allows you to set different list item markers including images.\n\n#Definitions\n@docs Position, BulletType\n\n#String\n@docs positionString, bulletTypeString\n\n#Functions\n@docs image, position, bulletType\n",
    "aliases": [],
    "types": [
      {
        "name": "BulletType",
        "comment": " Represent the bullet type of list item marker in a list.\n\nDisc -\n  The marker is a filled circle.\n\nArmenian -\n  The marker is traditional Armenian numbering.\n\nCircle -\n  The marker is a circle.\n\nCjkIdeographic -\n  The marker is plain ideographic numbers.\n\nDecimal -\n  The marker is a number.\n\nDecimalLeadingZero -\n  The marker is a number with leading zeros\n  (01, 02, 03, etc.)\n\nGeorgian -\n  The marker is traditional Georgian numbering.\n\nHebrew -\n  The marker is traditional Hebrew numbering.\n\nHiragana -\n  The marker is traditional Hiragana numbering.\n\nHiraganaIroha -\n  The marker is traditional Hiragana iroha numbering.\n\nKatakana -\n  The marker is traditional Katakana numbering.\n\nKatakanaIroha -\n  The marker is traditional Katakana iroha numbering.\n\nLowerAlpha -\n  The marker is lower-alpha (a, b, c, d, e, etc.)\n\nLowerGreek -\n  The marker is lower-greek.\n\nLowerLatin -\n  The marker is lower-latin (a, b, c, d, e, etc.)\n\nLowerRoman -\n  The marker is lower-roman (i, ii, iii, iv, v, etc.)\n\nNone -\n  No marker is shown.\n\nSquare -\n  The marker is a square.\n\nUpperAlpha -\n  The marker is upper-alpha (A, B, C, D, E, etc.)\n\nUpperLatin -\n  The marker is upper-latin (A, B, C, D, E, etc.)\n\nUpperRoman -\n  The marker is upper-roman (I, II, III, IV, V, etc.)\n",
        "args": [],
        "cases": [
          [
            "Disc",
            []
          ],
          [
            "Armenian",
            []
          ],
          [
            "Circle",
            []
          ],
          [
            "CjkIdeographic",
            []
          ],
          [
            "Decimal",
            []
          ],
          [
            "DecimalLeadingZero",
            []
          ],
          [
            "Georgian",
            []
          ],
          [
            "Hebrew",
            []
          ],
          [
            "Hiragana",
            []
          ],
          [
            "HiraganaIroha",
            []
          ],
          [
            "Katakana",
            []
          ],
          [
            "KatakanaIroha",
            []
          ],
          [
            "LowerAlpha",
            []
          ],
          [
            "LowerGreek",
            []
          ],
          [
            "LowerLatin",
            []
          ],
          [
            "LowerRoman",
            []
          ],
          [
            "None",
            []
          ],
          [
            "Square",
            []
          ],
          [
            "UpperAlpha",
            []
          ],
          [
            "UpperLatin",
            []
          ],
          [
            "UpperRoman",
            []
          ]
        ]
      },
      {
        "name": "Position",
        "comment": " Represent if the list item markers should appear inside\nor outside the content flow.\n\nInside -\n  Indents the marker and the text.  The bullets appear inside the content flow.\n\nOutside -\n  Keeps the marker to the left of the text.  The bullets appear outside\n  the content flow.\n",
        "args": [],
        "cases": [
          [
            "Inside",
            []
          ],
          [
            "Outside",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "bulletType",
        "comment": "\n\n    import Css.ListStyle as ListStyle\n\n    -- [ (\"list-style-type\", \"katakana\") ]\n    ListStyle.bulletType ListStyle.Katakana []\n",
        "type": "Css.ListStyle.BulletType -> Css.Styles -> Css.Styles"
      },
      {
        "name": "bulletTypeString",
        "comment": " Convert a bullet type to string form so it works in css.\n\n    import Css.ListStyle as ListStyle\n\n    ListStyle.typeString ListStyle.Disc -- \"disc\"\n",
        "type": "Css.ListStyle.BulletType -> String"
      },
      {
        "name": "image",
        "comment": "\n\n    import Css.ListStyle as ListStyle\n\n    -- [ (\"list-style-image\", \"url(\\\"smiley.gif\\\")\") ]\n    ListStyle.image \"smiley.gif\" []\n",
        "type": "String -> Css.Styles -> Css.Styles"
      },
      {
        "name": "position",
        "comment": "\n\n    import Css.ListStyle as ListStyle\n\n    -- [ (\"list-style-position\", \"inside\") ]\n    ListStyle.position ListStyle.Inside []\n",
        "type": "Css.ListStyle.Position -> Css.Styles -> Css.Styles"
      },
      {
        "name": "positionString",
        "comment": " Convert a position type to string form so it works in css.\n\n    import Css.ListStyle as ListStyle\n\n    ListStye.positionString ListStyle.Inside -- \"inside\"\n",
        "type": "Css.ListStyle.Position -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Margin",
    "comment": " Margins define the space around elements.\n\n#Functions\n@docs bottom, left, right, top, all\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "all",
        "comment": " Set all the margins of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin\", \"10px 10px 5px 8px\")]\n    Margin.top 10 10 5 8 []\n",
        "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "bottom",
        "comment": " Set the bottom margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-bottom\", \"10px\")]\n    Margin.bottom 10 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "left",
        "comment": " Set the left margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-left\", \"10px\")]\n    Margin.left 10 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "right",
        "comment": " Set the right margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-right\", \"10px\")]\n    Margin.right 10 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "top",
        "comment": " Set the top margin of an element\n\n    import Css.Margin as Margin\n\n    -- [ (\"margin-top\", \"10px\")]\n    Margin.top 10 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Outline",
    "comment": " An outline is a line that is drawn around elements (outside the borders)\nto make the element \"stand out\".\n\n#Definition\n@docs Style\n\n#String\n@docs styleString\n\n#Funcitons\n@docs color, style, width, all\n",
    "aliases": [],
    "types": [
      {
        "name": "Style",
        "comment": " Represent the style of the outline\n\nNone -\n  Specifies no outline.\n\nHidden -\n  Specifies a hidden outline.\n\nDotted -\n  Specifies a dotted outline.\n\nDashed -\n  Specifies a dashed outline.\n\nSolid -\n  Specifies a solid outline.\n\nDouble -\n  Specifies a double outliner.\n\nGroove -\n  Specifies a 3D grooved outline.\n  The effect depends on the outline-color value.\n\nRidge -\n  Specifies a 3D ridged outline.\n  The effect depends on the outline-color value.\n\nInset -\n  Specifies a 3D inset outline.\n  The effect depends on the outline-color value.\n\nOutset -\n  Specifies a 3D outset outline.\n  The effect depends on the outline-color value.\n",
        "args": [],
        "cases": [
          [
            "None",
            []
          ],
          [
            "Hidden",
            []
          ],
          [
            "Dotted",
            []
          ],
          [
            "Dashed",
            []
          ],
          [
            "Solid",
            []
          ],
          [
            "Double",
            []
          ],
          [
            "Groove",
            []
          ],
          [
            "Ridge",
            []
          ],
          [
            "Inset",
            []
          ],
          [
            "Outset",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "all",
        "comment": " Set all of the outline properties in one function\n\n    import Css.Outline as Outline\n\n    {--\n      [ (\"outline-color\", \"rgba(255, 0, 0, 1)\")\n      , (\"outline-style\", \"dashed\")\n      , (\"outline-width\", \"2px\")\n      ]\n    --}\n    Outline.all (rgba 255 0 0 1) Outline.Dashed 2 []\n",
        "type": "Color.Color -> Css.Outline.Style -> number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "color",
        "comment": " Set the color of the outline.\n\n    import Color exposing (rgba)\n    import Css.Outline as Outline\n\n    -- [ (\"outline-color\", \"rgba(255, 0, 0, 1)\") ]\n    Outline.color (rgba 255 0 0 1) []\n\n",
        "type": "Color.Color -> Css.Styles -> Css.Styles"
      },
      {
        "name": "style",
        "comment": " Set the style of the outline.\n\n    import Css.Outline as Outline\n\n    -- [ (\"outline-style\", \"dashed\") ]\n    Outline.style Outline.Dashed []\n",
        "type": "Css.Outline.Style -> Css.Styles -> Css.Styles"
      },
      {
        "name": "styleString",
        "comment": " Convert a style type to string form so it works in css.\n\n    import Css.Outline as Outline\n\n    Outline.styleString Outline.Groove -- \"groove\"\n",
        "type": "Css.Outline.Style -> String"
      },
      {
        "name": "width",
        "comment": " Set the width of the outline.\n\n    import Css.Outline as Outline\n\n    -- [ (\"outline-width\", \"2px\") ]\n    Outline.width 2 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Text",
    "comment": " Change the way that text is displayed on the screen.\n\n#Definitions\n@docs Direction, Align, Decoration, UnicodeBidi, WhiteSpace\n\n#Strings\n@docs directionString, alignString, decorationString, unicodeBidiString, whiteSpaceString\n\n#Functions\n@docs color, direction, letterSpacing, lineHeight, align, decoration, indent, unicodeBidi, whiteSpace, wordSpacing\n",
    "aliases": [],
    "types": [
      {
        "name": "Align",
        "comment": " Specifies the horizontal alignment of text.\n\nLeft -\n  Aligns the text to the left.\n\nRight -\n  Aligns the text to the right.\n\nCenter -\n  Centers the text.\n\nJustify -\n  Stretches the lines so that each line has equal width\n  (like in newspapers and magazines).\n",
        "args": [],
        "cases": [
          [
            "Left",
            []
          ],
          [
            "Right",
            []
          ],
          [
            "Center",
            []
          ],
          [
            "Justify",
            []
          ]
        ]
      },
      {
        "name": "Decoration",
        "comment": " Represent the decoration added to text.\n\nNoDecoration -\n  Defines a normal text.\n\nUnderline -\n  Defines a line below the text.\n\nOverline -\n  Defines a line above the text.\n\nLineThrough -\n  Defines a line through the text.\n",
        "args": [],
        "cases": [
          [
            "NoDecoration",
            []
          ],
          [
            "Underline",
            []
          ],
          [
            "Overline",
            []
          ],
          [
            "LineThrough",
            []
          ]
        ]
      },
      {
        "name": "Direction",
        "comment": " Represent the text direction/writing direction.\n\nLtr -\n  The writing direction is left-to-right.\n\nRtl -\n  The writing direction is right-to-left.\n",
        "args": [],
        "cases": [
          [
            "Ltr",
            []
          ],
          [
            "Rtl",
            []
          ]
        ]
      },
      {
        "name": "UnicodeBidi",
        "comment": " The unicode-bidi property is used together with the direction property to\nset or return whether the text should be overridden to support multiple\nlanguages in the same document.\n\nNormalUnicodeBidi -\n  - Does not use an additional level of embedding.\n\nEmbed -\n  Creates an additional level of embedding.\n\nBidiOverride -\n  Creates an additional level of embedding. Reordering depends on the direction\n  property.\n",
        "args": [],
        "cases": [
          [
            "NormalUnicodeBidi",
            []
          ],
          [
            "Embed",
            []
          ],
          [
            "BidiOverride",
            []
          ]
        ]
      },
      {
        "name": "WhiteSpace",
        "comment": " Represent how white space inside an element is handled.\n\nNormalWhiteSpace -\n  Sequences of whitespace will collapse into a single whitespace. Text will\n  wrap when necessary.\n\nNoWrap -\n  Sequences of whitespace will collapse into a single whitespace.  Text will\n  never wrap to the next line. The text continues on the same line until\n  a <br> tag is encountered.\n\nPre -\n  Whitespace is preserved by the browser. Text will only wrap on line breaks.\n  Acts like the <pre> tag in HTML.\n\nPreLine -\n  Sequences of whitespace will collapse into a single whitespace.\n  Text will wrap when necessary, and on line breaks.\n\nPreWrap -\n  Whitespace is preserved by the browser. Text will wrap when necessary,\n  and on line breaks.\n",
        "args": [],
        "cases": [
          [
            "NormalWhiteSpace",
            []
          ],
          [
            "NoWrap",
            []
          ],
          [
            "Pre",
            []
          ],
          [
            "PreLine",
            []
          ],
          [
            "PreWrap",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "align",
        "comment": " Set the horizontal alignment of text.\n\n    import Css.Text as Text\n\n    -- [ (\"text-align\", \"left\") ]\n    Text.align Text.Left []\n",
        "type": "Css.Text.Align -> Css.Styles -> Css.Styles"
      },
      {
        "name": "alignString",
        "comment": " Convert an align type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.alignString Text.Left -- \"left\"\n",
        "type": "Css.Text.Align -> String"
      },
      {
        "name": "color",
        "comment": " Set the color of text.\n\n    import Css.Text as Text\n\n    -- [ (\"color\", \"rgba(255, 0, 0, 1)\") ]\n    Text.color (rgba 255 0 0 1) []\n",
        "type": "Color.Color -> Css.Styles -> Css.Styles"
      },
      {
        "name": "decoration",
        "comment": " Set the decoration added to text.\n\n    import Css.Text as Text\n\n    -- [ (\"text-decoration\", \"underline\") ]\n    Text.decoration Text.Underline []\n",
        "type": "Css.Text.Decoration -> Css.Styles -> Css.Styles"
      },
      {
        "name": "decorationString",
        "comment": " Convert an decoration type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.decorationString Text.Underline -- \"underline\"\n",
        "type": "Css.Text.Decoration -> String"
      },
      {
        "name": "direction",
        "comment": " Set the text direction/writing direction.\n\n    import Css.Text as Text\n\n    -- [ (\"direction\", \"ltr\") ]\n    Text.direction Text.Ltr []\n",
        "type": "Css.Text.Direction -> Css.Styles -> Css.Styles"
      },
      {
        "name": "directionString",
        "comment": " Convert a direction type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.directionString Text.Ltr -- \"ltr\"\n",
        "type": "Css.Text.Direction -> String"
      },
      {
        "name": "indent",
        "comment": " Set the indentation of the first line in a text-block.\n\n    import Css.Text as Text\n\n    -- [ (\"text-indent\", \"20px\") ]\n    Text.indent 20 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "letterSpacing",
        "comment": " Increases or decreases the space between characters in a text.\n\n    import Css.Text as Text\n\n    -- [ (\"letter-spacing\", \"2px\") ]\n    Text.letterSpacing 2 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "lineHeight",
        "comment": " Set the line height.\n\n    import Css.Text as Text\n\n    -- [ (\"line-height\", \"14px\") ]\n    Text.lineHeight 14 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "unicodeBidi",
        "comment": " Used together with the direction property to set or return whether\nthe text should be overridden to support multiple languages\nin the same document.\n\n    import Css.Text as Text\n\n    -- [ (\"unicode-bidi\", \"bidi-override\") ]\n    Text.unicodeBidi Text.BidiOverride []\n",
        "type": "Css.Text.UnicodeBidi -> Css.Styles -> Css.Styles"
      },
      {
        "name": "unicodeBidiString",
        "comment": " Convert an unicode bidi type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.unicodeBidiString Text.Embed -- \"embed\"\n",
        "type": "Css.Text.UnicodeBidi -> String"
      },
      {
        "name": "whiteSpace",
        "comment": " Set how white space inside an element is handled.\n\n    import Css.Text as Text\n\n    -- [ (\"white-space\", \"pre\") ]\n    Text.whiteSpace Text.Pre []\n",
        "type": "Css.Text.WhiteSpace -> Css.Styles -> Css.Styles"
      },
      {
        "name": "whiteSpaceString",
        "comment": " Convert an white space type to string form so it works with css.\n\n    import Css.Text as Text\n\n    Text.whiteSpaceString Text.Pre -- \"pre\"\n",
        "type": "Css.Text.WhiteSpace -> String"
      },
      {
        "name": "wordSpacing",
        "comment": " Increases or decreases the space between words in a text.\n\n    import Css.Text as Text\n\n    -- [ (\"word-spacing\", \"2px\") ]\n    Text.wordSpacing 2 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Transform3",
    "comment": " Transforms allow you to translate, rotate, scale, and skew elements.\nA transformation is an effect that lets an element change shape, size,\nand position.\n\n#Functions\n@docs transform3, perspective, translate3, rotate3, scale3\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "perspective",
        "comment": " Defines a perspective view for a 3D transformed element.\n\n  -- [ (\"transform\", \"perspective(800)\") ]\n  transform3 [ perspective 800 ]\n",
        "type": "number -> String"
      },
      {
        "name": "rotate3",
        "comment": " Rotates the element around a specified axis at a given degree.\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"rotate3d(1, 1, 1, 45deg)\") ]\n    transform3 [ rotate3 1 1 1 45 ] []\n",
        "type": "number -> number -> number -> number -> String"
      },
      {
        "name": "scale3",
        "comment": " Scale an element along the given axis.\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"scale3d(1, 2, 1)\") ]\n    transform3 [ scale3 1 2 1 ] []\n",
        "type": "number -> number -> number -> String"
      },
      {
        "name": "transform3",
        "comment": " This function takes a list of transforms and applies them\nto the element.\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"translate3(100px, 100px, 0px) rotate3(1, 1, 1, 45deg)\") ]\n    transform3 [ translate3 100 100 0, rotate1 1 1 1 45 ] []\n",
        "type": "List String -> Css.Styles -> Css.Styles"
      },
      {
        "name": "translate3",
        "comment": " Moves an element from its current position (according to the\nparameters given for the X-axis and the Y-axis).\n\n    import Css.Transform3 exposing (..)\n\n    -- [ (\"transform\", \"translate3d(100px, 100px, 0px)\") ]\n    transform3 [ translate3 100 100 0 ] []\n",
        "type": "number -> number -> number -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Transform2",
    "comment": " Transforms allow you to translate, rotate, scale, and skew elements.\nA transformation is an effect that lets an element change shape, size,\nand position.\n\n#Functions\n@docs transform2, translate2, rotate2, scale2, skew2, matrix2\n\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "matrix2",
        "comment": " Combines all the 2D transform methods into one.\n\nThe matrix method takes six parameters, containing mathematic functions,\nwhich allow you to rotate, scale, move (translate), and skew elements.\n\nThe default matrix has the following form\n\n1 0 0\n\n1 0 0\n\n0 0 1\n\nThis means that the element has a scale of 1 in the x and y direction,\nas well as no skew and no translation.\n\nThe browser multiplies this by a vector which represents a particular\npoint within the local coordinate space.\n\nx\n\ny\n\n1\n\nIf you look at the parameters that this function takes you may also notice\nthat it doesn't take a rotation. So how do we accomplish this? By placing\nopposite values into the x and y skew you will have a rotation.\n\n1 -0.5 0.5\n\n1   0   0\n\n0   0   1\n\nWe only need to specify the first six parameters as the last three will always\nbe 0 0 1.\n\nscalex skewx skewy\n\nscaley   x     y\n\n  0      0     1\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"matrix(1, 0, 0, 1, 0, 0)\") ]\n    transform2 [ matrix2 1 0 0 1 0 0 ] []\n",
        "type": "number -> number -> number -> number -> number -> number -> String"
      },
      {
        "name": "rotate2",
        "comment": " Rotates the element clockwise or counter-clockwise according\nto the given degree.\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"rotate(45deg)\") ]\n    transform2 [ rotate2 45 ] []\n",
        "type": "number -> String"
      },
      {
        "name": "scale2",
        "comment": " Increases or decreases the size of an element (according\nto the parameters given for the width and height).\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"scale(0.5, 0.5)\") ]\n    transform2 [ scale2 0.5 0.5 ] []\n",
        "type": "number -> number -> String"
      },
      {
        "name": "skew2",
        "comment": " Skews an element along the X and Y-axis by the given angles.\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"skew(20deg, 20deg)\") ]\n    transform2 [ skew2 20 20 ] []\n",
        "type": "number -> number -> String"
      },
      {
        "name": "transform2",
        "comment": " This function takes a list of transforms and applies them\nto the element.\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"translate(100px, 100px) rotate(45deg)\") ]\n    transform2 [ translate2 100 100, rotate2 45 ] []\n",
        "type": "List String -> Css.Styles -> Css.Styles"
      },
      {
        "name": "translate2",
        "comment": " Moves an element from its current position (according to the\nparameters given for the X-axis and the Y-axis).\n\n    import Css.Transform2 exposing (..)\n\n    -- [ (\"transform\", \"translate(100px, 100px)\") ]\n    transform2 [ translate2 100 100 ] []\n",
        "type": "number -> number -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Sheet",
    "comment": " Create a stylesheet from a list of rules which are a list of Styles\n#Get a single name, value pair as string\n@docs createRule\n@docs sheetAsString\n@docs ruleAsString\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "createRule",
        "comment": " Create a name, styles pair ",
        "type": "String -> Css.Styles -> Css.Sheet.Rule"
      },
      {
        "name": "ruleAsString",
        "comment": " Get string representation of a rule ",
        "type": "Css.Sheet.Rule -> String"
      },
      {
        "name": "sheetAsString",
        "comment": " Get string representation of a whole sheet ",
        "type": "Css.Sheet.Sheet -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Padding",
    "comment": " Padding defines the space between the element border and the element content.\n\n#Functions\n@docs bottom, left, right, top, all\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "all",
        "comment": " Set all the padding an element has\n\n    import Css.Padding as Padding\n\n    {-- [ (\"padding-top\", \"10px\")\n        , (\"padding-right\", \"20px\")\n        , (\"padding-bottom\", \"16px\")\n        , (\"padding-left\", \"8px\")]\n    --}\n    Padding.all 10 20 16 8 []\n",
        "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "bottom",
        "comment": " Set the bottom padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-bottom\", \"20px\") ]\n    Padding.bottom 20 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "left",
        "comment": " Set the left padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-left\", \"20px\") ]\n    Padding.left 20 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "right",
        "comment": " Set the right padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-right\", \"20px\") ]\n    Padding.right 20 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "top",
        "comment": " Set the top padding of an element\n\n    import Css.Padding as Padding\n\n    -- [ (\"padding-top\", \"20px\") ]\n    Padding.top 20 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Shadow",
    "comment": " With CSS3 you can add shadow to text and to elements.\n\n#Definitions\n@docs Text, Box\n\n#Strings\n@docs textString, listTextString, boxString, listBoxString\n\n#Functions\n@docs text, box\n",
    "aliases": [
      {
        "name": "Box",
        "comment": " Represent a box shadow.\n\nInt -\n  The position of the horizontal shadow.\n  Negative values are allowed.\n\nInt -\n  The position of the vertical shadow.\n  Negative values are allowed.\n\nInt -\n  The blur radius.\n\nInt -\n  The size of shadow. Negative values are allowed.\n\nColor -\n  The color of the shadow.\n\nBool -\n  Changes the shadow from an outer shadow\n  (outset) to an inner shadow.\n",
        "args": [],
        "type": "( Int, Int, Int, Int, Color.Color, Bool )"
      },
      {
        "name": "Text",
        "comment": " Represent a text shadow.\n\nInt -\n  The position of the horizontal shadow.\n  Negative values are allowed.\n\nInt -\n  The position of the vertical shadow.\n  Negative values are allowed.\n\nInt -\n  The blur radius.\n\nColor -\n  The color of the shadow.\n",
        "args": [],
        "type": "( Int, Int, Int, Color.Color )"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "box",
        "comment": " Attach a shadow to an element.\n\n    import Css.Shadow as Shadow\n\n    -- [ (\"box-shadow\", \"10px 10px 10px 5px rgba(0, 0, 0, 1)\") ]\n    Shadow.box [ (10, 10, 10, 5, (rgba 0 0 0 1), false ] []\n",
        "type": "List Css.Shadow.Box -> Css.Styles -> Css.Styles"
      },
      {
        "name": "boxString",
        "comment": " Convert a box shadow to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- \"10px 10px 10px 5px rgba(0, 0, 0, 1)\"\n    shadow.boxString (10, 10, 10, 5, (rgba 0 0 0 1), false)\n",
        "type": "Css.Shadow.Box -> String"
      },
      {
        "name": "listBoxString",
        "comment": " Convert a list of box shadows to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- [ ( \"box-shadow\" , \"10px 10px 10px rgba(0, 0, 0, 1)\") ]\n    Shadow.listTextString [ (10, 10, 10, (rgba 0 0 0 1)) ]\n",
        "type": "String -> List Css.Shadow.Box -> String"
      },
      {
        "name": "listTextString",
        "comment": " Convert a list of text shadows to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- [ ( \"text-shadow\" , \"10px 10px 10px rgba(0, 0, 0, 1) ]\n    Shadow.listTextString [ (10, 10, 10, (rgba 0 0 0 1)) ]\n",
        "type": "String -> List Css.Shadow.Text -> String"
      },
      {
        "name": "text",
        "comment": " Set the shadow effect added to text.\n\n    import Css.Shadow as Shadow\n\n    -- [ (\"text-shadow\", \"10px 10px 10px rgba(0, 0, 0, 1)\") ]\n    Shadow.text [ (10, 10, 10, rgba 0 0 0 1) ] []\n",
        "type": "List Css.Shadow.Text -> Css.Styles -> Css.Styles"
      },
      {
        "name": "textString",
        "comment": " Convert a text shadow to string form so it works with css.\n\n    import Css.Shadow as Shadow\n\n    -- \"10px 10px 10px rgba(0, 0, 0, 1)\"\n    Shadow.textString (10, 10, 10, (rgba 0 0 0 1))\n",
        "type": "Css.Shadow.Text -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Position",
    "comment": " Positioning allows you to position an element.  It can also place\nand element behind another, and specify what should happen when an\nelement's content is too big.\n\n#Definitions\n@docs Overflow, Position\n\n#Strings\n@docs overflowString, positionString\n\n#Functions\n@docs clip, bottom, left, overflow, position, right, top, zIndex\n",
    "aliases": [],
    "types": [
      {
        "name": "Overflow",
        "comment": " Represent what happens if content overflows an element's box.\n\nAutoOverflow -\n  If overflow clipped, a scroll-bar should be added to see the\n  rest of the content.\n\nHidden -\n  The overflow is clipped, and the rest of the content will be invisible.\n\nScroll -\n  The overflow is clipped, but a scroll-bar is added to see the\n  rest of the content.\n\nVisible -\n  The overflow is not clipped. It renders outside the element's box.\n",
        "args": [],
        "cases": [
          [
            "AutoOverflow",
            []
          ],
          [
            "Hidden",
            []
          ],
          [
            "Scroll",
            []
          ],
          [
            "Visible",
            []
          ]
        ]
      },
      {
        "name": "Position",
        "comment": " Represent the type of positioning for an element.\n\nAbsolute -\n  The element is positioned relative to its first positioned\n  (not static) ancestor element.\n\nFixed -\n  The element is positioned relative to the browser window.\n\nRelative -\n  The element is positioned relative to its normal position,\n  so \"left:20\" adds 20 pixels to the element's LEFT position.\n\nStatic -\n  Elements render in order, as they appear in the document flow.\n",
        "args": [],
        "cases": [
          [
            "Absolute",
            []
          ],
          [
            "Fixed",
            []
          ],
          [
            "Relative",
            []
          ],
          [
            "Static",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "bottom",
        "comment": " Set the bottom margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"bottom\", \"20px\") ]\n    Position.bottom 20 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "clip",
        "comment": " What happens if an image is larger than its containing element?\nThe clip property lets you specify a rectangle to clip an absolutely\npositioned element. The rectangle is specified as four coordinates,\nall from the top-left corner of the element to be clipped.\n\n    import Css.Position as Position\n\n    -- [ (\"clip\", \"rect(0px, 60px, 200px, 0px)\") ]\n    Position.clip 0 60 200 0 []\n",
        "type": "number -> number -> number -> number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "left",
        "comment": " Set the left margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"cursor\", \"crosshair\") ]\n    Position.cursor Position.CrossHair []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "overflow",
        "comment": " Set what happens if content overflows an element's box.\n\n    import Css.Position as Position\n\n    -- [ (\"overflow\", \"hidden\") ]\n    Position.overflow Position.Hidden []\n",
        "type": "Css.Position.Overflow -> Css.Styles -> Css.Styles"
      },
      {
        "name": "overflowString",
        "comment": " Convert a overflow type to string form so it works with css.\n\n    import Css.Position as Position\n\n    Position.overflowString Position.Hidden -- \"hidden\"\n",
        "type": "Css.Position.Overflow -> String"
      },
      {
        "name": "position",
        "comment": " Set the type of positioning for an element.\n\n    import Css.Position as Position exposing (position)\n\n    -- [ (\"position\", \"fixed\") ]\n    position Position.Fixed []\n",
        "type": "Css.Position.Position -> Css.Styles -> Css.Styles"
      },
      {
        "name": "positionString",
        "comment": " Convert a position type to string form so it works with css.\n\n    import Css.Position as Position\n\n    Position.positionString Position.Absolute -- \"absolute\"\n",
        "type": "Css.Position.Position -> String"
      },
      {
        "name": "right",
        "comment": " Set the right margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"right\", \"24px\") ]\n    Position.right 24 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "top",
        "comment": " Set the top margin edge for a positioned box.\n\n    import Css.Position as Position\n\n    -- [ (\"top\", \"24px\") ]\n    Position.top 24 []\n",
        "type": "number -> Css.Styles -> Css.Styles"
      },
      {
        "name": "zIndex",
        "comment": " Set the stack order of an element.\n\n    import Css.Position as Position\n\n    -- [ (\"z-index\", \"2\") ]\n    Position.zIndex 2 []\n",
        "type": "Int -> Css.Styles -> Css.Styles"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css.Border.Style",
    "comment": " This library allows you to set the\nstyle of the border.\n\n# Definition\n@docs Style\n\n# String\n@docs string\n",
    "aliases": [],
    "types": [
      {
        "name": "Style",
        "comment": " Represent the types of styles that can be\napplied to the border.\n\nNone -\n  Default value. Specifies no border.\n\nHidden -\n  The same as \"none\", except in border conflict\n  resolution for table elements.\n\nDotted -\n  Specifies a dotted border.\n\nDashed -\n  Specifies a dashed border.\n\nSolid -\n  Specifies a solid border.\n\nDouble -\n  Specifies a double border.\n\nGroove -\n  Specifies a 3D grooved border.  The effect\n  depends on the border-color value.\n\nRidge -\n  Specifies a 3D ridged border.\n  The effect depends on the border-color value.\n\nInset -\n  Specifies a 3D inset border.\n  The effect depends on the border-color value.\n\nOutset -\n  Specifies a 3D outset border.\n  The effect depends on the border-color value.\n",
        "args": [],
        "cases": [
          [
            "None",
            []
          ],
          [
            "Hidden",
            []
          ],
          [
            "Dotted",
            []
          ],
          [
            "Dashed",
            []
          ],
          [
            "Solid",
            []
          ],
          [
            "Double",
            []
          ],
          [
            "Groove",
            []
          ],
          [
            "Ridge",
            []
          ],
          [
            "Inset",
            []
          ],
          [
            "Outset",
            []
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "string",
        "comment": " Convert a style to the string form so it works with css.\n\n    import Css.Style as Style\n\n    Style.string Style.Groove [] -- \"groove\"\n",
        "type": "Css.Border.Style.Style -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  },
  {
    "name": "Css",
    "comment": " This module provides a few helper functions that make dealing with\ncss in Elm more pleasant and concise.\n\n#Definition\n@docs Styles\n\n#String\n@docs colorString\n\n#Functions\n@docs px, url, setViewport, style\n",
    "aliases": [
      {
        "name": "Styles",
        "comment": " This type alias allows us to be more expressive. ",
        "args": [],
        "type": "List ( String, String )"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "colorString",
        "comment": " Convert a color type to string form so it works with css.\n\n    import Css exposing (colorString)\n\n    colorString (rgba 0 0 0 1) -- \"rgba(0, 0, 0, 1)\"\n",
        "type": "Color.Color -> String"
      },
      {
        "name": "px",
        "comment": " Add a px post fix to the end of any integer.\n\n    import Css exposing (px)\n\n    px 5 -- \"5px\"\n",
        "type": "number -> String"
      },
      {
        "name": "setViewport",
        "comment": " Set the proper width and scaling to allow for responsive design ",
        "type": "Html.Html"
      },
      {
        "name": "style",
        "comment": " Add a css style to a list of styles.\n\n    import Css\n\n    [ (\"cursor\", \"zoom-out\") ]\n    Css.style \"cursor\" \"zoom-out\" []\n",
        "type": "String -> String -> Css.Styles -> Css.Styles"
      },
      {
        "name": "url",
        "comment": " Add a url prefix to a string.\n\n    import Css exposing (url)\n\n    url \"smiley.gif\" -- \"url(\\\"smiley.gif\\\")\"\n",
        "type": "String -> String"
      }
    ],
    "generated-with-elm-version": "0.16.0"
  }
]