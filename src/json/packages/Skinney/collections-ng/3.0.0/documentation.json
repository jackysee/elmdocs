[
  {
    "name": "CollectionsNg.Set",
    "comment": " A set of unique values. The values can be any comparable type. This\nincludes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or lists\nof comparable types.\n\n# Sets\n@docs Set\n\n# Build\n@docs empty, singleton, insert, remove\n\n# Query\n@docs isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff\n\n# Lists\n@docs toList, fromList\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n",
    "aliases": [
      {
        "name": "Set",
        "comment": " Represents a set of unique values. So `(Set Int)` is a set of integers and\n`(Set String)` is a set of strings.\n",
        "args": [
          "comparable"
        ],
        "type": "CollectionsNg.Dict.Dict comparable ()"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "diff",
        "comment": " Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set.\n",
        "type": "CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
      },
      {
        "name": "empty",
        "comment": " Create an empty set.\n",
        "type": "CollectionsNg.Set.Set comparable"
      },
      {
        "name": "filter",
        "comment": " Create a new set consisting only of elements which satisfy a predicate.\n",
        "type": "(comparable -> Bool) -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
      },
      {
        "name": "foldl",
        "comment": " Fold over the values in a set, in order from lowest to highest.\n",
        "type": "(comparable -> b -> b) -> b -> CollectionsNg.Set.Set comparable -> b"
      },
      {
        "name": "foldr",
        "comment": " Fold over the values in a set, in order from highest to lowest.\n",
        "type": "(comparable -> b -> b) -> b -> CollectionsNg.Set.Set comparable -> b"
      },
      {
        "name": "fromList",
        "comment": " Convert a list into a set, removing any duplicates.\n",
        "type": "List comparable -> CollectionsNg.Set.Set comparable"
      },
      {
        "name": "insert",
        "comment": " Insert a value into a set.\n",
        "type": "comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
      },
      {
        "name": "intersect",
        "comment": " Get the intersection of two sets. Keeps values that appear in both sets.\n",
        "type": "CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
      },
      {
        "name": "isEmpty",
        "comment": " Determine if a set is empty.\n",
        "type": "CollectionsNg.Set.Set comparable -> Bool"
      },
      {
        "name": "map",
        "comment": " Map a function onto a set, creating a new set with no duplicates.\n",
        "type": "(comparable -> comparable') -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable'"
      },
      {
        "name": "member",
        "comment": " Determine if a value is in a set.\n",
        "type": "comparable -> CollectionsNg.Set.Set comparable -> Bool"
      },
      {
        "name": "partition",
        "comment": " Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n",
        "type": "(comparable -> Bool) -> CollectionsNg.Set.Set comparable -> ( CollectionsNg.Set.Set comparable , CollectionsNg.Set.Set comparable )"
      },
      {
        "name": "remove",
        "comment": " Remove a value from a set. If the value is not found, no changes are made.\n",
        "type": "comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
      },
      {
        "name": "singleton",
        "comment": " Create a set with one value.\n",
        "type": "comparable -> CollectionsNg.Set.Set comparable"
      },
      {
        "name": "size",
        "comment": " Determine the number of elements in a set.\n",
        "type": "CollectionsNg.Set.Set comparable -> Int"
      },
      {
        "name": "toList",
        "comment": " Convert a set into a list, sorted from lowest to highest.\n",
        "type": "CollectionsNg.Set.Set comparable -> List comparable"
      },
      {
        "name": "union",
        "comment": " Get the union of two sets. Keep all values.\n",
        "type": "CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable -> CollectionsNg.Set.Set comparable"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "CollectionsNg.Dict",
    "comment": " A dictionary mapping unique keys to values. The keys can be any comparable\ntype. This includes `Int`, `Float`, `Time`, `Char`, `String`, and tuples or\nlists of comparable types.\n\n# Dictionary\n@docs Dict\n\n# Build\n@docs empty, singleton, insert, update, remove\n\n# Query\n@docs get, isEmpty, member, size\n\n# Combine\n@docs union, intersect, diff, merge\n\n# Lists\n@docs toList, fromList, keys, values\n\n# Transform\n@docs map, foldl, foldr, filter, partition\n",
    "aliases": [
      {
        "name": "Dict",
        "comment": " A dictionary of keys and values. So a `(Dict String User)` is a dictionary\nthat lets you look up a `String` (such as user names) and find the associated\n`User`.\n",
        "args": [
          "comparable",
          "v"
        ],
        "type": "CollectionsNg.Hamt.Tree comparable v"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "diff",
        "comment": " Keep a key-value pair when its key does not appear in the second Dictionary.\n",
        "type": "CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "empty",
        "comment": " Create an empty dictionary.\n",
        "type": "CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "filter",
        "comment": " Keep a key-value pair when it satisfies a predicate.\n",
        "type": "(comparable -> v -> Bool) -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "foldl",
        "comment": " Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key.\n",
        "type": "(comparable -> v -> b -> b) -> b -> CollectionsNg.Dict.Dict comparable v -> b"
      },
      {
        "name": "foldr",
        "comment": " Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key.\n",
        "type": "(comparable -> v -> b -> b) -> b -> CollectionsNg.Dict.Dict comparable v -> b"
      },
      {
        "name": "fromList",
        "comment": " Convert an association list into a dictionary.\n",
        "type": "List ( comparable, v ) -> CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "get",
        "comment": " Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n",
        "type": "comparable -> CollectionsNg.Dict.Dict comparable v -> Maybe.Maybe v"
      },
      {
        "name": "insert",
        "comment": " Insert a key-value pair into a dictionary. Replaces value when there is\na collision.\n",
        "type": "comparable -> v -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "intersect",
        "comment": " Keep a key-value pair when its key appears in the second Dictionary.\nPreference is given to values in the first Dictionary.\n",
        "type": "CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "isEmpty",
        "comment": " Determine if a dictionary is empty.\n\n    isEmpty empty == True\n",
        "type": "CollectionsNg.Dict.Dict comparable v -> Bool"
      },
      {
        "name": "keys",
        "comment": " Get all of the keys in a dictionary, sorted from lowest to highest.\n\n    keys (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [0,1]\n",
        "type": "CollectionsNg.Dict.Dict comparable v -> List comparable"
      },
      {
        "name": "map",
        "comment": " Apply a function to all values in a dictionary.\n",
        "type": "(comparable -> a -> b) -> CollectionsNg.Dict.Dict comparable a -> CollectionsNg.Dict.Dict comparable b"
      },
      {
        "name": "member",
        "comment": " Determine if a key is in a dictionary.\n",
        "type": "comparable -> CollectionsNg.Dict.Dict comparable v -> Bool"
      },
      {
        "name": "merge",
        "comment": " The most general way of combining two dictionaries. You provide three\naccumulators for when a given key appears:\n  1. Only in the left dictionary.\n  2. In both dictionaries.\n  3. Only in the right dictionary.\nYou then traverse all the keys from lowest to highest, building up whatever\nyou want.\n",
        "type": "(comparable -> a -> result -> result) -> (comparable -> a -> b -> result -> result) -> (comparable -> b -> result -> result) -> CollectionsNg.Dict.Dict comparable a -> CollectionsNg.Dict.Dict comparable b -> result -> result"
      },
      {
        "name": "partition",
        "comment": " Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n",
        "type": "(comparable -> v -> Bool) -> CollectionsNg.Dict.Dict comparable v -> ( CollectionsNg.Dict.Dict comparable v , CollectionsNg.Dict.Dict comparable v )"
      },
      {
        "name": "remove",
        "comment": " Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made.\n",
        "type": "comparable -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "singleton",
        "comment": " Create a dictionary with one key-value pair.\n",
        "type": "comparable -> v -> CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "size",
        "comment": " Determine the number of key-value pairs in the dictionary.\n",
        "type": "CollectionsNg.Dict.Dict comparable v -> Int"
      },
      {
        "name": "toList",
        "comment": " Convert a dictionary into an association list of key-value pairs, sorted by keys.\n",
        "type": "CollectionsNg.Dict.Dict comparable v -> List ( comparable, v )"
      },
      {
        "name": "union",
        "comment": " Combine two dictionaries. If there is a collision, preference is given\nto the first dictionary.\n",
        "type": "CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "update",
        "comment": " Update the value of a dictionary for a specific key with a given function.\n",
        "type": "comparable -> (Maybe.Maybe v -> Maybe.Maybe v) -> CollectionsNg.Dict.Dict comparable v -> CollectionsNg.Dict.Dict comparable v"
      },
      {
        "name": "values",
        "comment": " Get all of the values in a dictionary, in the order of their keys.\n\n    values (fromList [(0,\"Alice\"),(1,\"Bob\")]) == [\"Alice\", \"Bob\"]\n",
        "type": "CollectionsNg.Dict.Dict comparable v -> List v"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "CollectionsNg.Array",
    "comment": " Fast immutable arrays. The elements in an array must have the\nsame type.\n\n# Arrays\n@docs Array\n\n# Creation\n@docs empty, repeat, initialize, fromList\n\n# Query\n@docs isEmpty, length, get\n\n# Manipulate\n@docs set, push, append, slice\n\n# Lists\n@docs toList, toIndexedList\n\n# Transform\n@docs map, indexedMap, filter, foldl, foldr\n",
    "aliases": [
      {
        "name": "Array",
        "comment": " Representation of fast immutable arrays. You can create arrays of integers\n(`Array Int`) or strings (`Array String`) or any other type of value you can\ndream up.\n",
        "args": [
          "a"
        ],
        "type": "{ length : Int, nodes : CollectionsNg.Hamt.Tree Int a }"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "append",
        "comment": " Append two arrays to a new one.\n\n    append (repeat 2 42) (repeat 3 81) == fromList [42,42,81,81,81]\n",
        "type": "CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
      },
      {
        "name": "empty",
        "comment": " Return an empty array.\n\n    length empty == 0\n",
        "type": "CollectionsNg.Array.Array a"
      },
      {
        "name": "filter",
        "comment": " Keep only elements that satisfy the predicate:\n\n    filter isEven (fromList [1..6]) == (fromList [2,4,6])\n",
        "type": "(a -> Bool) -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
      },
      {
        "name": "foldl",
        "comment": " Reduce an array from the left. Read `foldl` as fold from the left.\n\n    foldl (::) [] (fromList [1,2,3]) == [3,2,1]\n",
        "type": "(a -> b -> b) -> b -> CollectionsNg.Array.Array a -> b"
      },
      {
        "name": "foldr",
        "comment": " Reduce an array from the right. Read `foldr` as fold from the right.\n\n    foldr (+) 0 (repeat 3 5) == 15\n",
        "type": "(a -> b -> b) -> b -> CollectionsNg.Array.Array a -> b"
      },
      {
        "name": "fromList",
        "comment": " Create an array from a list.\n",
        "type": "List a -> CollectionsNg.Array.Array a"
      },
      {
        "name": "get",
        "comment": " Return Just the element at the index or Nothing if the index is out of range.\n\n    get  0 (fromList [0,1,2]) == Just 0\n    get  2 (fromList [0,1,2]) == Just 2\n    get  5 (fromList [0,1,2]) == Nothing\n    get -1 (fromList [0,1,2]) == Nothing\n",
        "type": "Int -> CollectionsNg.Array.Array a -> Maybe.Maybe a"
      },
      {
        "name": "indexedMap",
        "comment": " Apply a function on every element with its index as first argument.\n\n    indexedMap (*) (fromList [5,5,5]) == fromList [0,5,10]\n",
        "type": "(Int -> a -> b) -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array b"
      },
      {
        "name": "initialize",
        "comment": " Initialize an array. `initialize n f` creates an array of length `n` with\nthe element at index `i` initialized to the result of `(f i)`.\n\n    initialize 4 identity    == fromList [0,1,2,3]\n    initialize 4 (\\n -> n*n) == fromList [0,1,4,9]\n    initialize 4 (always 0)  == fromList [0,0,0,0]\n",
        "type": "Int -> (Int -> a) -> CollectionsNg.Array.Array a"
      },
      {
        "name": "isEmpty",
        "comment": " Determine if an array is empty.\n\n    isEmpty empty == True\n",
        "type": "CollectionsNg.Array.Array a -> Bool"
      },
      {
        "name": "length",
        "comment": " Return the length of an array.\n\n    length (fromList [1,2,3]) == 3\n",
        "type": "CollectionsNg.Array.Array a -> Int"
      },
      {
        "name": "map",
        "comment": " Apply a function on every element in an array.\n\n    map sqrt (fromList [1,4,9]) == fromList [1,2,3]\n",
        "type": "(a -> b) -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array b"
      },
      {
        "name": "push",
        "comment": " Push an element to the end of an array.\n\n    push 3 (fromList [1,2]) == fromList [1,2,3]\n",
        "type": "a -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
      },
      {
        "name": "repeat",
        "comment": " Creates an array with a given length, filled with a default element.\n\n    repeat 5 0     == fromList [0,0,0,0,0]\n    repeat 3 \"cat\" == fromList [\"cat\",\"cat\",\"cat\"]\n\nNotice that `repeat 3 x` is the same as `initialize 3 (always x)`.\n",
        "type": "Int -> a -> CollectionsNg.Array.Array a"
      },
      {
        "name": "set",
        "comment": " Set the element at a particular index. Returns an updated array.\nIf the index is out of range, the array is unaltered.\n\n    set 1 7 (fromList [1,2,3]) == fromList [1,7,3]\n",
        "type": "Int -> a -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
      },
      {
        "name": "slice",
        "comment": " Get a sub-section of an array: `(slice start end array)`. The `start` is a\nzero-based index where we will start our slice. The `end` is a zero-based index\nthat indicates the end of the slice. The slice extracts up to but not including\n`end`.\n\n    slice  0  3 (fromList [0,1,2,3,4]) == fromList [0,1,2]\n    slice  1  4 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n\nBoth the `start` and `end` indexes can be negative, indicating an offset from\nthe end of the array.\n\n    slice  1 -1 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n    slice -2  5 (fromList [0,1,2,3,4]) == fromList [3,4]\n\nThis makes it pretty easy to `pop` the last element off of an array: `slice 0 -1 array`\n",
        "type": "Int -> Int -> CollectionsNg.Array.Array a -> CollectionsNg.Array.Array a"
      },
      {
        "name": "toIndexedList",
        "comment": " Create an indexed list from an array. Each element of the array will be\npaired with its index.\n\n    toIndexedList (fromList [\"cat\",\"dog\"]) == [(0,\"cat\"), (1,\"dog\")]\n",
        "type": "CollectionsNg.Array.Array a -> List ( Int, a )"
      },
      {
        "name": "toList",
        "comment": " Create a list of elements from an array.\n\n    toList (fromList [3,5,8]) == [3,5,8]\n",
        "type": "CollectionsNg.Array.Array a -> List a"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  }
]