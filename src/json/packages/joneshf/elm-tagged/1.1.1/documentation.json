[
  {
    "name": "Tagged.Dict",
    "comment": "\n\nA module that allows tagging dictionaries, while maintaining an API parallel to `Dict`.\n\nA common idea is wanting to use a value that is not `comparable` as the key of a `Dict a b`.\nSince we can't currently do that there are many different ways to address the problem.\nOne way to solve that problem is to use a type level assertion.\n\nRather than holding on to an entirely different type in the keys and threading a comparison function through,\nwe can just tell elm that we'd like to tag the `Dict a b` at compile time.\nDoing so allows us to reuse the underlying behavior of the `Dict a b` with very little runtime overhead.\nMost functions here are simple wrappers to refine the types without modifying the values.\n\n@docs TaggedDict\n\n# Build\n\n@docs empty, singleton, insert\n\n# Query\n\n@docs update, remove, isEmpty, member, get, size\n\n# Lists\n\n@docs untaggedKeys, keys, values, toUntaggedList, fromUntaggedList, toList, fromList\n\n# Transform\n\n@docs map, foldl, foldr, filter, partition\n\n# Combine\n@docs union, intersect, diff, merge\n",
    "aliases": [
      {
        "name": "TaggedDict",
        "comment": "\nA dictionary that tags the keys with an additional constraint.\n\nThe constraint is phantom in that it doesn't show up at runtime.\n",
        "args": [
          "a",
          "b",
          "c"
        ],
        "type": "Tagged.Tagged a (Dict.Dict b c)"
      }
    ],
    "types": [],
    "values": [
      {
        "name": "diff",
        "comment": "\nKeep a key-value pair when its key does not appear in the second dictionary.\n",
        "type": "Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "empty",
        "comment": "\nCreate an empty dictionary.\n",
        "type": "Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "filter",
        "comment": "\nKeep a key-value pair when it satisfies a predicate.\n",
        "type": "(Tagged.Tagged k comparable -> v -> Bool) -> Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "foldl",
        "comment": "\nFold over the key-value pairs in a dictionary, in order from lowest key to highest key.\n",
        "type": "(Tagged.Tagged k comparable -> v -> b -> b) -> b -> Tagged.Dict.TaggedDict k comparable v -> b"
      },
      {
        "name": "foldr",
        "comment": "\nFold over the key-value pairs in a dictionary, in order from highest key to lowest key.\n",
        "type": "(Tagged.Tagged k comparable -> v -> b -> b) -> b -> Tagged.Dict.TaggedDict k comparable v -> b"
      },
      {
        "name": "fromList",
        "comment": "\nConvert an association list into a dictionary.\n",
        "type": "List ( Tagged.Tagged k comparable, v ) -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "fromUntaggedList",
        "comment": "\nConvert an untagged association list into a dictionary.\n",
        "type": "List ( comparable, v ) -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "get",
        "comment": "\nGet the value associated with a key.\n",
        "type": "Tagged.Tagged k comparable -> Tagged.Dict.TaggedDict k comparable v -> Maybe.Maybe v"
      },
      {
        "name": "insert",
        "comment": "\nInsert a key-value pair into a dictionary. Replaces value when there is a collision.\n",
        "type": "Tagged.Tagged k comparable -> v -> Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "intersect",
        "comment": "\nKeep a key-value pair when its key appears in the second dictionary. Preference is given to values in the first dictionary.\n",
        "type": "Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "isEmpty",
        "comment": "\nDetermine if a dictionary is empty.\n",
        "type": "Tagged.Dict.TaggedDict k c v -> Bool"
      },
      {
        "name": "keys",
        "comment": "\nGet all of the keys in a dictionary, sorted from lowest to highest.\n",
        "type": "Tagged.Dict.TaggedDict k comparable v -> List (Tagged.Tagged k comparable)"
      },
      {
        "name": "map",
        "comment": "\nApply a function to all values in a dictionary.\n",
        "type": "(Tagged.Tagged k comparable -> a -> b) -> Tagged.Dict.TaggedDict k comparable a -> Tagged.Dict.TaggedDict k comparable b"
      },
      {
        "name": "member",
        "comment": "\nDetermine if a key is in a dictionary.\n",
        "type": "Tagged.Tagged k comparable -> Tagged.Dict.TaggedDict k comparable v -> Bool"
      },
      {
        "name": "merge",
        "comment": "\nThe most general way of combining two dictionaries.\n",
        "type": "(Tagged.Tagged k comparable -> a -> result -> result) -> (Tagged.Tagged k comparable -> a -> b -> result -> result) -> (Tagged.Tagged k comparable -> b -> result -> result) -> Tagged.Dict.TaggedDict k comparable a -> Tagged.Dict.TaggedDict k comparable b -> result -> result"
      },
      {
        "name": "partition",
        "comment": "\nPartition a dictionary according to a predicate. The first dictionary contains all key-value pairs which satisfy the predicate, and the second contains the rest.\n",
        "type": "(Tagged.Tagged k comparable -> v -> Bool) -> Tagged.Dict.TaggedDict k comparable v -> ( Tagged.Dict.TaggedDict k comparable v , Tagged.Dict.TaggedDict k comparable v )"
      },
      {
        "name": "remove",
        "comment": "\nRemove a key-value pair from a dictionary. If the key is not found, no changes are made.\n",
        "type": "Tagged.Tagged k comparable -> Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "singleton",
        "comment": "\nCreate a dictionary with one key-value pair.\n",
        "type": "Tagged.Tagged k comparable -> v -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "size",
        "comment": "\nDetermine the number of key-value pairs in the dictionary.\n",
        "type": "Tagged.Dict.TaggedDict k c v -> Int"
      },
      {
        "name": "toList",
        "comment": "\nConvert a dictionary into an association list of key-value pairs, sorted by keys.\n",
        "type": "Tagged.Dict.TaggedDict k comparable v -> List ( Tagged.Tagged k comparable, v )"
      },
      {
        "name": "toUntaggedList",
        "comment": "\nConvert a dictionary into an association list of untagged key-value pairs, sorted by keys.\n",
        "type": "Tagged.Dict.TaggedDict k comparable v -> List ( comparable, v )"
      },
      {
        "name": "union",
        "comment": "\nCombine two dictionaries. If there is a collision, preference is given to the first dictionary.\n",
        "type": "Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "untaggedKeys",
        "comment": "\nGet all of the untagged keys in a dictionary, sorted from lowest to highest.\n",
        "type": "Tagged.Dict.TaggedDict k comparable v -> List comparable"
      },
      {
        "name": "update",
        "comment": "\nUpdate the value of a dictionary for a specific key with a given function.\n",
        "type": "Tagged.Tagged k comparable -> (Maybe.Maybe v -> Maybe.Maybe v) -> Tagged.Dict.TaggedDict k comparable v -> Tagged.Dict.TaggedDict k comparable v"
      },
      {
        "name": "values",
        "comment": "\nGet all of the values in a dictionary, in the order of their keys.\n",
        "type": "Tagged.Dict.TaggedDict k comparable v -> List v"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  },
  {
    "name": "Tagged",
    "comment": "\n\nA module that allows you to \"tag\" a value.\n\n@docs Tagged, tag, retag, untag, map, ap, map2, bind, extend\n",
    "aliases": [],
    "types": [
      {
        "name": "Tagged",
        "comment": "\nA Type that pairs a `value` with a `tag`.\n\nThe `tag` is ignored at runtime as evidenced by the only value constructor:\n\n```elm\nTagged : value -> Tagged tag value\n```\n",
        "args": [
          "tag",
          "value"
        ],
        "cases": [
          [
            "Tagged",
            [
              "value"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "ap",
        "comment": "\nUseful for composing functions together infix:\n\n```elm\nfoo =\n  Array.set `map` index `ap` value `ap` arr\n```\n",
        "type": "Tagged.Tagged tag (oldValue -> newValue) -> Tagged.Tagged tag oldValue -> Tagged.Tagged tag newValue"
      },
      {
        "name": "bind",
        "comment": "\nUseful for restricting the tag created in a polymorphic function.\n",
        "type": "(oldValue -> Tagged.Tagged tag newValue) -> Tagged.Tagged tag oldValue -> Tagged.Tagged tag newValue"
      },
      {
        "name": "extend",
        "comment": "\nUseful when you have a function that throws away a tag prematurely,\nbut you still need the tag later.\n",
        "type": "(Tagged.Tagged tag oldValue -> newValue) -> Tagged.Tagged tag oldValue -> Tagged.Tagged tag newValue"
      },
      {
        "name": "map",
        "comment": "\nUseful for composing functions together infix:\n\n```elm\nfoo =\n  Array.set `map` index `ap` value `ap` arr\n```\n",
        "type": "(oldValue -> newValue) -> Tagged.Tagged tag oldValue -> Tagged.Tagged tag newValue"
      },
      {
        "name": "map2",
        "comment": "\nAn alternative to `ap`:\n\n```elm\nfoo =\n  map2 Array.get index arr\n```\n",
        "type": "(a -> b -> c) -> Tagged.Tagged tag a -> Tagged.Tagged tag b -> Tagged.Tagged tag c"
      },
      {
        "name": "retag",
        "comment": "\nExplicitly changes the tag of a value.\n\nForces you to recognize that the value is being interpreted differently from before.\n",
        "type": "Tagged.Tagged oldTag value -> Tagged.Tagged newTag value"
      },
      {
        "name": "tag",
        "comment": "\nAn alias for the `Tagged` value constructor.\n",
        "type": "value -> Tagged.Tagged tag value"
      },
      {
        "name": "untag",
        "comment": "\nWe can remove the tag when we're done making additional compile-time assertions.\n",
        "type": "Tagged.Tagged tag value -> value"
      }
    ],
    "generated-with-elm-version": "0.17.1"
  }
]