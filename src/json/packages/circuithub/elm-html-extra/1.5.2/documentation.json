[
  {
    "name": "Html.Events.Extra",
    "comment": "Additional event handlers for html.\n\n# Text Input helpers\n@docs onInput\n\n# Event decoders\n* TODO: `key`\n* TODO: `code`\n* TODO: `KeyEvent`, `keyEvent`\n@docs charCode\n\n# Typed event decoders\n@docs targetValueFloat, targetValueInt, targetValueMaybe, targetValueMaybeFloat, targetValueMaybeInt\n@docs targetValueFloatParse, targetValueIntParse, targetValueMaybeFloatParse, targetValueMaybeIntParse",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "charCode",
        "comment": "Character code for key board events.\nThis is being deprecated, but support for DOM3 Keyboard events is not yet present in most browsers.",
        "type": "Json.Decode.Decoder (Maybe.Maybe Char)"
      },
      {
        "name": "onInput",
        "comment": "Return an [`input`](https://developer.mozilla.org/en-US/docs/Web/Events/input)\nevent handler which passes along that event's `event.target.value` string.",
        "type": "Signal.Address a -> (String -> a) -> Html.Attribute"
      },
      {
        "name": "targetValueFloat",
        "comment": "Floating-point target value.",
        "type": "Json.Decode.Decoder Float"
      },
      {
        "name": "targetValueFloatParse",
        "comment": "Parse a floating-point value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.",
        "type": "Json.Decode.Decoder Float"
      },
      {
        "name": "targetValueInt",
        "comment": "Integer target value.",
        "type": "Json.Decode.Decoder Int"
      },
      {
        "name": "targetValueIntParse",
        "comment": "Parse an integer value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.",
        "type": "Json.Decode.Decoder Int"
      },
      {
        "name": "targetValueMaybe",
        "comment": "String or empty target value.",
        "type": "Json.Decode.Decoder (Maybe.Maybe String)"
      },
      {
        "name": "targetValueMaybeFloat",
        "comment": "Floating-point or empty target value.",
        "type": "Json.Decode.Decoder (Maybe.Maybe Float)"
      },
      {
        "name": "targetValueMaybeFloatParse",
        "comment": "Parse an optional floating-point value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.",
        "type": "Json.Decode.Decoder (Maybe.Maybe Float)"
      },
      {
        "name": "targetValueMaybeInt",
        "comment": "Integer or empty target value.",
        "type": "Json.Decode.Decoder (Maybe.Maybe Int)"
      },
      {
        "name": "targetValueMaybeIntParse",
        "comment": "Parse an optional integer value from the input instead of using `valueAsNumber`.\nUse this with inputs that do not have a `number` type.",
        "type": "Json.Decode.Decoder (Maybe.Maybe Int)"
      }
    ],
    "generated-with-elm-version": "0.15.1"
  },
  {
    "name": "Html.Attributes.Extra",
    "comment": "Additional attributes for html\n\n# Inputs\n@docs valueAsFloat, valueAsInt\n\n# Semantic web\n@docs role\n\n# Meter element\n@docs low, high, optimum\n\n# Media element\n@docs volume\n\n# Custom Attributes\n@docs stringProperty\n@docs boolProperty\n@docs floatProperty\n@docs intProperty",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "boolProperty",
        "comment": "Create arbitrary bool *properties*.",
        "type": "String -> Bool -> Html.Attribute"
      },
      {
        "name": "floatProperty",
        "comment": "Create arbitrary floating-point *properties*.",
        "type": "String -> Float -> Html.Attribute"
      },
      {
        "name": "high",
        "comment": "The lower numeric bound of the high end of the measured range, used with the meter element.",
        "type": "String -> Html.Attribute"
      },
      {
        "name": "intProperty",
        "comment": "Create arbitrary integer *properties*.",
        "type": "String -> Int -> Html.Attribute"
      },
      {
        "name": "low",
        "comment": "The upper numeric bound of the low end of the measured range, used with the meter element.",
        "type": "String -> Html.Attribute"
      },
      {
        "name": "optimum",
        "comment": "This attribute indicates the optimal numeric value, used with the meter element.",
        "type": "String -> Html.Attribute"
      },
      {
        "name": "role",
        "comment": "Used to annotate markup languages with machine-extractable semantic information about the purpose of an element.\nSee the [official specs](http://www.w3.org/TR/role-attribute/).",
        "type": "String -> Html.Attribute"
      },
      {
        "name": "stringProperty",
        "comment": "Create arbitrary string *properties*.",
        "type": "String -> String -> Html.Attribute"
      },
      {
        "name": "valueAsFloat",
        "comment": "Uses `valueAsNumber` to update an input with a floating-point value.\nThis should only be used on &lt;input&gt; of type `number`, `range`, or `date`.\nIt differs from `value` in that a floating point value will not necessarily overwrite the contents on an input element.\n\n    valueAsFloat 2.5 -- e.g. will not change the displayed value for input showing \"2.5000\"\n    valueAsFloat 0.4 -- e.g. will not change the displayed value for input showing \".4\"",
        "type": "Float -> Html.Attribute"
      },
      {
        "name": "valueAsInt",
        "comment": "Uses `valueAsNumber` to update an input with an integer value.\nThis should only be used on &lt;input&gt; of type `number`, `range`, or `date`.\nIt differs from `value` in that an integer value will not necessarily overwrite the contents on an input element.\n\n    valueAsInt 18 -- e.g. will not change the displayed value for input showing \"00018\"",
        "type": "Int -> Html.Attribute"
      },
      {
        "name": "volume",
        "comment": "Audio volume, starting from 0.0 (silent) up to 1.0 (loudest).",
        "type": "Float -> Html.Attribute"
      }
    ],
    "generated-with-elm-version": "0.15.1"
  }
]