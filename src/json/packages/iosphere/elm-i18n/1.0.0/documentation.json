[
  {
    "name": "PO.Import",
    "comment": " Generates a list of localized elements for multiple modules from a PO\nstring.\n\nThis matches the export format generated by PO.Export.generate.\n\nUse Localized.Writer.write to create elm code from the list of localized\nelements.\n\n@docs generate\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "generate",
        "comment": " Generates localized elements for multiple modules from a PO\nstring. The msgids in the PO file are expected to include the module name and\nkey. For example `msgid \"Translation.Main.title\"` will generate a\n`Localized.Element` with key `title` and module `Translation.Main`.\n\nYou will usually use this output to create elm code:\n\n    PO.Import.generate poString\n    |> Localized.Writer.write\n\n",
        "type": "String -> List ( String, List Localized.Element )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Localized.Parser",
    "comment": " The parser parses elm code (one module) into a list of localized elements.\n\n@docs parse\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "parse",
        "comment": " Parses the source code of an elm module and\nreturns a list of localized elements.\n",
        "type": "String -> List Localized.Element"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "PO.Export",
    "comment": " The PO export generates PO strings from a list of localized elements\n(Localized.Element). For more information about the PO Format visit:\nhttps://www.gnu.org/savannah-checkouts/gnu/gettext/manual/html_node/PO-Files.html\n\n@docs generate\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "generate",
        "comment": " Generate a PO string from a list of localized elements (Localized.Element).\nYou will usually have generated that list from a Localized.Parser that parsed\nElm source code into a list of localized elements:\n\n    Localized.Parser.parse source\n        |> PO.Export.generate\n\n",
        "type": "List Localized.Element -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Localized.Writer",
    "comment": " This is the inverse of the Localized.Parser. The Writer takes a list of\nmodule names and associated localized elements and returns the source code for\nelm modules implementing the localized elements.\n\n@docs generate\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "generate",
        "comment": " Generate elm-source code for a list of modules and their associated\nlocalized elements.\n",
        "type": "List ( String, List Localized.Element ) -> List ( String, String )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "CSV.Export",
    "comment": " The CSV export generates CSV from a list of localized elements\n(Localized.Element).\n\n@docs generate\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "generate",
        "comment": " Generate a CSV string from a list of localized elements (Localized.Element).\nYou will usually have generated that list from a Localized.Parser that parsed\nElm source code into a list of localized elements:\n\n    Localized.Parser.parse source\n        |> CSV.Export.generate\n\n",
        "type": "List Localized.Element -> String"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "CSV.Import",
    "comment": " Generates a list of localized elements for multiple modules from a CSV\nstring. The CSV string is expected to have the following columns:\nmodulename, key, comment, placeholders, value\n\nThis matches the export format generated by CSV.Export.generate.\n\nUse Localized.Writer.write to create elm code from the list of localized\nelements.\n\n@docs generate\n",
    "aliases": [],
    "types": [],
    "values": [
      {
        "name": "generate",
        "comment": " Generates localized elements for multiple modules from a CSV\nstring. The CSV string is expected to have the following columns:\nmodulename, key, comment, placeholders, value\n\nYou will usually use this output to create elm code:\n\n    CSV.Import.generate csvString\n    |> Localized.Writer.write\n\n",
        "type": "String -> List ( String, List Localized.Element )"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  },
  {
    "name": "Localized",
    "comment": " This module provides data structures describing localized string functions\nand constants.\n\n@docs Element, Meta, Static, Format, FormatComponent, isEmptyFormatComponent\n",
    "aliases": [
      {
        "name": "Format",
        "comment": " A formatted string can contain placeholders and static components. This\nallows us to describe strings that contain dynamic values.\n\n\"Hello, {{name}}\" would be represented as:\n\n    { placeholders : [\"name\"]\n    , components :\n        [ FormatComponentStatic \"Hello, \"\n        , FormatComponentPlaceholder \"name\"\n        ]\n    }\n",
        "args": [],
        "type": "{ meta : Localized.Meta , placeholders : List String , components : List Localized.FormatComponent }"
      },
      {
        "name": "Meta",
        "comment": " Each localized element (static or format) has a key that is unique\nwithin a module. The comment should help translators and others understand how\nand where the localized element is used.\n",
        "args": [],
        "type": "{ moduleName : String, key : String, comment : String }"
      },
      {
        "name": "Static",
        "comment": " A static string can be localized but cannot contain placeholders.\nIt contains a single string value.\n",
        "args": [],
        "type": "{ meta : Localized.Meta, value : String }"
      }
    ],
    "types": [
      {
        "name": "Element",
        "comment": " Describes a localized element consisting of either a static string or a\nformatted string with placeholders.\n",
        "args": [],
        "cases": [
          [
            "ElementStatic",
            [
              "Localized.Static"
            ]
          ],
          [
            "ElementFormat",
            [
              "Localized.Format"
            ]
          ]
        ]
      },
      {
        "name": "FormatComponent",
        "comment": " A list of components make up a formatted element. See Format.\n",
        "args": [],
        "cases": [
          [
            "FormatComponentStatic",
            [
              "String"
            ]
          ],
          [
            "FormatComponentPlaceholder",
            [
              "String"
            ]
          ]
        ]
      }
    ],
    "values": [
      {
        "name": "isEmptyFormatComponent",
        "comment": " Returns true if the component is empty.\n",
        "type": "Localized.FormatComponent -> Bool"
      }
    ],
    "generated-with-elm-version": "0.18.0"
  }
]